/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

export type HTTPValidationErrorData = {
  detail?: Array<components.ValidationError> | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse1?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse2?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse3?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse4?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse5?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse6?: Response | undefined;
};

export class HTTPValidationError extends Error {
  detail?: Array<components.ValidationError> | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse1?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse2?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse3?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse4?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse5?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse6?: Response | undefined;

  /** The original data that was passed to this error instance. */
  data$: HTTPValidationErrorData;

  constructor(err: HTTPValidationErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.detail != null) this.detail = err.detail;
    if (err.rawResponse != null) this.rawResponse = err.rawResponse;
    if (err.rawResponse1 != null) this.rawResponse1 = err.rawResponse1;
    if (err.rawResponse2 != null) this.rawResponse2 = err.rawResponse2;
    if (err.rawResponse3 != null) this.rawResponse3 = err.rawResponse3;
    if (err.rawResponse4 != null) this.rawResponse4 = err.rawResponse4;
    if (err.rawResponse5 != null) this.rawResponse5 = err.rawResponse5;
    if (err.rawResponse6 != null) this.rawResponse6 = err.rawResponse6;

    this.name = "HTTPValidationError";
  }
}

/** @internal */
export const HTTPValidationError$inboundSchema: z.ZodType<
  HTTPValidationError,
  z.ZodTypeDef,
  unknown
> = z.object({
  detail: z.array(components.ValidationError$inboundSchema).optional(),
  RawResponse: z.instanceof(Response).optional(),
  RawResponse1: z.instanceof(Response).optional(),
  RawResponse2: z.instanceof(Response).optional(),
  RawResponse3: z.instanceof(Response).optional(),
  RawResponse4: z.instanceof(Response).optional(),
  RawResponse5: z.instanceof(Response).optional(),
  RawResponse6: z.instanceof(Response).optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "RawResponse": "rawResponse",
      "RawResponse1": "rawResponse1",
      "RawResponse2": "rawResponse2",
      "RawResponse3": "rawResponse3",
      "RawResponse4": "rawResponse4",
      "RawResponse5": "rawResponse5",
      "RawResponse6": "rawResponse6",
    });

    return new HTTPValidationError(remapped);
  });

/** @internal */
export type HTTPValidationError$Outbound = {
  detail?: Array<components.ValidationError$Outbound> | undefined;
  RawResponse?: never | undefined;
  RawResponse1?: never | undefined;
  RawResponse2?: never | undefined;
  RawResponse3?: never | undefined;
  RawResponse4?: never | undefined;
  RawResponse5?: never | undefined;
  RawResponse6?: never | undefined;
};

/** @internal */
export const HTTPValidationError$outboundSchema: z.ZodType<
  HTTPValidationError$Outbound,
  z.ZodTypeDef,
  HTTPValidationError
> = z.instanceof(HTTPValidationError)
  .transform(v => v.data$)
  .pipe(
    z.object({
      detail: z.array(components.ValidationError$outboundSchema).optional(),
      rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse1: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse2: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse3: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse4: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse5: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse6: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
    }).transform((v) => {
      return remap$(v, {
        rawResponse: "RawResponse",
        rawResponse1: "RawResponse1",
        rawResponse2: "RawResponse2",
        rawResponse3: "RawResponse3",
        rawResponse4: "RawResponse4",
        rawResponse5: "RawResponse5",
        rawResponse6: "RawResponse6",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HTTPValidationError$ {
  /** @deprecated use `HTTPValidationError$inboundSchema` instead. */
  export const inboundSchema = HTTPValidationError$inboundSchema;
  /** @deprecated use `HTTPValidationError$outboundSchema` instead. */
  export const outboundSchema = HTTPValidationError$outboundSchema;
  /** @deprecated use `HTTPValidationError$Outbound` instead. */
  export type Outbound = HTTPValidationError$Outbound;
}
