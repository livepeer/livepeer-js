/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  HTTPError,
  HTTPError$inboundSchema,
  HTTPError$Outbound,
  HTTPError$outboundSchema,
} from "./httperror.js";
import {
  HTTPValidationError,
  HTTPValidationError$inboundSchema,
  HTTPValidationError$Outbound,
  HTTPValidationError$outboundSchema,
} from "./httpvalidationerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
import {
  StudioApiError,
  StudioApiError$inboundSchema,
  StudioApiError$Outbound,
  StudioApiError$outboundSchema,
} from "./studioapierror.js";

/**
 * Internal Server Error
 */
export type GenTextToImageGenerateResponse500ResponseBody =
  | HTTPError
  | StudioApiError;

/**
 * Validation Error
 */
export type GenTextToImageGenerateResponseResponseBody =
  | HTTPValidationError
  | StudioApiError;

/**
 * Unauthorized
 */
export type GenTextToImageGenerateResponseBody = HTTPError | StudioApiError;

/**
 * Bad Request
 */
export type GenTextToImageResponseBody = HTTPError | StudioApiError;

/** @internal */
export const GenTextToImageGenerateResponse500ResponseBody$inboundSchema:
  z.ZodType<
    GenTextToImageGenerateResponse500ResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.union([HTTPError$inboundSchema, StudioApiError$inboundSchema]);

/** @internal */
export type GenTextToImageGenerateResponse500ResponseBody$Outbound =
  | HTTPError$Outbound
  | StudioApiError$Outbound;

/** @internal */
export const GenTextToImageGenerateResponse500ResponseBody$outboundSchema:
  z.ZodType<
    GenTextToImageGenerateResponse500ResponseBody$Outbound,
    z.ZodTypeDef,
    GenTextToImageGenerateResponse500ResponseBody
  > = z.union([HTTPError$outboundSchema, StudioApiError$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenTextToImageGenerateResponse500ResponseBody$ {
  /** @deprecated use `GenTextToImageGenerateResponse500ResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GenTextToImageGenerateResponse500ResponseBody$inboundSchema;
  /** @deprecated use `GenTextToImageGenerateResponse500ResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GenTextToImageGenerateResponse500ResponseBody$outboundSchema;
  /** @deprecated use `GenTextToImageGenerateResponse500ResponseBody$Outbound` instead. */
  export type Outbound = GenTextToImageGenerateResponse500ResponseBody$Outbound;
}

export function genTextToImageGenerateResponse500ResponseBodyToJSON(
  genTextToImageGenerateResponse500ResponseBody:
    GenTextToImageGenerateResponse500ResponseBody,
): string {
  return JSON.stringify(
    GenTextToImageGenerateResponse500ResponseBody$outboundSchema.parse(
      genTextToImageGenerateResponse500ResponseBody,
    ),
  );
}

export function genTextToImageGenerateResponse500ResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GenTextToImageGenerateResponse500ResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GenTextToImageGenerateResponse500ResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GenTextToImageGenerateResponse500ResponseBody' from JSON`,
  );
}

/** @internal */
export const GenTextToImageGenerateResponseResponseBody$inboundSchema:
  z.ZodType<GenTextToImageGenerateResponseResponseBody, z.ZodTypeDef, unknown> =
    z.union([HTTPValidationError$inboundSchema, StudioApiError$inboundSchema]);

/** @internal */
export type GenTextToImageGenerateResponseResponseBody$Outbound =
  | HTTPValidationError$Outbound
  | StudioApiError$Outbound;

/** @internal */
export const GenTextToImageGenerateResponseResponseBody$outboundSchema:
  z.ZodType<
    GenTextToImageGenerateResponseResponseBody$Outbound,
    z.ZodTypeDef,
    GenTextToImageGenerateResponseResponseBody
  > = z.union([
    HTTPValidationError$outboundSchema,
    StudioApiError$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenTextToImageGenerateResponseResponseBody$ {
  /** @deprecated use `GenTextToImageGenerateResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GenTextToImageGenerateResponseResponseBody$inboundSchema;
  /** @deprecated use `GenTextToImageGenerateResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GenTextToImageGenerateResponseResponseBody$outboundSchema;
  /** @deprecated use `GenTextToImageGenerateResponseResponseBody$Outbound` instead. */
  export type Outbound = GenTextToImageGenerateResponseResponseBody$Outbound;
}

export function genTextToImageGenerateResponseResponseBodyToJSON(
  genTextToImageGenerateResponseResponseBody:
    GenTextToImageGenerateResponseResponseBody,
): string {
  return JSON.stringify(
    GenTextToImageGenerateResponseResponseBody$outboundSchema.parse(
      genTextToImageGenerateResponseResponseBody,
    ),
  );
}

export function genTextToImageGenerateResponseResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GenTextToImageGenerateResponseResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GenTextToImageGenerateResponseResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GenTextToImageGenerateResponseResponseBody' from JSON`,
  );
}

/** @internal */
export const GenTextToImageGenerateResponseBody$inboundSchema: z.ZodType<
  GenTextToImageGenerateResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([HTTPError$inboundSchema, StudioApiError$inboundSchema]);

/** @internal */
export type GenTextToImageGenerateResponseBody$Outbound =
  | HTTPError$Outbound
  | StudioApiError$Outbound;

/** @internal */
export const GenTextToImageGenerateResponseBody$outboundSchema: z.ZodType<
  GenTextToImageGenerateResponseBody$Outbound,
  z.ZodTypeDef,
  GenTextToImageGenerateResponseBody
> = z.union([HTTPError$outboundSchema, StudioApiError$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenTextToImageGenerateResponseBody$ {
  /** @deprecated use `GenTextToImageGenerateResponseBody$inboundSchema` instead. */
  export const inboundSchema = GenTextToImageGenerateResponseBody$inboundSchema;
  /** @deprecated use `GenTextToImageGenerateResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GenTextToImageGenerateResponseBody$outboundSchema;
  /** @deprecated use `GenTextToImageGenerateResponseBody$Outbound` instead. */
  export type Outbound = GenTextToImageGenerateResponseBody$Outbound;
}

export function genTextToImageGenerateResponseBodyToJSON(
  genTextToImageGenerateResponseBody: GenTextToImageGenerateResponseBody,
): string {
  return JSON.stringify(
    GenTextToImageGenerateResponseBody$outboundSchema.parse(
      genTextToImageGenerateResponseBody,
    ),
  );
}

export function genTextToImageGenerateResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GenTextToImageGenerateResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GenTextToImageGenerateResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenTextToImageGenerateResponseBody' from JSON`,
  );
}

/** @internal */
export const GenTextToImageResponseBody$inboundSchema: z.ZodType<
  GenTextToImageResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([HTTPError$inboundSchema, StudioApiError$inboundSchema]);

/** @internal */
export type GenTextToImageResponseBody$Outbound =
  | HTTPError$Outbound
  | StudioApiError$Outbound;

/** @internal */
export const GenTextToImageResponseBody$outboundSchema: z.ZodType<
  GenTextToImageResponseBody$Outbound,
  z.ZodTypeDef,
  GenTextToImageResponseBody
> = z.union([HTTPError$outboundSchema, StudioApiError$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GenTextToImageResponseBody$ {
  /** @deprecated use `GenTextToImageResponseBody$inboundSchema` instead. */
  export const inboundSchema = GenTextToImageResponseBody$inboundSchema;
  /** @deprecated use `GenTextToImageResponseBody$outboundSchema` instead. */
  export const outboundSchema = GenTextToImageResponseBody$outboundSchema;
  /** @deprecated use `GenTextToImageResponseBody$Outbound` instead. */
  export type Outbound = GenTextToImageResponseBody$Outbound;
}

export function genTextToImageResponseBodyToJSON(
  genTextToImageResponseBody: GenTextToImageResponseBody,
): string {
  return JSON.stringify(
    GenTextToImageResponseBody$outboundSchema.parse(genTextToImageResponseBody),
  );
}

export function genTextToImageResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GenTextToImageResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GenTextToImageResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GenTextToImageResponseBody' from JSON`,
  );
}
