/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Error
 */
export type ErrorTData = {
    errors: Array<string>;
};

/**
 * Error
 */
export class ErrorT extends Error {
    errors: Array<string>;

    /** The original data that was passed to this error instance. */
    data$: ErrorTData;

    constructor(err: ErrorTData) {
        super("");
        this.data$ = err;

        this.errors = err.errors;

        this.message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : "API error occurred";

        this.name = "ErrorT";
    }
}

/** @internal */
export namespace ErrorT$ {
    export type Inbound = {
        errors: Array<string>;
    };

    export const inboundSchema: z.ZodType<ErrorT, z.ZodTypeDef, Inbound> = z
        .object({
            errors: z.array(z.string()),
        })
        .transform((v) => {
            return new ErrorT({
                errors: v.errors,
            });
        });
    export type Outbound = {
        errors: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ErrorT> = z
        .instanceof(ErrorT)
        .transform((v) => v.data$)
        .pipe(
            z
                .object({
                    errors: z.array(z.string()),
                })
                .transform((v) => {
                    return {
                        errors: v.errors,
                    };
                })
        );
}
