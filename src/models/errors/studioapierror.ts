/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

/**
 * Error
 */
export type StudioApiErrorData = {
  errors?: Array<string> | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse1?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse2?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse3?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse4?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse5?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse6?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse7?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse8?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse9?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse10?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse11?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse12?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse13?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse14?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse15?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse16?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse17?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse18?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse19?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse20?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse21?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse22?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse23?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse24?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse25?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse26?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse27?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse28?: Response | undefined;
};

/**
 * Error
 */
export class StudioApiError extends Error {
  errors?: Array<string> | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse1?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse2?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse3?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse4?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse5?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse6?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse7?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse8?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse9?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse10?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse11?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse12?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse13?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse14?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse15?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse16?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse17?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse18?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse19?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse20?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse21?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse22?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse23?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse24?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse25?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse26?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse27?: Response | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse28?: Response | undefined;

  /** The original data that was passed to this error instance. */
  data$: StudioApiErrorData;

  constructor(err: StudioApiErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.errors != null) this.errors = err.errors;
    if (err.rawResponse != null) this.rawResponse = err.rawResponse;
    if (err.rawResponse1 != null) this.rawResponse1 = err.rawResponse1;
    if (err.rawResponse2 != null) this.rawResponse2 = err.rawResponse2;
    if (err.rawResponse3 != null) this.rawResponse3 = err.rawResponse3;
    if (err.rawResponse4 != null) this.rawResponse4 = err.rawResponse4;
    if (err.rawResponse5 != null) this.rawResponse5 = err.rawResponse5;
    if (err.rawResponse6 != null) this.rawResponse6 = err.rawResponse6;
    if (err.rawResponse7 != null) this.rawResponse7 = err.rawResponse7;
    if (err.rawResponse8 != null) this.rawResponse8 = err.rawResponse8;
    if (err.rawResponse9 != null) this.rawResponse9 = err.rawResponse9;
    if (err.rawResponse10 != null) this.rawResponse10 = err.rawResponse10;
    if (err.rawResponse11 != null) this.rawResponse11 = err.rawResponse11;
    if (err.rawResponse12 != null) this.rawResponse12 = err.rawResponse12;
    if (err.rawResponse13 != null) this.rawResponse13 = err.rawResponse13;
    if (err.rawResponse14 != null) this.rawResponse14 = err.rawResponse14;
    if (err.rawResponse15 != null) this.rawResponse15 = err.rawResponse15;
    if (err.rawResponse16 != null) this.rawResponse16 = err.rawResponse16;
    if (err.rawResponse17 != null) this.rawResponse17 = err.rawResponse17;
    if (err.rawResponse18 != null) this.rawResponse18 = err.rawResponse18;
    if (err.rawResponse19 != null) this.rawResponse19 = err.rawResponse19;
    if (err.rawResponse20 != null) this.rawResponse20 = err.rawResponse20;
    if (err.rawResponse21 != null) this.rawResponse21 = err.rawResponse21;
    if (err.rawResponse22 != null) this.rawResponse22 = err.rawResponse22;
    if (err.rawResponse23 != null) this.rawResponse23 = err.rawResponse23;
    if (err.rawResponse24 != null) this.rawResponse24 = err.rawResponse24;
    if (err.rawResponse25 != null) this.rawResponse25 = err.rawResponse25;
    if (err.rawResponse26 != null) this.rawResponse26 = err.rawResponse26;
    if (err.rawResponse27 != null) this.rawResponse27 = err.rawResponse27;
    if (err.rawResponse28 != null) this.rawResponse28 = err.rawResponse28;

    this.name = "StudioApiError";
  }
}

/** @internal */
export const StudioApiError$inboundSchema: z.ZodType<
  StudioApiError,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.string()).optional(),
  RawResponse: z.instanceof(Response).optional(),
  RawResponse1: z.instanceof(Response).optional(),
  RawResponse2: z.instanceof(Response).optional(),
  RawResponse3: z.instanceof(Response).optional(),
  RawResponse4: z.instanceof(Response).optional(),
  RawResponse5: z.instanceof(Response).optional(),
  RawResponse6: z.instanceof(Response).optional(),
  RawResponse7: z.instanceof(Response).optional(),
  RawResponse8: z.instanceof(Response).optional(),
  RawResponse9: z.instanceof(Response).optional(),
  RawResponse10: z.instanceof(Response).optional(),
  RawResponse11: z.instanceof(Response).optional(),
  RawResponse12: z.instanceof(Response).optional(),
  RawResponse13: z.instanceof(Response).optional(),
  RawResponse14: z.instanceof(Response).optional(),
  RawResponse15: z.instanceof(Response).optional(),
  RawResponse16: z.instanceof(Response).optional(),
  RawResponse17: z.instanceof(Response).optional(),
  RawResponse18: z.instanceof(Response).optional(),
  RawResponse19: z.instanceof(Response).optional(),
  RawResponse20: z.instanceof(Response).optional(),
  RawResponse21: z.instanceof(Response).optional(),
  RawResponse22: z.instanceof(Response).optional(),
  RawResponse23: z.instanceof(Response).optional(),
  RawResponse24: z.instanceof(Response).optional(),
  RawResponse25: z.instanceof(Response).optional(),
  RawResponse26: z.instanceof(Response).optional(),
  RawResponse27: z.instanceof(Response).optional(),
  RawResponse28: z.instanceof(Response).optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "RawResponse": "rawResponse",
      "RawResponse1": "rawResponse1",
      "RawResponse2": "rawResponse2",
      "RawResponse3": "rawResponse3",
      "RawResponse4": "rawResponse4",
      "RawResponse5": "rawResponse5",
      "RawResponse6": "rawResponse6",
      "RawResponse7": "rawResponse7",
      "RawResponse8": "rawResponse8",
      "RawResponse9": "rawResponse9",
      "RawResponse10": "rawResponse10",
      "RawResponse11": "rawResponse11",
      "RawResponse12": "rawResponse12",
      "RawResponse13": "rawResponse13",
      "RawResponse14": "rawResponse14",
      "RawResponse15": "rawResponse15",
      "RawResponse16": "rawResponse16",
      "RawResponse17": "rawResponse17",
      "RawResponse18": "rawResponse18",
      "RawResponse19": "rawResponse19",
      "RawResponse20": "rawResponse20",
      "RawResponse21": "rawResponse21",
      "RawResponse22": "rawResponse22",
      "RawResponse23": "rawResponse23",
      "RawResponse24": "rawResponse24",
      "RawResponse25": "rawResponse25",
      "RawResponse26": "rawResponse26",
      "RawResponse27": "rawResponse27",
      "RawResponse28": "rawResponse28",
    });

    return new StudioApiError(remapped);
  });

/** @internal */
export type StudioApiError$Outbound = {
  errors?: Array<string> | undefined;
  RawResponse?: never | undefined;
  RawResponse1?: never | undefined;
  RawResponse2?: never | undefined;
  RawResponse3?: never | undefined;
  RawResponse4?: never | undefined;
  RawResponse5?: never | undefined;
  RawResponse6?: never | undefined;
  RawResponse7?: never | undefined;
  RawResponse8?: never | undefined;
  RawResponse9?: never | undefined;
  RawResponse10?: never | undefined;
  RawResponse11?: never | undefined;
  RawResponse12?: never | undefined;
  RawResponse13?: never | undefined;
  RawResponse14?: never | undefined;
  RawResponse15?: never | undefined;
  RawResponse16?: never | undefined;
  RawResponse17?: never | undefined;
  RawResponse18?: never | undefined;
  RawResponse19?: never | undefined;
  RawResponse20?: never | undefined;
  RawResponse21?: never | undefined;
  RawResponse22?: never | undefined;
  RawResponse23?: never | undefined;
  RawResponse24?: never | undefined;
  RawResponse25?: never | undefined;
  RawResponse26?: never | undefined;
  RawResponse27?: never | undefined;
  RawResponse28?: never | undefined;
};

/** @internal */
export const StudioApiError$outboundSchema: z.ZodType<
  StudioApiError$Outbound,
  z.ZodTypeDef,
  StudioApiError
> = z.instanceof(StudioApiError)
  .transform(v => v.data$)
  .pipe(
    z.object({
      errors: z.array(z.string()).optional(),
      rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse1: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse2: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse3: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse4: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse5: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse6: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse7: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse8: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse9: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse10: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse11: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse12: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse13: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse14: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse15: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse16: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse17: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse18: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse19: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse20: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse21: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse22: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse23: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse24: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse25: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse26: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse27: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
      rawResponse28: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
    }).transform((v) => {
      return remap$(v, {
        rawResponse: "RawResponse",
        rawResponse1: "RawResponse1",
        rawResponse2: "RawResponse2",
        rawResponse3: "RawResponse3",
        rawResponse4: "RawResponse4",
        rawResponse5: "RawResponse5",
        rawResponse6: "RawResponse6",
        rawResponse7: "RawResponse7",
        rawResponse8: "RawResponse8",
        rawResponse9: "RawResponse9",
        rawResponse10: "RawResponse10",
        rawResponse11: "RawResponse11",
        rawResponse12: "RawResponse12",
        rawResponse13: "RawResponse13",
        rawResponse14: "RawResponse14",
        rawResponse15: "RawResponse15",
        rawResponse16: "RawResponse16",
        rawResponse17: "RawResponse17",
        rawResponse18: "RawResponse18",
        rawResponse19: "RawResponse19",
        rawResponse20: "RawResponse20",
        rawResponse21: "RawResponse21",
        rawResponse22: "RawResponse22",
        rawResponse23: "RawResponse23",
        rawResponse24: "RawResponse24",
        rawResponse25: "RawResponse25",
        rawResponse26: "RawResponse26",
        rawResponse27: "RawResponse27",
        rawResponse28: "RawResponse28",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StudioApiError$ {
  /** @deprecated use `StudioApiError$inboundSchema` instead. */
  export const inboundSchema = StudioApiError$inboundSchema;
  /** @deprecated use `StudioApiError$outboundSchema` instead. */
  export const outboundSchema = StudioApiError$outboundSchema;
  /** @deprecated use `StudioApiError$Outbound` instead. */
  export type Outbound = StudioApiError$Outbound;
}
