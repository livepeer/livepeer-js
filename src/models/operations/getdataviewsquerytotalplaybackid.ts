/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as errors from "../../models/errors";
import { z } from "zod";

export type GetDataViewsQueryTotalPlaybackIdRequest = {
    /**
     * The playback ID to filter the query results. This can be a canonical
     *
     * @remarks
     * playback ID from Livepeer assets or streams, or dStorage identifiers
     * for assets
     *
     */
    playbackId: string;
};

/**
 * A simplified metric object about aggregate viewership of an
 *
 * @remarks
 * asset. Either playbackId or dStorageUrl will be set.
 *
 */
export type GetDataViewsQueryTotalPlaybackIdResponseBody = {
    /**
     * The playback ID associated with the metric
     */
    playbackId?: string | undefined;
    /**
     * The URL of the distributed storage used for the asset
     */
    dStorageUrl?: string | undefined;
    /**
     * The number of views for the asset
     */
    viewCount: number;
    /**
     * The total playtime in minutes for the asset
     */
    playtimeMins: number;
};

export type GetDataViewsQueryTotalPlaybackIdResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * A single Metric object with the viewCount and playtimeMins metrics.
     */
    object?: GetDataViewsQueryTotalPlaybackIdResponseBody | undefined;
    /**
     * Error
     */
    error?: errors.ErrorT | undefined;
};

/** @internal */
export namespace GetDataViewsQueryTotalPlaybackIdRequest$ {
    export type Inbound = {
        playbackId: string;
    };

    export const inboundSchema: z.ZodType<
        GetDataViewsQueryTotalPlaybackIdRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            playbackId: z.string(),
        })
        .transform((v) => {
            return {
                playbackId: v.playbackId,
            };
        });

    export type Outbound = {
        playbackId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDataViewsQueryTotalPlaybackIdRequest
    > = z
        .object({
            playbackId: z.string(),
        })
        .transform((v) => {
            return {
                playbackId: v.playbackId,
            };
        });
}

/** @internal */
export namespace GetDataViewsQueryTotalPlaybackIdResponseBody$ {
    export type Inbound = {
        playbackId?: string | undefined;
        dStorageUrl?: string | undefined;
        viewCount: number;
        playtimeMins: number;
    };

    export const inboundSchema: z.ZodType<
        GetDataViewsQueryTotalPlaybackIdResponseBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            playbackId: z.string().optional(),
            dStorageUrl: z.string().optional(),
            viewCount: z.number().int(),
            playtimeMins: z.number(),
        })
        .transform((v) => {
            return {
                ...(v.playbackId === undefined ? null : { playbackId: v.playbackId }),
                ...(v.dStorageUrl === undefined ? null : { dStorageUrl: v.dStorageUrl }),
                viewCount: v.viewCount,
                playtimeMins: v.playtimeMins,
            };
        });

    export type Outbound = {
        playbackId?: string | undefined;
        dStorageUrl?: string | undefined;
        viewCount: number;
        playtimeMins: number;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDataViewsQueryTotalPlaybackIdResponseBody
    > = z
        .object({
            playbackId: z.string().optional(),
            dStorageUrl: z.string().optional(),
            viewCount: z.number().int(),
            playtimeMins: z.number(),
        })
        .transform((v) => {
            return {
                ...(v.playbackId === undefined ? null : { playbackId: v.playbackId }),
                ...(v.dStorageUrl === undefined ? null : { dStorageUrl: v.dStorageUrl }),
                viewCount: v.viewCount,
                playtimeMins: v.playtimeMins,
            };
        });
}

/** @internal */
export namespace GetDataViewsQueryTotalPlaybackIdResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        object?: GetDataViewsQueryTotalPlaybackIdResponseBody$.Inbound | undefined;
        error?: errors.ErrorT$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetDataViewsQueryTotalPlaybackIdResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z
                .lazy(() => GetDataViewsQueryTotalPlaybackIdResponseBody$.inboundSchema)
                .optional(),
            error: errors.ErrorT$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
                ...(v.error === undefined ? null : { error: v.error }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: GetDataViewsQueryTotalPlaybackIdResponseBody$.Outbound | undefined;
        error?: errors.ErrorT$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetDataViewsQueryTotalPlaybackIdResponse
    > = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z
                .lazy(() => GetDataViewsQueryTotalPlaybackIdResponseBody$.outboundSchema)
                .optional(),
            error: errors.ErrorT$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
                ...(v.error === undefined ? null : { error: v.error }),
            };
        });
}
