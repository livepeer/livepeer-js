/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as errors from "../../models/errors";
import { z } from "zod";

export type Task = {
    id?: string | undefined;
};

/**
 * Success
 */
export type PostAssetRequestUploadResponseBody = {
    url: string;
    tusEndpoint: string;
    asset: components.Asset;
    task: Task;
};

export type PostAssetRequestUploadResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Success
     */
    object?: PostAssetRequestUploadResponseBody | undefined;
    /**
     * Error
     */
    error?: errors.ErrorT | undefined;
};

/** @internal */
export namespace Task$ {
    export type Inbound = {
        id?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Task, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Task> = z
        .object({
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });
}

/** @internal */
export namespace PostAssetRequestUploadResponseBody$ {
    export type Inbound = {
        url: string;
        tusEndpoint: string;
        asset: components.Asset$.Inbound;
        task: Task$.Inbound;
    };

    export const inboundSchema: z.ZodType<
        PostAssetRequestUploadResponseBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            url: z.string(),
            tusEndpoint: z.string(),
            asset: components.Asset$.inboundSchema,
            task: z.lazy(() => Task$.inboundSchema),
        })
        .transform((v) => {
            return {
                url: v.url,
                tusEndpoint: v.tusEndpoint,
                asset: v.asset,
                task: v.task,
            };
        });

    export type Outbound = {
        url: string;
        tusEndpoint: string;
        asset: components.Asset$.Outbound;
        task: Task$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostAssetRequestUploadResponseBody
    > = z
        .object({
            url: z.string(),
            tusEndpoint: z.string(),
            asset: components.Asset$.outboundSchema,
            task: z.lazy(() => Task$.outboundSchema),
        })
        .transform((v) => {
            return {
                url: v.url,
                tusEndpoint: v.tusEndpoint,
                asset: v.asset,
                task: v.task,
            };
        });
}

/** @internal */
export namespace PostAssetRequestUploadResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        object?: PostAssetRequestUploadResponseBody$.Inbound | undefined;
        error?: errors.ErrorT$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PostAssetRequestUploadResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => PostAssetRequestUploadResponseBody$.inboundSchema).optional(),
            error: errors.ErrorT$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
                ...(v.error === undefined ? null : { error: v.error }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: PostAssetRequestUploadResponseBody$.Outbound | undefined;
        error?: errors.ErrorT$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostAssetRequestUploadResponse> =
        z
            .object({
                httpMeta: components.HTTPMetadata$.outboundSchema,
                object: z.lazy(() => PostAssetRequestUploadResponseBody$.outboundSchema).optional(),
                error: errors.ErrorT$.outboundSchema.optional(),
            })
            .transform((v) => {
                return {
                    HttpMeta: v.httpMeta,
                    ...(v.object === undefined ? null : { object: v.object }),
                    ...(v.error === undefined ? null : { error: v.error }),
                };
            });
}
