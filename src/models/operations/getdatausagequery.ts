/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as errors from "../../models/errors";
import { z } from "zod";

/**
 * The time step to aggregate viewership metrics by
 *
 * @remarks
 *
 */
export enum GetDataUsageQueryQueryParamTimeStep {
    Hour = "hour",
    Day = "day",
}

export type GetDataUsageQueryRequest = {
    /**
     * Start millis timestamp for the query range (inclusive)
     *
     * @remarks
     *
     */
    from?: number | undefined;
    /**
     * End millis timestamp for the query range (exclusive)
     *
     * @remarks
     *
     */
    to?: number | undefined;
    /**
     * The time step to aggregate viewership metrics by
     *
     * @remarks
     *
     */
    timeStep?: GetDataUsageQueryQueryParamTimeStep | undefined;
    /**
     * The creator ID to filter the query results
     *
     * @remarks
     *
     */
    creatorId?: string | undefined;
};

export type GetDataUsageQueryResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * A Usage Metric object
     */
    usageMetric?: components.UsageMetric | undefined;
    /**
     * Error
     */
    error?: errors.ErrorT | undefined;
};

/** @internal */
export const GetDataUsageQueryQueryParamTimeStep$ = z.nativeEnum(
    GetDataUsageQueryQueryParamTimeStep
);

/** @internal */
export namespace GetDataUsageQueryRequest$ {
    export type Inbound = {
        from?: number | undefined;
        to?: number | undefined;
        timeStep?: GetDataUsageQueryQueryParamTimeStep | undefined;
        creatorId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetDataUsageQueryRequest, z.ZodTypeDef, Inbound> = z
        .object({
            from: z.number().int().optional(),
            to: z.number().int().optional(),
            timeStep: GetDataUsageQueryQueryParamTimeStep$.optional(),
            creatorId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.from === undefined ? null : { from: v.from }),
                ...(v.to === undefined ? null : { to: v.to }),
                ...(v.timeStep === undefined ? null : { timeStep: v.timeStep }),
                ...(v.creatorId === undefined ? null : { creatorId: v.creatorId }),
            };
        });

    export type Outbound = {
        from?: number | undefined;
        to?: number | undefined;
        timeStep?: GetDataUsageQueryQueryParamTimeStep | undefined;
        creatorId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDataUsageQueryRequest> = z
        .object({
            from: z.number().int().optional(),
            to: z.number().int().optional(),
            timeStep: GetDataUsageQueryQueryParamTimeStep$.optional(),
            creatorId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.from === undefined ? null : { from: v.from }),
                ...(v.to === undefined ? null : { to: v.to }),
                ...(v.timeStep === undefined ? null : { timeStep: v.timeStep }),
                ...(v.creatorId === undefined ? null : { creatorId: v.creatorId }),
            };
        });
}

/** @internal */
export namespace GetDataUsageQueryResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        "usage-metric"?: components.UsageMetric$.Inbound | undefined;
        error?: errors.ErrorT$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetDataUsageQueryResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            "usage-metric": components.UsageMetric$.inboundSchema.optional(),
            error: errors.ErrorT$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v["usage-metric"] === undefined ? null : { usageMetric: v["usage-metric"] }),
                ...(v.error === undefined ? null : { error: v.error }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        "usage-metric"?: components.UsageMetric$.Outbound | undefined;
        error?: errors.ErrorT$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetDataUsageQueryResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            usageMetric: components.UsageMetric$.outboundSchema.optional(),
            error: errors.ErrorT$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.usageMetric === undefined ? null : { "usage-metric": v.usageMetric }),
                ...(v.error === undefined ? null : { error: v.error }),
            };
        });
}
