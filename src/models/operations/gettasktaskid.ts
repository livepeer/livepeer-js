/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import { z } from "zod";

export type GetTaskTaskIdRequest = {
    /**
     * ID of the task
     */
    taskId: string;
};

export type GetTaskTaskIdResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Success
     */
    task?: components.Task | undefined;
};

/** @internal */
export namespace GetTaskTaskIdRequest$ {
    export type Inbound = {
        taskId: string;
    };

    export const inboundSchema: z.ZodType<GetTaskTaskIdRequest, z.ZodTypeDef, Inbound> = z
        .object({
            taskId: z.string(),
        })
        .transform((v) => {
            return {
                taskId: v.taskId,
            };
        });

    export type Outbound = {
        taskId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTaskTaskIdRequest> = z
        .object({
            taskId: z.string(),
        })
        .transform((v) => {
            return {
                taskId: v.taskId,
            };
        });
}

/** @internal */
export namespace GetTaskTaskIdResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        task?: components.Task$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetTaskTaskIdResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            task: components.Task$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.task === undefined ? null : { task: v.task }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        task?: components.Task$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTaskTaskIdResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            task: components.Task$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.task === undefined ? null : { task: v.task }),
            };
        });
}
