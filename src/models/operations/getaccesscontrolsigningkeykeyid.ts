/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as errors from "../../models/errors";
import { z } from "zod";

export type GetAccessControlSigningKeyKeyIdRequest = {
    /**
     * ID of the signing key
     */
    keyId: string;
};

export type GetAccessControlSigningKeyKeyIdResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Success
     */
    signingKey?: components.SigningKey | undefined;
    /**
     * Error
     */
    error?: errors.ErrorT | undefined;
};

/** @internal */
export namespace GetAccessControlSigningKeyKeyIdRequest$ {
    export type Inbound = {
        keyId: string;
    };

    export const inboundSchema: z.ZodType<
        GetAccessControlSigningKeyKeyIdRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            keyId: z.string(),
        })
        .transform((v) => {
            return {
                keyId: v.keyId,
            };
        });

    export type Outbound = {
        keyId: string;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetAccessControlSigningKeyKeyIdRequest
    > = z
        .object({
            keyId: z.string(),
        })
        .transform((v) => {
            return {
                keyId: v.keyId,
            };
        });
}

/** @internal */
export namespace GetAccessControlSigningKeyKeyIdResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        "signing-key"?: components.SigningKey$.Inbound | undefined;
        error?: errors.ErrorT$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetAccessControlSigningKeyKeyIdResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            "signing-key": components.SigningKey$.inboundSchema.optional(),
            error: errors.ErrorT$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v["signing-key"] === undefined ? null : { signingKey: v["signing-key"] }),
                ...(v.error === undefined ? null : { error: v.error }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        "signing-key"?: components.SigningKey$.Outbound | undefined;
        error?: errors.ErrorT$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetAccessControlSigningKeyKeyIdResponse
    > = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            signingKey: components.SigningKey$.outboundSchema.optional(),
            error: errors.ErrorT$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.signingKey === undefined ? null : { "signing-key": v.signingKey }),
                ...(v.error === undefined ? null : { error: v.error }),
            };
        });
}
