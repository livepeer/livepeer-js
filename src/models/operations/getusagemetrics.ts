/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../internal/utils";
import * as components from "../../models/components";
import { AxiosResponse } from "axios";

/**
 * The time step to aggregate viewership metrics by
 *
 * @remarks
 *
 */
export enum GetUsageMetricsQueryParamTimeStep {
    Hour = "hour",
    Day = "day",
}

export class GetUsageMetricsRequest extends SpeakeasyBase {
    /**
     * Start millis timestamp for the query range (inclusive)
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=from" })
    from?: number;

    /**
     * End millis timestamp for the query range (exclusive)
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=to" })
    to?: number;

    /**
     * The time step to aggregate viewership metrics by
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=timeStep" })
    timeStep?: GetUsageMetricsQueryParamTimeStep;

    /**
     * The creator ID to filter the query results
     *
     * @remarks
     *
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=creatorId" })
    creatorId?: string;
}

export class GetUsageMetricsResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;

    /**
     * A Usage Metric object
     */
    @SpeakeasyMetadata()
    usageMetric?: components.UsageMetric;
}
