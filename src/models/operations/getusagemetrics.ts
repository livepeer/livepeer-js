/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as errors from "../errors";
import * as z from "zod";

/**
 * The time step to aggregate viewership metrics by
 *
 * @remarks
 *
 */
export enum GetUsageMetricsQueryParamTimeStep {
    Hour = "hour",
    Day = "day",
}

export enum GetUsageMetricsQueryParamBreakdownBy {
    CreatorId = "creatorId",
}

export type GetUsageMetricsRequest = {
    /**
     * Start millis timestamp for the query range (inclusive)
     *
     * @remarks
     *
     */
    from?: number | undefined;
    /**
     * End millis timestamp for the query range (exclusive)
     *
     * @remarks
     *
     */
    to?: number | undefined;
    /**
     * The time step to aggregate viewership metrics by
     *
     * @remarks
     *
     */
    timeStep?: GetUsageMetricsQueryParamTimeStep | undefined;
    /**
     * The creator ID to filter the query results
     *
     * @remarks
     *
     */
    creatorId?: string | undefined;
    /**
     * The list of fields to break down the query results. Currently the
     *
     * @remarks
     * only supported breakdown is by `creatorId`.
     *
     */
    breakdownBy?: Array<GetUsageMetricsQueryParamBreakdownBy> | undefined;
};

export type GetUsageMetricsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * A Usage Metric object
     */
    usageMetric?: components.UsageMetric | undefined;
    /**
     * Error
     */
    error?: errors.ErrorT | undefined;
};

/** @internal */
export namespace GetUsageMetricsQueryParamTimeStep$ {
    export const inboundSchema = z.nativeEnum(GetUsageMetricsQueryParamTimeStep);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetUsageMetricsQueryParamBreakdownBy$ {
    export const inboundSchema = z.nativeEnum(GetUsageMetricsQueryParamBreakdownBy);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace GetUsageMetricsRequest$ {
    export const inboundSchema: z.ZodType<GetUsageMetricsRequest, z.ZodTypeDef, unknown> = z
        .object({
            from: z.number().int().optional(),
            to: z.number().int().optional(),
            timeStep: GetUsageMetricsQueryParamTimeStep$.inboundSchema.optional(),
            creatorId: z.string().optional(),
            "breakdownBy[]": z
                .array(GetUsageMetricsQueryParamBreakdownBy$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.from === undefined ? null : { from: v.from }),
                ...(v.to === undefined ? null : { to: v.to }),
                ...(v.timeStep === undefined ? null : { timeStep: v.timeStep }),
                ...(v.creatorId === undefined ? null : { creatorId: v.creatorId }),
                ...(v["breakdownBy[]"] === undefined ? null : { breakdownBy: v["breakdownBy[]"] }),
            };
        });

    export type Outbound = {
        from?: number | undefined;
        to?: number | undefined;
        timeStep?: string | undefined;
        creatorId?: string | undefined;
        "breakdownBy[]"?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetUsageMetricsRequest> = z
        .object({
            from: z.number().int().optional(),
            to: z.number().int().optional(),
            timeStep: GetUsageMetricsQueryParamTimeStep$.outboundSchema.optional(),
            creatorId: z.string().optional(),
            breakdownBy: z.array(GetUsageMetricsQueryParamBreakdownBy$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.from === undefined ? null : { from: v.from }),
                ...(v.to === undefined ? null : { to: v.to }),
                ...(v.timeStep === undefined ? null : { timeStep: v.timeStep }),
                ...(v.creatorId === undefined ? null : { creatorId: v.creatorId }),
                ...(v.breakdownBy === undefined ? null : { "breakdownBy[]": v.breakdownBy }),
            };
        });
}

/** @internal */
export namespace GetUsageMetricsResponse$ {
    export const inboundSchema: z.ZodType<GetUsageMetricsResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            "usage-metric": components.UsageMetric$.inboundSchema.optional(),
            error: errors.ErrorT$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v["usage-metric"] === undefined ? null : { usageMetric: v["usage-metric"] }),
                ...(v.error === undefined ? null : { error: v.error }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        "usage-metric"?: components.UsageMetric$.Outbound | undefined;
        error?: errors.ErrorT$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetUsageMetricsResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            usageMetric: components.UsageMetric$.outboundSchema.optional(),
            error: errors.ErrorT$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.usageMetric === undefined ? null : { "usage-metric": v.usageMetric }),
                ...(v.error === undefined ? null : { error: v.error }),
            };
        });
}
