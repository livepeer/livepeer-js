/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import { z } from "zod";

export type GetPlaybackIdRequest = {
    /**
     * The ID of the playback
     */
    id: string;
};

export type GetPlaybackIdResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Successful response
     */
    playbackInfo?: components.PlaybackInfo | undefined;
};

/** @internal */
export namespace GetPlaybackIdRequest$ {
    export type Inbound = {
        id: string;
    };

    export const inboundSchema: z.ZodType<GetPlaybackIdRequest, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
            };
        });

    export type Outbound = {
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetPlaybackIdRequest> = z
        .object({
            id: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
            };
        });
}

/** @internal */
export namespace GetPlaybackIdResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        "playback-info"?: components.PlaybackInfo$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetPlaybackIdResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            "playback-info": components.PlaybackInfo$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v["playback-info"] === undefined ? null : { playbackInfo: v["playback-info"] }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        "playback-info"?: components.PlaybackInfo$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetPlaybackIdResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            playbackInfo: components.PlaybackInfo$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.playbackInfo === undefined ? null : { "playback-info": v.playbackInfo }),
            };
        });
}
