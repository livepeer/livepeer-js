/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as errors from "../errors";
import * as z from "zod";

export type GetRecordedSessionsRequest = {
    /**
     * ID of the parent stream
     */
    parentId: string;
    /**
     * Flag indicating if the response should only include recorded
     *
     * @remarks
     * sessions
     *
     */
    record?: number | undefined;
};

export type GetRecordedSessionsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Success
     */
    data?: Array<components.Session> | undefined;
    /**
     * Error
     */
    error?: errors.ErrorT | undefined;
};

/** @internal */
export namespace GetRecordedSessionsRequest$ {
    export type Inbound = {
        parentId: string;
        record?: number | undefined;
    };

    export const inboundSchema: z.ZodType<GetRecordedSessionsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            parentId: z.string(),
            record: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                parentId: v.parentId,
                ...(v.record === undefined ? null : { record: v.record }),
            };
        });

    export type Outbound = {
        parentId: string;
        record?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetRecordedSessionsRequest> = z
        .object({
            parentId: z.string(),
            record: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                parentId: v.parentId,
                ...(v.record === undefined ? null : { record: v.record }),
            };
        });
}

/** @internal */
export namespace GetRecordedSessionsResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        data?: Array<components.Session$.Inbound> | undefined;
        error?: errors.ErrorT$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetRecordedSessionsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            data: z.array(components.Session$.inboundSchema).optional(),
            error: errors.ErrorT$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.data === undefined ? null : { data: v.data }),
                ...(v.error === undefined ? null : { error: v.error }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        data?: Array<components.Session$.Outbound> | undefined;
        error?: errors.ErrorT$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetRecordedSessionsResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            data: z.array(components.Session$.outboundSchema).optional(),
            error: errors.ErrorT$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.data === undefined ? null : { data: v.data }),
                ...(v.error === undefined ? null : { error: v.error }),
            };
        });
}
