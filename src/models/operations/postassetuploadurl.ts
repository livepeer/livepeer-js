/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as errors from "../../models/errors";
import { z } from "zod";

export type PostAssetUploadUrlTask = {
    id?: string | undefined;
};

/**
 * Success
 */
export type PostAssetUploadUrlResponseBody = {
    asset: components.Asset;
    task: PostAssetUploadUrlTask;
};

export type PostAssetUploadUrlResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Success
     */
    object?: PostAssetUploadUrlResponseBody | undefined;
    /**
     * Error
     */
    error?: errors.ErrorT | undefined;
};

/** @internal */
export namespace PostAssetUploadUrlTask$ {
    export type Inbound = {
        id?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PostAssetUploadUrlTask, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostAssetUploadUrlTask> = z
        .object({
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });
}

/** @internal */
export namespace PostAssetUploadUrlResponseBody$ {
    export type Inbound = {
        asset: components.Asset$.Inbound;
        task: PostAssetUploadUrlTask$.Inbound;
    };

    export const inboundSchema: z.ZodType<PostAssetUploadUrlResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            asset: components.Asset$.inboundSchema,
            task: z.lazy(() => PostAssetUploadUrlTask$.inboundSchema),
        })
        .transform((v) => {
            return {
                asset: v.asset,
                task: v.task,
            };
        });

    export type Outbound = {
        asset: components.Asset$.Outbound;
        task: PostAssetUploadUrlTask$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostAssetUploadUrlResponseBody> =
        z
            .object({
                asset: components.Asset$.outboundSchema,
                task: z.lazy(() => PostAssetUploadUrlTask$.outboundSchema),
            })
            .transform((v) => {
                return {
                    asset: v.asset,
                    task: v.task,
                };
            });
}

/** @internal */
export namespace PostAssetUploadUrlResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        object?: PostAssetUploadUrlResponseBody$.Inbound | undefined;
        error?: errors.ErrorT$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PostAssetUploadUrlResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => PostAssetUploadUrlResponseBody$.inboundSchema).optional(),
            error: errors.ErrorT$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
                ...(v.error === undefined ? null : { error: v.error }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: PostAssetUploadUrlResponseBody$.Outbound | undefined;
        error?: errors.ErrorT$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostAssetUploadUrlResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => PostAssetUploadUrlResponseBody$.outboundSchema).optional(),
            error: errors.ErrorT$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
                ...(v.error === undefined ? null : { error: v.error }),
            };
        });
}
