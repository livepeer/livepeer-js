/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as errors from "../errors";
import * as z from "zod";

export type CreateRoomUserRequest = {
    id: string;
    roomUserPayload: components.RoomUserPayload;
};

export type CreateRoomUserResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Success
     */
    roomUserResponse?: components.RoomUserResponse | undefined;
    /**
     * Error
     */
    error?: errors.ErrorT | undefined;
};

/** @internal */
export namespace CreateRoomUserRequest$ {
    export type Inbound = {
        id: string;
        "room-user-payload": components.RoomUserPayload$.Inbound;
    };

    export const inboundSchema: z.ZodType<CreateRoomUserRequest, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
            "room-user-payload": components.RoomUserPayload$.inboundSchema,
        })
        .transform((v) => {
            return {
                id: v.id,
                roomUserPayload: v["room-user-payload"],
            };
        });

    export type Outbound = {
        id: string;
        "room-user-payload": components.RoomUserPayload$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateRoomUserRequest> = z
        .object({
            id: z.string(),
            roomUserPayload: components.RoomUserPayload$.outboundSchema,
        })
        .transform((v) => {
            return {
                id: v.id,
                "room-user-payload": v.roomUserPayload,
            };
        });
}

/** @internal */
export namespace CreateRoomUserResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        "room-user-response"?: components.RoomUserResponse$.Inbound | undefined;
        error?: errors.ErrorT$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<CreateRoomUserResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            "room-user-response": components.RoomUserResponse$.inboundSchema.optional(),
            error: errors.ErrorT$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v["room-user-response"] === undefined
                    ? null
                    : { roomUserResponse: v["room-user-response"] }),
                ...(v.error === undefined ? null : { error: v.error }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        "room-user-response"?: components.RoomUserResponse$.Outbound | undefined;
        error?: errors.ErrorT$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateRoomUserResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            roomUserResponse: components.RoomUserResponse$.outboundSchema.optional(),
            error: errors.ErrorT$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.roomUserResponse === undefined
                    ? null
                    : { "room-user-response": v.roomUserResponse }),
                ...(v.error === undefined ? null : { error: v.error }),
            };
        });
}
