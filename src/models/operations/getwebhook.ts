/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as errors from "../errors/index.js";
import * as z from "zod";

export type GetWebhookRequest = {
    id: string;
};

export type GetWebhookResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Success
     */
    webhook?: components.Webhook | undefined;
    /**
     * Error
     */
    error?: errors.ErrorT | undefined;
};

/** @internal */
export const GetWebhookRequest$inboundSchema: z.ZodType<GetWebhookRequest, z.ZodTypeDef, unknown> =
    z.object({
        id: z.string(),
    });

/** @internal */
export type GetWebhookRequest$Outbound = {
    id: string;
};

/** @internal */
export const GetWebhookRequest$outboundSchema: z.ZodType<
    GetWebhookRequest$Outbound,
    z.ZodTypeDef,
    GetWebhookRequest
> = z.object({
    id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookRequest$ {
    /** @deprecated use `GetWebhookRequest$inboundSchema` instead. */
    export const inboundSchema = GetWebhookRequest$inboundSchema;
    /** @deprecated use `GetWebhookRequest$outboundSchema` instead. */
    export const outboundSchema = GetWebhookRequest$outboundSchema;
    /** @deprecated use `GetWebhookRequest$Outbound` instead. */
    export type Outbound = GetWebhookRequest$Outbound;
}

/** @internal */
export const GetWebhookResponse$inboundSchema: z.ZodType<
    GetWebhookResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        ContentType: z.string(),
        StatusCode: z.number().int(),
        RawResponse: z.instanceof(Response),
        webhook: components.Webhook$inboundSchema.optional(),
        error: errors.ErrorT$inboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            ContentType: "contentType",
            StatusCode: "statusCode",
            RawResponse: "rawResponse",
        });
    });

/** @internal */
export type GetWebhookResponse$Outbound = {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    webhook?: components.Webhook$Outbound | undefined;
    error?: errors.ErrorT$Outbound | undefined;
};

/** @internal */
export const GetWebhookResponse$outboundSchema: z.ZodType<
    GetWebhookResponse$Outbound,
    z.ZodTypeDef,
    GetWebhookResponse
> = z
    .object({
        contentType: z.string(),
        statusCode: z.number().int(),
        rawResponse: z.instanceof(Response).transform(() => {
            throw new Error("Response cannot be serialized");
        }),
        webhook: components.Webhook$outboundSchema.optional(),
        error: errors.ErrorT$outboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            contentType: "ContentType",
            statusCode: "StatusCode",
            rawResponse: "RawResponse",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWebhookResponse$ {
    /** @deprecated use `GetWebhookResponse$inboundSchema` instead. */
    export const inboundSchema = GetWebhookResponse$inboundSchema;
    /** @deprecated use `GetWebhookResponse$outboundSchema` instead. */
    export const outboundSchema = GetWebhookResponse$outboundSchema;
    /** @deprecated use `GetWebhookResponse$Outbound` instead. */
    export type Outbound = GetWebhookResponse$Outbound;
}
