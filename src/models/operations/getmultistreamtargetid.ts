/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as errors from "../../models/errors";
import { z } from "zod";

export type GetMultistreamTargetIdRequest = {
    /**
     * ID of the multistream target
     */
    id: string;
};

export type GetMultistreamTargetIdResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Success
     */
    multistreamTarget?: components.MultistreamTarget | undefined;
    /**
     * Error
     */
    error?: errors.ErrorT | undefined;
};

/** @internal */
export namespace GetMultistreamTargetIdRequest$ {
    export type Inbound = {
        id: string;
    };

    export const inboundSchema: z.ZodType<GetMultistreamTargetIdRequest, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
            };
        });

    export type Outbound = {
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetMultistreamTargetIdRequest> =
        z
            .object({
                id: z.string(),
            })
            .transform((v) => {
                return {
                    id: v.id,
                };
            });
}

/** @internal */
export namespace GetMultistreamTargetIdResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        "multistream-target"?: components.MultistreamTarget$.Inbound | undefined;
        error?: errors.ErrorT$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetMultistreamTargetIdResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            "multistream-target": components.MultistreamTarget$.inboundSchema.optional(),
            error: errors.ErrorT$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v["multistream-target"] === undefined
                    ? null
                    : { multistreamTarget: v["multistream-target"] }),
                ...(v.error === undefined ? null : { error: v.error }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        "multistream-target"?: components.MultistreamTarget$.Outbound | undefined;
        error?: errors.ErrorT$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetMultistreamTargetIdResponse> =
        z
            .object({
                httpMeta: components.HTTPMetadata$.outboundSchema,
                multistreamTarget: components.MultistreamTarget$.outboundSchema.optional(),
                error: errors.ErrorT$.outboundSchema.optional(),
            })
            .transform((v) => {
                return {
                    HttpMeta: v.httpMeta,
                    ...(v.multistreamTarget === undefined
                        ? null
                        : { "multistream-target": v.multistreamTarget }),
                    ...(v.error === undefined ? null : { error: v.error }),
                };
            });
}
