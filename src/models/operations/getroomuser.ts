/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetRoomUserRequest = {
  id: string;
  userId: string;
};

export type GetRoomUserResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Success
   */
  getRoomUserResponse?: components.GetRoomUserResponse | undefined;
  /**
   * Error
   */
  error?: components.ErrorT | undefined;
};

/** @internal */
export const GetRoomUserRequest$inboundSchema: z.ZodType<
  GetRoomUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  userId: z.string(),
});

/** @internal */
export type GetRoomUserRequest$Outbound = {
  id: string;
  userId: string;
};

/** @internal */
export const GetRoomUserRequest$outboundSchema: z.ZodType<
  GetRoomUserRequest$Outbound,
  z.ZodTypeDef,
  GetRoomUserRequest
> = z.object({
  id: z.string(),
  userId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRoomUserRequest$ {
  /** @deprecated use `GetRoomUserRequest$inboundSchema` instead. */
  export const inboundSchema = GetRoomUserRequest$inboundSchema;
  /** @deprecated use `GetRoomUserRequest$outboundSchema` instead. */
  export const outboundSchema = GetRoomUserRequest$outboundSchema;
  /** @deprecated use `GetRoomUserRequest$Outbound` instead. */
  export type Outbound = GetRoomUserRequest$Outbound;
}

export function getRoomUserRequestToJSON(
  getRoomUserRequest: GetRoomUserRequest,
): string {
  return JSON.stringify(
    GetRoomUserRequest$outboundSchema.parse(getRoomUserRequest),
  );
}

export function getRoomUserRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetRoomUserRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRoomUserRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRoomUserRequest' from JSON`,
  );
}

/** @internal */
export const GetRoomUserResponse$inboundSchema: z.ZodType<
  GetRoomUserResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  "get-room-user-response": components.GetRoomUserResponse$inboundSchema
    .optional(),
  error: components.ErrorT$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "get-room-user-response": "getRoomUserResponse",
  });
});

/** @internal */
export type GetRoomUserResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  "get-room-user-response"?:
    | components.GetRoomUserResponse$Outbound
    | undefined;
  error?: components.ErrorT$Outbound | undefined;
};

/** @internal */
export const GetRoomUserResponse$outboundSchema: z.ZodType<
  GetRoomUserResponse$Outbound,
  z.ZodTypeDef,
  GetRoomUserResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  getRoomUserResponse: components.GetRoomUserResponse$outboundSchema.optional(),
  error: components.ErrorT$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    getRoomUserResponse: "get-room-user-response",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRoomUserResponse$ {
  /** @deprecated use `GetRoomUserResponse$inboundSchema` instead. */
  export const inboundSchema = GetRoomUserResponse$inboundSchema;
  /** @deprecated use `GetRoomUserResponse$outboundSchema` instead. */
  export const outboundSchema = GetRoomUserResponse$outboundSchema;
  /** @deprecated use `GetRoomUserResponse$Outbound` instead. */
  export type Outbound = GetRoomUserResponse$Outbound;
}

export function getRoomUserResponseToJSON(
  getRoomUserResponse: GetRoomUserResponse,
): string {
  return JSON.stringify(
    GetRoomUserResponse$outboundSchema.parse(getRoomUserResponse),
  );
}

export function getRoomUserResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetRoomUserResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRoomUserResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRoomUserResponse' from JSON`,
  );
}
