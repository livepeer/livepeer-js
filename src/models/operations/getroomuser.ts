/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as components from "../components";
import * as errors from "../errors";
import * as z from "zod";

export type GetRoomUserRequest = {
    id: string;
    userId: string;
};

export type GetRoomUserResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Success
     */
    getRoomUserResponse?: components.GetRoomUserResponse | undefined;
    /**
     * Error
     */
    error?: errors.ErrorT | undefined;
};

/** @internal */
export namespace GetRoomUserRequest$ {
    export const inboundSchema: z.ZodType<GetRoomUserRequest, z.ZodTypeDef, unknown> = z.object({
        id: z.string(),
        userId: z.string(),
    });

    export type Outbound = {
        id: string;
        userId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetRoomUserRequest> = z.object({
        id: z.string(),
        userId: z.string(),
    });
}

/** @internal */
export namespace GetRoomUserResponse$ {
    export const inboundSchema: z.ZodType<GetRoomUserResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            "get-room-user-response": components.GetRoomUserResponse$.inboundSchema.optional(),
            error: errors.ErrorT$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
                "get-room-user-response": "getRoomUserResponse",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        "get-room-user-response"?: components.GetRoomUserResponse$.Outbound | undefined;
        error?: errors.ErrorT$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetRoomUserResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            getRoomUserResponse: components.GetRoomUserResponse$.outboundSchema.optional(),
            error: errors.ErrorT$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
                getRoomUserResponse: "get-room-user-response",
            });
        });
}
