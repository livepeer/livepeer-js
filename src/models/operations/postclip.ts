/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import { z } from "zod";

export type PostClipTask = {
    id?: string | undefined;
};

/**
 * Success
 */
export type PostClipResponseBody = {
    asset: components.Asset;
    task: PostClipTask;
};

export type PostClipResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Success
     */
    object?: PostClipResponseBody | undefined;
};

/** @internal */
export namespace PostClipTask$ {
    export type Inbound = {
        id?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PostClipTask, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostClipTask> = z
        .object({
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });
}

/** @internal */
export namespace PostClipResponseBody$ {
    export type Inbound = {
        asset: components.Asset$.Inbound;
        task: PostClipTask$.Inbound;
    };

    export const inboundSchema: z.ZodType<PostClipResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            asset: components.Asset$.inboundSchema,
            task: z.lazy(() => PostClipTask$.inboundSchema),
        })
        .transform((v) => {
            return {
                asset: v.asset,
                task: v.task,
            };
        });

    export type Outbound = {
        asset: components.Asset$.Outbound;
        task: PostClipTask$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostClipResponseBody> = z
        .object({
            asset: components.Asset$.outboundSchema,
            task: z.lazy(() => PostClipTask$.outboundSchema),
        })
        .transform((v) => {
            return {
                asset: v.asset,
                task: v.task,
            };
        });
}

/** @internal */
export namespace PostClipResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        object?: PostClipResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PostClipResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            object: z.lazy(() => PostClipResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        object?: PostClipResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostClipResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            object: z.lazy(() => PostClipResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
