/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import * as errors from "../../models/errors";
import { z } from "zod";

export type PatchMultistreamTargetIdRequest = {
    /**
     * ID of the multistream target
     */
    id: string;
    multistreamTargetPatchPayload: components.MultistreamTargetPatchPayload;
};

export type PatchMultistreamTargetIdResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Error
     */
    error?: errors.ErrorT | undefined;
};

/** @internal */
export namespace PatchMultistreamTargetIdRequest$ {
    export type Inbound = {
        id: string;
        "multistream-target-patch-payload": components.MultistreamTargetPatchPayload$.Inbound;
    };

    export const inboundSchema: z.ZodType<PatchMultistreamTargetIdRequest, z.ZodTypeDef, Inbound> =
        z
            .object({
                id: z.string(),
                "multistream-target-patch-payload":
                    components.MultistreamTargetPatchPayload$.inboundSchema,
            })
            .transform((v) => {
                return {
                    id: v.id,
                    multistreamTargetPatchPayload: v["multistream-target-patch-payload"],
                };
            });

    export type Outbound = {
        id: string;
        "multistream-target-patch-payload": components.MultistreamTargetPatchPayload$.Outbound;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchMultistreamTargetIdRequest
    > = z
        .object({
            id: z.string(),
            multistreamTargetPatchPayload: components.MultistreamTargetPatchPayload$.outboundSchema,
        })
        .transform((v) => {
            return {
                id: v.id,
                "multistream-target-patch-payload": v.multistreamTargetPatchPayload,
            };
        });
}

/** @internal */
export namespace PatchMultistreamTargetIdResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        error?: errors.ErrorT$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PatchMultistreamTargetIdResponse, z.ZodTypeDef, Inbound> =
        z
            .object({
                HttpMeta: components.HTTPMetadata$.inboundSchema,
                error: errors.ErrorT$.inboundSchema.optional(),
            })
            .transform((v) => {
                return {
                    httpMeta: v.HttpMeta,
                    ...(v.error === undefined ? null : { error: v.error }),
                };
            });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        error?: errors.ErrorT$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchMultistreamTargetIdResponse
    > = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            error: errors.ErrorT$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.error === undefined ? null : { error: v.error }),
            };
        });
}
