/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateRoomUserRequest = {
  id: string;
  userId: string;
  roomUserUpdatePayload: components.RoomUserUpdatePayload;
};

export type UpdateRoomUserResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Error
   */
  error?: components.ErrorT | undefined;
};

/** @internal */
export const UpdateRoomUserRequest$inboundSchema: z.ZodType<
  UpdateRoomUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  userId: z.string(),
  "room-user-update-payload": components.RoomUserUpdatePayload$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "room-user-update-payload": "roomUserUpdatePayload",
  });
});

/** @internal */
export type UpdateRoomUserRequest$Outbound = {
  id: string;
  userId: string;
  "room-user-update-payload": components.RoomUserUpdatePayload$Outbound;
};

/** @internal */
export const UpdateRoomUserRequest$outboundSchema: z.ZodType<
  UpdateRoomUserRequest$Outbound,
  z.ZodTypeDef,
  UpdateRoomUserRequest
> = z.object({
  id: z.string(),
  userId: z.string(),
  roomUserUpdatePayload: components.RoomUserUpdatePayload$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    roomUserUpdatePayload: "room-user-update-payload",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRoomUserRequest$ {
  /** @deprecated use `UpdateRoomUserRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateRoomUserRequest$inboundSchema;
  /** @deprecated use `UpdateRoomUserRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateRoomUserRequest$outboundSchema;
  /** @deprecated use `UpdateRoomUserRequest$Outbound` instead. */
  export type Outbound = UpdateRoomUserRequest$Outbound;
}

export function updateRoomUserRequestToJSON(
  updateRoomUserRequest: UpdateRoomUserRequest,
): string {
  return JSON.stringify(
    UpdateRoomUserRequest$outboundSchema.parse(updateRoomUserRequest),
  );
}

export function updateRoomUserRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateRoomUserRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateRoomUserRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateRoomUserRequest' from JSON`,
  );
}

/** @internal */
export const UpdateRoomUserResponse$inboundSchema: z.ZodType<
  UpdateRoomUserResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  error: components.ErrorT$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type UpdateRoomUserResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  error?: components.ErrorT$Outbound | undefined;
};

/** @internal */
export const UpdateRoomUserResponse$outboundSchema: z.ZodType<
  UpdateRoomUserResponse$Outbound,
  z.ZodTypeDef,
  UpdateRoomUserResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  error: components.ErrorT$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateRoomUserResponse$ {
  /** @deprecated use `UpdateRoomUserResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateRoomUserResponse$inboundSchema;
  /** @deprecated use `UpdateRoomUserResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateRoomUserResponse$outboundSchema;
  /** @deprecated use `UpdateRoomUserResponse$Outbound` instead. */
  export type Outbound = UpdateRoomUserResponse$Outbound;
}

export function updateRoomUserResponseToJSON(
  updateRoomUserResponse: UpdateRoomUserResponse,
): string {
  return JSON.stringify(
    UpdateRoomUserResponse$outboundSchema.parse(updateRoomUserResponse),
  );
}

export function updateRoomUserResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateRoomUserResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateRoomUserResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateRoomUserResponse' from JSON`,
  );
}
