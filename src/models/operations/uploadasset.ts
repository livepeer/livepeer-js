/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import * as components from "../components";
import * as errors from "../errors";
import * as z from "zod";

export type UploadAssetAssetTask = {
    id: string;
};

/**
 * Upload started
 */
export type UploadAssetDataOutput = {
    asset: components.Asset;
    task: UploadAssetAssetTask;
};

export type UploadAssetTask = {
    id: string;
};

/**
 * Upload in progress
 */
export type UploadAssetData = {
    asset: components.Asset;
    task: UploadAssetTask;
};

export type UploadAssetResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Upload in progress
     */
    twoHundredApplicationJsonData?: UploadAssetData | undefined;
    /**
     * Upload started
     */
    twoHundredAndOneApplicationJsonData?: UploadAssetDataOutput | undefined;
    /**
     * Error
     */
    error?: errors.ErrorT | undefined;
};

/** @internal */
export namespace UploadAssetAssetTask$ {
    export const inboundSchema: z.ZodType<UploadAssetAssetTask, z.ZodTypeDef, unknown> = z.object({
        id: z.string(),
    });

    export type Outbound = {
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadAssetAssetTask> = z.object(
        {
            id: z.string(),
        }
    );
}

/** @internal */
export namespace UploadAssetDataOutput$ {
    export const inboundSchema: z.ZodType<UploadAssetDataOutput, z.ZodTypeDef, unknown> = z.object({
        asset: components.Asset$.inboundSchema,
        task: z.lazy(() => UploadAssetAssetTask$.inboundSchema),
    });

    export type Outbound = {
        asset: components.Asset$.Outbound;
        task: UploadAssetAssetTask$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadAssetDataOutput> =
        z.object({
            asset: components.Asset$.outboundSchema,
            task: z.lazy(() => UploadAssetAssetTask$.outboundSchema),
        });
}

/** @internal */
export namespace UploadAssetTask$ {
    export const inboundSchema: z.ZodType<UploadAssetTask, z.ZodTypeDef, unknown> = z.object({
        id: z.string(),
    });

    export type Outbound = {
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadAssetTask> = z.object({
        id: z.string(),
    });
}

/** @internal */
export namespace UploadAssetData$ {
    export const inboundSchema: z.ZodType<UploadAssetData, z.ZodTypeDef, unknown> = z.object({
        asset: components.Asset$.inboundSchema,
        task: z.lazy(() => UploadAssetTask$.inboundSchema),
    });

    export type Outbound = {
        asset: components.Asset$.Outbound;
        task: UploadAssetTask$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadAssetData> = z.object({
        asset: components.Asset$.outboundSchema,
        task: z.lazy(() => UploadAssetTask$.outboundSchema),
    });
}

/** @internal */
export namespace UploadAssetResponse$ {
    export const inboundSchema: z.ZodType<UploadAssetResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            "200_application/json_data": z.lazy(() => UploadAssetData$.inboundSchema).optional(),
            "201_application/json_data": z
                .lazy(() => UploadAssetDataOutput$.inboundSchema)
                .optional(),
            error: errors.ErrorT$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
                "200_application/json_data": "twoHundredApplicationJsonData",
                "201_application/json_data": "twoHundredAndOneApplicationJsonData",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        "200_application/json_data"?: UploadAssetData$.Outbound | undefined;
        "201_application/json_data"?: UploadAssetDataOutput$.Outbound | undefined;
        error?: errors.ErrorT$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadAssetResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            twoHundredApplicationJsonData: z.lazy(() => UploadAssetData$.outboundSchema).optional(),
            twoHundredAndOneApplicationJsonData: z
                .lazy(() => UploadAssetDataOutput$.outboundSchema)
                .optional(),
            error: errors.ErrorT$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
                twoHundredApplicationJsonData: "200_application/json_data",
                twoHundredAndOneApplicationJsonData: "201_application/json_data",
            });
        });
}
