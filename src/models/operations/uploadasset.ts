/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UploadAssetAssetTask = {
  id: string;
};

/**
 * Upload started
 */
export type UploadAssetDataOutput = {
  asset: components.Asset;
  task: UploadAssetAssetTask;
};

export type UploadAssetTask = {
  id: string;
};

/**
 * Upload in progress
 */
export type UploadAssetData = {
  asset: components.Asset;
  task: UploadAssetTask;
};

export type UploadAssetResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Upload in progress
   */
  twoHundredApplicationJsonData?: UploadAssetData | undefined;
  /**
   * Upload started
   */
  twoHundredAndOneApplicationJsonData?: UploadAssetDataOutput | undefined;
  /**
   * Error
   */
  error?: components.ErrorT | undefined;
};

/** @internal */
export const UploadAssetAssetTask$inboundSchema: z.ZodType<
  UploadAssetAssetTask,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type UploadAssetAssetTask$Outbound = {
  id: string;
};

/** @internal */
export const UploadAssetAssetTask$outboundSchema: z.ZodType<
  UploadAssetAssetTask$Outbound,
  z.ZodTypeDef,
  UploadAssetAssetTask
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadAssetAssetTask$ {
  /** @deprecated use `UploadAssetAssetTask$inboundSchema` instead. */
  export const inboundSchema = UploadAssetAssetTask$inboundSchema;
  /** @deprecated use `UploadAssetAssetTask$outboundSchema` instead. */
  export const outboundSchema = UploadAssetAssetTask$outboundSchema;
  /** @deprecated use `UploadAssetAssetTask$Outbound` instead. */
  export type Outbound = UploadAssetAssetTask$Outbound;
}

export function uploadAssetAssetTaskToJSON(
  uploadAssetAssetTask: UploadAssetAssetTask,
): string {
  return JSON.stringify(
    UploadAssetAssetTask$outboundSchema.parse(uploadAssetAssetTask),
  );
}

export function uploadAssetAssetTaskFromJSON(
  jsonString: string,
): SafeParseResult<UploadAssetAssetTask, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadAssetAssetTask$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadAssetAssetTask' from JSON`,
  );
}

/** @internal */
export const UploadAssetDataOutput$inboundSchema: z.ZodType<
  UploadAssetDataOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  asset: components.Asset$inboundSchema,
  task: z.lazy(() => UploadAssetAssetTask$inboundSchema),
});

/** @internal */
export type UploadAssetDataOutput$Outbound = {
  asset: components.Asset$Outbound;
  task: UploadAssetAssetTask$Outbound;
};

/** @internal */
export const UploadAssetDataOutput$outboundSchema: z.ZodType<
  UploadAssetDataOutput$Outbound,
  z.ZodTypeDef,
  UploadAssetDataOutput
> = z.object({
  asset: components.Asset$outboundSchema,
  task: z.lazy(() => UploadAssetAssetTask$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadAssetDataOutput$ {
  /** @deprecated use `UploadAssetDataOutput$inboundSchema` instead. */
  export const inboundSchema = UploadAssetDataOutput$inboundSchema;
  /** @deprecated use `UploadAssetDataOutput$outboundSchema` instead. */
  export const outboundSchema = UploadAssetDataOutput$outboundSchema;
  /** @deprecated use `UploadAssetDataOutput$Outbound` instead. */
  export type Outbound = UploadAssetDataOutput$Outbound;
}

export function uploadAssetDataOutputToJSON(
  uploadAssetDataOutput: UploadAssetDataOutput,
): string {
  return JSON.stringify(
    UploadAssetDataOutput$outboundSchema.parse(uploadAssetDataOutput),
  );
}

export function uploadAssetDataOutputFromJSON(
  jsonString: string,
): SafeParseResult<UploadAssetDataOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadAssetDataOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadAssetDataOutput' from JSON`,
  );
}

/** @internal */
export const UploadAssetTask$inboundSchema: z.ZodType<
  UploadAssetTask,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type UploadAssetTask$Outbound = {
  id: string;
};

/** @internal */
export const UploadAssetTask$outboundSchema: z.ZodType<
  UploadAssetTask$Outbound,
  z.ZodTypeDef,
  UploadAssetTask
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadAssetTask$ {
  /** @deprecated use `UploadAssetTask$inboundSchema` instead. */
  export const inboundSchema = UploadAssetTask$inboundSchema;
  /** @deprecated use `UploadAssetTask$outboundSchema` instead. */
  export const outboundSchema = UploadAssetTask$outboundSchema;
  /** @deprecated use `UploadAssetTask$Outbound` instead. */
  export type Outbound = UploadAssetTask$Outbound;
}

export function uploadAssetTaskToJSON(
  uploadAssetTask: UploadAssetTask,
): string {
  return JSON.stringify(UploadAssetTask$outboundSchema.parse(uploadAssetTask));
}

export function uploadAssetTaskFromJSON(
  jsonString: string,
): SafeParseResult<UploadAssetTask, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadAssetTask$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadAssetTask' from JSON`,
  );
}

/** @internal */
export const UploadAssetData$inboundSchema: z.ZodType<
  UploadAssetData,
  z.ZodTypeDef,
  unknown
> = z.object({
  asset: components.Asset$inboundSchema,
  task: z.lazy(() => UploadAssetTask$inboundSchema),
});

/** @internal */
export type UploadAssetData$Outbound = {
  asset: components.Asset$Outbound;
  task: UploadAssetTask$Outbound;
};

/** @internal */
export const UploadAssetData$outboundSchema: z.ZodType<
  UploadAssetData$Outbound,
  z.ZodTypeDef,
  UploadAssetData
> = z.object({
  asset: components.Asset$outboundSchema,
  task: z.lazy(() => UploadAssetTask$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadAssetData$ {
  /** @deprecated use `UploadAssetData$inboundSchema` instead. */
  export const inboundSchema = UploadAssetData$inboundSchema;
  /** @deprecated use `UploadAssetData$outboundSchema` instead. */
  export const outboundSchema = UploadAssetData$outboundSchema;
  /** @deprecated use `UploadAssetData$Outbound` instead. */
  export type Outbound = UploadAssetData$Outbound;
}

export function uploadAssetDataToJSON(
  uploadAssetData: UploadAssetData,
): string {
  return JSON.stringify(UploadAssetData$outboundSchema.parse(uploadAssetData));
}

export function uploadAssetDataFromJSON(
  jsonString: string,
): SafeParseResult<UploadAssetData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadAssetData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadAssetData' from JSON`,
  );
}

/** @internal */
export const UploadAssetResponse$inboundSchema: z.ZodType<
  UploadAssetResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  "200_application/json_data": z.lazy(() => UploadAssetData$inboundSchema)
    .optional(),
  "201_application/json_data": z.lazy(() => UploadAssetDataOutput$inboundSchema)
    .optional(),
  error: components.ErrorT$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "200_application/json_data": "twoHundredApplicationJsonData",
    "201_application/json_data": "twoHundredAndOneApplicationJsonData",
  });
});

/** @internal */
export type UploadAssetResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  "200_application/json_data"?: UploadAssetData$Outbound | undefined;
  "201_application/json_data"?: UploadAssetDataOutput$Outbound | undefined;
  error?: components.ErrorT$Outbound | undefined;
};

/** @internal */
export const UploadAssetResponse$outboundSchema: z.ZodType<
  UploadAssetResponse$Outbound,
  z.ZodTypeDef,
  UploadAssetResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  twoHundredApplicationJsonData: z.lazy(() => UploadAssetData$outboundSchema)
    .optional(),
  twoHundredAndOneApplicationJsonData: z.lazy(() =>
    UploadAssetDataOutput$outboundSchema
  ).optional(),
  error: components.ErrorT$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    twoHundredApplicationJsonData: "200_application/json_data",
    twoHundredAndOneApplicationJsonData: "201_application/json_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadAssetResponse$ {
  /** @deprecated use `UploadAssetResponse$inboundSchema` instead. */
  export const inboundSchema = UploadAssetResponse$inboundSchema;
  /** @deprecated use `UploadAssetResponse$outboundSchema` instead. */
  export const outboundSchema = UploadAssetResponse$outboundSchema;
  /** @deprecated use `UploadAssetResponse$Outbound` instead. */
  export type Outbound = UploadAssetResponse$Outbound;
}

export function uploadAssetResponseToJSON(
  uploadAssetResponse: UploadAssetResponse,
): string {
  return JSON.stringify(
    UploadAssetResponse$outboundSchema.parse(uploadAssetResponse),
  );
}

export function uploadAssetResponseFromJSON(
  jsonString: string,
): SafeParseResult<UploadAssetResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadAssetResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadAssetResponse' from JSON`,
  );
}
