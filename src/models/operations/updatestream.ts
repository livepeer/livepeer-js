/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as errors from "../errors";
import * as z from "zod";

export type UpdateStreamRequest = {
    /**
     * ID of the stream
     */
    id: string;
    streamPatchPayload: components.StreamPatchPayload;
};

export type UpdateStreamResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Error
     */
    error?: errors.ErrorT | undefined;
};

/** @internal */
export namespace UpdateStreamRequest$ {
    export const inboundSchema: z.ZodType<UpdateStreamRequest, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string(),
            "stream-patch-payload": components.StreamPatchPayload$.inboundSchema,
        })
        .transform((v) => {
            return {
                id: v.id,
                streamPatchPayload: v["stream-patch-payload"],
            };
        });

    export type Outbound = {
        id: string;
        "stream-patch-payload": components.StreamPatchPayload$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateStreamRequest> = z
        .object({
            id: z.string(),
            streamPatchPayload: components.StreamPatchPayload$.outboundSchema,
        })
        .transform((v) => {
            return {
                id: v.id,
                "stream-patch-payload": v.streamPatchPayload,
            };
        });
}

/** @internal */
export namespace UpdateStreamResponse$ {
    export const inboundSchema: z.ZodType<UpdateStreamResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            error: errors.ErrorT$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.error === undefined ? null : { error: v.error }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        error?: errors.ErrorT$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UpdateStreamResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            error: errors.ErrorT$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.error === undefined ? null : { error: v.error }),
            };
        });
}
