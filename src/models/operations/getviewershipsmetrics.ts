/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../internal/utils";
import * as components from "../../models/components";
import { AxiosResponse } from "axios";

/**
 * The time step to aggregate viewership metrics by
 */
export enum TimeStep {
    Hour = "hour",
    Day = "day",
    Week = "week",
    Month = "month",
    Year = "year",
}

export enum BreakdownBy {
    PlaybackId = "playbackId",
    DeviceType = "deviceType",
    Device = "device",
    Cpu = "cpu",
    Os = "os",
    Browser = "browser",
    BrowserEngine = "browserEngine",
    Continent = "continent",
    Country = "country",
    Subdivision = "subdivision",
    Timezone = "timezone",
    Geohash = "geohash",
    ViewerId = "viewerId",
    CreatorId = "creatorId",
}

export class GetViewershipsMetricsRequest extends SpeakeasyBase {
    /**
     * The playback ID to filter the query results. This can be a canonical
     *
     * @remarks
     * playback ID from Livepeer assets or streams, or dStorage identifiers
     * for assets
     *
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=playbackId" })
    playbackId?: string;

    /**
     * Start timestamp for the query range (inclusive)
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=from" })
    from?: any;

    /**
     * End timestamp for the query range (exclusive)
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=to" })
    to?: any;

    /**
     * The time step to aggregate viewership metrics by
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=timeStep" })
    timeStep?: TimeStep;

    /**
     * The asset ID to filter metrics for
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=assetId" })
    assetId?: string;

    /**
     * The stream ID to filter metrics for
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=streamId" })
    streamId?: string;

    /**
     * The creator ID to filter the query results
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=creatorId" })
    creatorId?: string;

    /**
     * The list of fields to break down the query results. Specify this
     *
     * @remarks
     * query-string multiple times to break down by multiple fields.
     *
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=breakdownBy[]" })
    breakdownBy?: BreakdownBy[];
}

export class GetViewershipsMetricsResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;

    /**
     * A list of Metric objects
     */
    @SpeakeasyMetadata({ elemType: components.ViewershipMetric })
    data?: components.ViewershipMetric[];
}
