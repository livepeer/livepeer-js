/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as errors from "../errors";
import * as z from "zod";

export type ResendWebhookRequest = {
    id: string;
    logId: string;
};

export type ResendWebhookResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Success
     */
    webhookLog?: components.WebhookLog | undefined;
    /**
     * Error
     */
    error?: errors.ErrorT | undefined;
};

/** @internal */
export namespace ResendWebhookRequest$ {
    export type Inbound = {
        id: string;
        logId: string;
    };

    export const inboundSchema: z.ZodType<ResendWebhookRequest, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
            logId: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
                logId: v.logId,
            };
        });

    export type Outbound = {
        id: string;
        logId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResendWebhookRequest> = z
        .object({
            id: z.string(),
            logId: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
                logId: v.logId,
            };
        });
}

/** @internal */
export namespace ResendWebhookResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        "webhook-log"?: components.WebhookLog$.Inbound | undefined;
        error?: errors.ErrorT$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ResendWebhookResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            "webhook-log": components.WebhookLog$.inboundSchema.optional(),
            error: errors.ErrorT$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v["webhook-log"] === undefined ? null : { webhookLog: v["webhook-log"] }),
                ...(v.error === undefined ? null : { error: v.error }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        "webhook-log"?: components.WebhookLog$.Outbound | undefined;
        error?: errors.ErrorT$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ResendWebhookResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            webhookLog: components.WebhookLog$.outboundSchema.optional(),
            error: errors.ErrorT$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.webhookLog === undefined ? null : { "webhook-log": v.webhookLog }),
                ...(v.error === undefined ? null : { error: v.error }),
            };
        });
}
