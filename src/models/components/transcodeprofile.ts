/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum TranscodeProfileProfile {
    H264Baseline = "H264Baseline",
    H264Main = "H264Main",
    H264High = "H264High",
    H264ConstrainedHigh = "H264ConstrainedHigh",
}

export enum TranscodeProfileEncoder {
    H264 = "H.264",
    Hevc = "HEVC",
    Vp8 = "VP8",
    Vp9 = "VP9",
}

/**
 * Transcode API profile
 */
export type TranscodeProfile = {
    width?: number | undefined;
    name?: string | undefined;
    height?: number | undefined;
    bitrate: number;
    /**
     * Restricts the size of the output video using the constant quality feature. Increasing this value will result in a lower quality video. Note that this parameter might not work if the transcoder lacks support for it.
     *
     * @remarks
     *
     */
    quality?: number | undefined;
    fps?: number | undefined;
    fpsDen?: number | undefined;
    gop?: string | undefined;
    profile?: TranscodeProfileProfile | undefined;
    encoder?: TranscodeProfileEncoder | undefined;
};

/** @internal */
export namespace TranscodeProfileProfile$ {
    export const inboundSchema = z.nativeEnum(TranscodeProfileProfile);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace TranscodeProfileEncoder$ {
    export const inboundSchema = z.nativeEnum(TranscodeProfileEncoder);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace TranscodeProfile$ {
    export const inboundSchema: z.ZodType<TranscodeProfile, z.ZodTypeDef, unknown> = z.object({
        width: z.number().int().optional(),
        name: z.string().optional(),
        height: z.number().int().optional(),
        bitrate: z.number().int(),
        quality: z.number().int().optional(),
        fps: z.number().int().optional(),
        fpsDen: z.number().int().optional(),
        gop: z.string().optional(),
        profile: TranscodeProfileProfile$.inboundSchema.optional(),
        encoder: TranscodeProfileEncoder$.inboundSchema.optional(),
    });

    export type Outbound = {
        width?: number | undefined;
        name?: string | undefined;
        height?: number | undefined;
        bitrate: number;
        quality?: number | undefined;
        fps?: number | undefined;
        fpsDen?: number | undefined;
        gop?: string | undefined;
        profile?: string | undefined;
        encoder?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TranscodeProfile> = z.object({
        width: z.number().int().optional(),
        name: z.string().optional(),
        height: z.number().int().optional(),
        bitrate: z.number().int(),
        quality: z.number().int().optional(),
        fps: z.number().int().optional(),
        fpsDen: z.number().int().optional(),
        gop: z.string().optional(),
        profile: TranscodeProfileProfile$.outboundSchema.optional(),
        encoder: TranscodeProfileEncoder$.outboundSchema.optional(),
    });
}
