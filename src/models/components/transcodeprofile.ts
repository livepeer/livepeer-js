/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum TranscodeProfileProfile {
    H264Baseline = "H264Baseline",
    H264Main = "H264Main",
    H264High = "H264High",
    H264ConstrainedHigh = "H264ConstrainedHigh",
}

export enum TranscodeProfileEncoder {
    H264 = "H.264",
    Hevc = "HEVC",
    Vp8 = "VP8",
    Vp9 = "VP9",
}

/**
 * Transcode API profile
 */
export type TranscodeProfile = {
    width?: number | undefined;
    name?: string | undefined;
    height?: number | undefined;
    bitrate: number;
    /**
     * Restricts the size of the output video using the constant quality feature. Increasing this value will result in a lower quality video. Note that this parameter might not work if the transcoder lacks support for it.
     *
     * @remarks
     *
     */
    quality?: number | undefined;
    fps?: number | undefined;
    fpsDen?: number | undefined;
    gop?: string | undefined;
    profile?: TranscodeProfileProfile | undefined;
    encoder?: TranscodeProfileEncoder | undefined;
};

/** @internal */
export const TranscodeProfileProfile$: z.ZodNativeEnum<typeof TranscodeProfileProfile> =
    z.nativeEnum(TranscodeProfileProfile);

/** @internal */
export const TranscodeProfileEncoder$: z.ZodNativeEnum<typeof TranscodeProfileEncoder> =
    z.nativeEnum(TranscodeProfileEncoder);

/** @internal */
export namespace TranscodeProfile$ {
    export type Inbound = {
        width?: number | undefined;
        name?: string | undefined;
        height?: number | undefined;
        bitrate: number;
        quality?: number | undefined;
        fps?: number | undefined;
        fpsDen?: number | undefined;
        gop?: string | undefined;
        profile?: TranscodeProfileProfile | undefined;
        encoder?: TranscodeProfileEncoder | undefined;
    };

    export const inboundSchema: z.ZodType<TranscodeProfile, z.ZodTypeDef, Inbound> = z
        .object({
            width: z.number().int().optional(),
            name: z.string().optional(),
            height: z.number().int().optional(),
            bitrate: z.number().int(),
            quality: z.number().int().optional(),
            fps: z.number().int().optional(),
            fpsDen: z.number().int().optional(),
            gop: z.string().optional(),
            profile: TranscodeProfileProfile$.optional(),
            encoder: TranscodeProfileEncoder$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.height === undefined ? null : { height: v.height }),
                bitrate: v.bitrate,
                ...(v.quality === undefined ? null : { quality: v.quality }),
                ...(v.fps === undefined ? null : { fps: v.fps }),
                ...(v.fpsDen === undefined ? null : { fpsDen: v.fpsDen }),
                ...(v.gop === undefined ? null : { gop: v.gop }),
                ...(v.profile === undefined ? null : { profile: v.profile }),
                ...(v.encoder === undefined ? null : { encoder: v.encoder }),
            };
        });

    export type Outbound = {
        width?: number | undefined;
        name?: string | undefined;
        height?: number | undefined;
        bitrate: number;
        quality?: number | undefined;
        fps?: number | undefined;
        fpsDen?: number | undefined;
        gop?: string | undefined;
        profile?: TranscodeProfileProfile | undefined;
        encoder?: TranscodeProfileEncoder | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TranscodeProfile> = z
        .object({
            width: z.number().int().optional(),
            name: z.string().optional(),
            height: z.number().int().optional(),
            bitrate: z.number().int(),
            quality: z.number().int().optional(),
            fps: z.number().int().optional(),
            fpsDen: z.number().int().optional(),
            gop: z.string().optional(),
            profile: TranscodeProfileProfile$.optional(),
            encoder: TranscodeProfileEncoder$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.height === undefined ? null : { height: v.height }),
                bitrate: v.bitrate,
                ...(v.quality === undefined ? null : { quality: v.quality }),
                ...(v.fps === undefined ? null : { fps: v.fps }),
                ...(v.fpsDen === undefined ? null : { fpsDen: v.fpsDen }),
                ...(v.gop === undefined ? null : { gop: v.gop }),
                ...(v.profile === undefined ? null : { profile: v.profile }),
                ...(v.encoder === undefined ? null : { encoder: v.encoder }),
            };
        });
}
