/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Attestation, Attestation$ } from "./attestation";
import { PlaybackPolicy, PlaybackPolicy$ } from "./playbackpolicy";
import * as z from "zod";

export enum PlaybackInfoType {
    Live = "live",
    Vod = "vod",
    Recording = "recording",
}

export enum Live {
    Zero = 0,
    One = 1,
}

/**
 * Human Readable Name
 */
export enum Hrn {
    HlsTs = "HLS (TS)",
    Mp4 = "MP4",
    WebRTCH264 = "WebRTC (H264)",
    FlvH264 = "FLV (H264)",
    ThumbnailJPEG = "Thumbnail (JPEG)",
    Thumbnails = "Thumbnails",
}

export enum PlaybackInfoSchemasType {
    Html5ApplicationVndAppleMpegurl = "html5/application/vnd.apple.mpegurl",
    Html5VideoMp4 = "html5/video/mp4",
    Html5VideoH264 = "html5/video/h264",
    VideoXFlv = "video/x-flv",
    ImageJpeg = "image/jpeg",
    TextVtt = "text/vtt",
}

export type PlaybackInfoSource = {
    /**
     * Human Readable Name
     */
    hrn: Hrn;
    type: PlaybackInfoSchemasType;
    url: string;
    size?: number | undefined;
    width?: number | undefined;
    height?: number | undefined;
    bitrate?: number | undefined;
};

export enum PlaybackInfoHrn {
    HlsTs = "HLS (TS)",
}

export enum PlaybackInfoSchemasMetaType {
    Html5ApplicationVndAppleMpegurl = "html5/application/vnd.apple.mpegurl",
}

export type DvrPlayback = {
    hrn?: PlaybackInfoHrn | undefined;
    type?: PlaybackInfoSchemasMetaType | undefined;
    url?: string | undefined;
    error?: string | undefined;
};

export type Meta = {
    live?: Live | undefined;
    /**
     * Whether the playback policy for an asset or stream is public or signed
     */
    playbackPolicy?: PlaybackPolicy | null | undefined;
    source: Array<PlaybackInfoSource>;
    dvrPlayback?: Array<DvrPlayback> | undefined;
    attestation?: Attestation | undefined;
};

export type PlaybackInfo = {
    type: PlaybackInfoType;
    meta: Meta;
};

/** @internal */
export namespace PlaybackInfoType$ {
    export const inboundSchema = z.nativeEnum(PlaybackInfoType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Live$ {
    export const inboundSchema = z.nativeEnum(Live);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Hrn$ {
    export const inboundSchema = z.nativeEnum(Hrn);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace PlaybackInfoSchemasType$ {
    export const inboundSchema = z.nativeEnum(PlaybackInfoSchemasType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace PlaybackInfoSource$ {
    export const inboundSchema: z.ZodType<PlaybackInfoSource, z.ZodTypeDef, unknown> = z.object({
        hrn: Hrn$.inboundSchema,
        type: PlaybackInfoSchemasType$.inboundSchema,
        url: z.string(),
        size: z.number().optional(),
        width: z.number().optional(),
        height: z.number().optional(),
        bitrate: z.number().optional(),
    });

    export type Outbound = {
        hrn: string;
        type: string;
        url: string;
        size?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        bitrate?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PlaybackInfoSource> = z.object({
        hrn: Hrn$.outboundSchema,
        type: PlaybackInfoSchemasType$.outboundSchema,
        url: z.string(),
        size: z.number().optional(),
        width: z.number().optional(),
        height: z.number().optional(),
        bitrate: z.number().optional(),
    });
}

/** @internal */
export namespace PlaybackInfoHrn$ {
    export const inboundSchema = z.nativeEnum(PlaybackInfoHrn);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace PlaybackInfoSchemasMetaType$ {
    export const inboundSchema = z.nativeEnum(PlaybackInfoSchemasMetaType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace DvrPlayback$ {
    export const inboundSchema: z.ZodType<DvrPlayback, z.ZodTypeDef, unknown> = z.object({
        hrn: PlaybackInfoHrn$.inboundSchema.optional(),
        type: PlaybackInfoSchemasMetaType$.inboundSchema.optional(),
        url: z.string().optional(),
        error: z.string().optional(),
    });

    export type Outbound = {
        hrn?: string | undefined;
        type?: string | undefined;
        url?: string | undefined;
        error?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DvrPlayback> = z.object({
        hrn: PlaybackInfoHrn$.outboundSchema.optional(),
        type: PlaybackInfoSchemasMetaType$.outboundSchema.optional(),
        url: z.string().optional(),
        error: z.string().optional(),
    });
}

/** @internal */
export namespace Meta$ {
    export const inboundSchema: z.ZodType<Meta, z.ZodTypeDef, unknown> = z.object({
        live: Live$.inboundSchema.optional(),
        playbackPolicy: z.nullable(PlaybackPolicy$.inboundSchema).optional(),
        source: z.array(z.lazy(() => PlaybackInfoSource$.inboundSchema)),
        dvrPlayback: z.array(z.lazy(() => DvrPlayback$.inboundSchema)).optional(),
        attestation: Attestation$.inboundSchema.optional(),
    });

    export type Outbound = {
        live?: number | undefined;
        playbackPolicy?: PlaybackPolicy$.Outbound | null | undefined;
        source: Array<PlaybackInfoSource$.Outbound>;
        dvrPlayback?: Array<DvrPlayback$.Outbound> | undefined;
        attestation?: Attestation$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Meta> = z.object({
        live: Live$.outboundSchema.optional(),
        playbackPolicy: z.nullable(PlaybackPolicy$.outboundSchema).optional(),
        source: z.array(z.lazy(() => PlaybackInfoSource$.outboundSchema)),
        dvrPlayback: z.array(z.lazy(() => DvrPlayback$.outboundSchema)).optional(),
        attestation: Attestation$.outboundSchema.optional(),
    });
}

/** @internal */
export namespace PlaybackInfo$ {
    export const inboundSchema: z.ZodType<PlaybackInfo, z.ZodTypeDef, unknown> = z.object({
        type: PlaybackInfoType$.inboundSchema,
        meta: z.lazy(() => Meta$.inboundSchema),
    });

    export type Outbound = {
        type: string;
        meta: Meta$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PlaybackInfo> = z.object({
        type: PlaybackInfoType$.outboundSchema,
        meta: z.lazy(() => Meta$.outboundSchema),
    });
}
