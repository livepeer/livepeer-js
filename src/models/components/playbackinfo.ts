/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Attestation, Attestation$ } from "./attestation";
import { PlaybackPolicy, PlaybackPolicy$ } from "./playbackpolicy";
import { z } from "zod";

export enum PlaybackInfoType {
    Live = "live",
    Vod = "vod",
    Recording = "recording",
}

export enum Hrn {
    HlsTs = "HLS (TS)",
    Mp4 = "MP4",
    WebRTCH264 = "WebRTC (H264)",
}

export enum PlaybackInfoMetaType {
    Html5ApplicationVndAppleMpegurl = "html5/application/vnd.apple.mpegurl",
    Html5VideoMp4 = "html5/video/mp4",
    Html5VideoH264 = "html5/video/h264",
}

export type PlaybackInfoSource = {
    hrn: Hrn;
    type: PlaybackInfoMetaType;
    url: string;
    size?: number | undefined;
    width?: number | undefined;
    height?: number | undefined;
    bitrate?: number | undefined;
};

export type Meta = {
    live?: number | undefined;
    /**
     * Whether the playback policy for a asset or stream is public or signed
     */
    playbackPolicy?: PlaybackPolicy | undefined;
    source: Array<PlaybackInfoSource>;
    attestation?: Attestation | undefined;
};

export type PlaybackInfo = {
    type: PlaybackInfoType;
    meta: Meta;
};

/** @internal */
export const PlaybackInfoType$ = z.nativeEnum(PlaybackInfoType);

/** @internal */
export const Hrn$ = z.nativeEnum(Hrn);

/** @internal */
export const PlaybackInfoMetaType$ = z.nativeEnum(PlaybackInfoMetaType);

/** @internal */
export namespace PlaybackInfoSource$ {
    export type Inbound = {
        hrn: Hrn;
        type: PlaybackInfoMetaType;
        url: string;
        size?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        bitrate?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PlaybackInfoSource, z.ZodTypeDef, Inbound> = z
        .object({
            hrn: Hrn$,
            type: PlaybackInfoMetaType$,
            url: z.string(),
            size: z.number().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            bitrate: z.number().optional(),
        })
        .transform((v) => {
            return {
                hrn: v.hrn,
                type: v.type,
                url: v.url,
                ...(v.size === undefined ? null : { size: v.size }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.bitrate === undefined ? null : { bitrate: v.bitrate }),
            };
        });

    export type Outbound = {
        hrn: Hrn;
        type: PlaybackInfoMetaType;
        url: string;
        size?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        bitrate?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PlaybackInfoSource> = z
        .object({
            hrn: Hrn$,
            type: PlaybackInfoMetaType$,
            url: z.string(),
            size: z.number().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            bitrate: z.number().optional(),
        })
        .transform((v) => {
            return {
                hrn: v.hrn,
                type: v.type,
                url: v.url,
                ...(v.size === undefined ? null : { size: v.size }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.bitrate === undefined ? null : { bitrate: v.bitrate }),
            };
        });
}

/** @internal */
export namespace Meta$ {
    export type Inbound = {
        live?: number | undefined;
        playbackPolicy?: PlaybackPolicy$.Inbound | undefined;
        source: Array<PlaybackInfoSource$.Inbound>;
        attestation?: Attestation$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<Meta, z.ZodTypeDef, Inbound> = z
        .object({
            live: z.number().optional(),
            playbackPolicy: PlaybackPolicy$.inboundSchema.optional(),
            source: z.array(z.lazy(() => PlaybackInfoSource$.inboundSchema)),
            attestation: Attestation$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.live === undefined ? null : { live: v.live }),
                ...(v.playbackPolicy === undefined ? null : { playbackPolicy: v.playbackPolicy }),
                source: v.source,
                ...(v.attestation === undefined ? null : { attestation: v.attestation }),
            };
        });

    export type Outbound = {
        live?: number | undefined;
        playbackPolicy?: PlaybackPolicy$.Outbound | undefined;
        source: Array<PlaybackInfoSource$.Outbound>;
        attestation?: Attestation$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Meta> = z
        .object({
            live: z.number().optional(),
            playbackPolicy: PlaybackPolicy$.outboundSchema.optional(),
            source: z.array(z.lazy(() => PlaybackInfoSource$.outboundSchema)),
            attestation: Attestation$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.live === undefined ? null : { live: v.live }),
                ...(v.playbackPolicy === undefined ? null : { playbackPolicy: v.playbackPolicy }),
                source: v.source,
                ...(v.attestation === undefined ? null : { attestation: v.attestation }),
            };
        });
}

/** @internal */
export namespace PlaybackInfo$ {
    export type Inbound = {
        type: PlaybackInfoType;
        meta: Meta$.Inbound;
    };

    export const inboundSchema: z.ZodType<PlaybackInfo, z.ZodTypeDef, Inbound> = z
        .object({
            type: PlaybackInfoType$,
            meta: z.lazy(() => Meta$.inboundSchema),
        })
        .transform((v) => {
            return {
                type: v.type,
                meta: v.meta,
            };
        });

    export type Outbound = {
        type: PlaybackInfoType;
        meta: Meta$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PlaybackInfo> = z
        .object({
            type: PlaybackInfoType$,
            meta: z.lazy(() => Meta$.outboundSchema),
        })
        .transform((v) => {
            return {
                type: v.type,
                meta: v.meta,
            };
        });
}
