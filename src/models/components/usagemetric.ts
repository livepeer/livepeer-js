/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * An individual metric about usage of a user.
 *
 * @remarks
 *
 */
export type UsageMetric = {
    /**
     * The user ID associated with the metric
     */
    userID?: string | undefined;
    /**
     * The creator ID associated with the metric
     */
    creatorID?: string | undefined;
    /**
     * Total minutes of delivery usage.
     */
    deliveryUsageMins?: number | undefined;
    /**
     * Total transcoded minutes.
     */
    totalUsageMins?: number | undefined;
    /**
     * Total minutes of storage usage.
     */
    storageUsageMins?: number | undefined;
};

/** @internal */
export namespace UsageMetric$ {
    export const inboundSchema: z.ZodType<UsageMetric, z.ZodTypeDef, unknown> = z
        .object({
            UserID: z.string().optional(),
            CreatorID: z.string().optional(),
            DeliveryUsageMins: z.number().optional(),
            TotalUsageMins: z.number().optional(),
            StorageUsageMins: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.UserID === undefined ? null : { userID: v.UserID }),
                ...(v.CreatorID === undefined ? null : { creatorID: v.CreatorID }),
                ...(v.DeliveryUsageMins === undefined
                    ? null
                    : { deliveryUsageMins: v.DeliveryUsageMins }),
                ...(v.TotalUsageMins === undefined ? null : { totalUsageMins: v.TotalUsageMins }),
                ...(v.StorageUsageMins === undefined
                    ? null
                    : { storageUsageMins: v.StorageUsageMins }),
            };
        });

    export type Outbound = {
        UserID?: string | undefined;
        CreatorID?: string | undefined;
        DeliveryUsageMins?: number | undefined;
        TotalUsageMins?: number | undefined;
        StorageUsageMins?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UsageMetric> = z
        .object({
            userID: z.string().optional(),
            creatorID: z.string().optional(),
            deliveryUsageMins: z.number().optional(),
            totalUsageMins: z.number().optional(),
            storageUsageMins: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.userID === undefined ? null : { UserID: v.userID }),
                ...(v.creatorID === undefined ? null : { CreatorID: v.creatorID }),
                ...(v.deliveryUsageMins === undefined
                    ? null
                    : { DeliveryUsageMins: v.deliveryUsageMins }),
                ...(v.totalUsageMins === undefined ? null : { TotalUsageMins: v.totalUsageMins }),
                ...(v.storageUsageMins === undefined
                    ? null
                    : { StorageUsageMins: v.storageUsageMins }),
            };
        });
}
