/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../internal/utils";
import { Expose, Type } from "class-transformer";

/**
 * Inline multistream target object. Will automatically
 *
 * @remarks
 * create the target resource to be used by the created
 * stream.
 *
 */
export class Spec extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    /**
     * Livepeer-compatible multistream target URL (RTMP(S) or SRT)
     */
    @SpeakeasyMetadata()
    @Expose({ name: "url" })
    url: string;
}

export class Target extends SpeakeasyBase {
    /**
     * Name of transcoding profile that should be sent. Use
     *
     * @remarks
     * "source" for pushing source stream data
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "profile" })
    profile: string;

    /**
     * If true, the stream audio will be muted and only silent
     *
     * @remarks
     * video will be pushed to the target.
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "videoOnly" })
    videoOnly?: boolean;

    /**
     * ID of multistream target object where to push this stream
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    /**
     * Inline multistream target object. Will automatically
     *
     * @remarks
     * create the target resource to be used by the created
     * stream.
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "spec" })
    @Type(() => Spec)
    spec?: Spec;
}
