/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../internal/utils";
import { FfmpegProfile } from "./ffmpegprofile";
import { Multistream } from "./multistream";
import { PlaybackPolicy } from "./playbackpolicy";
import { Expose, Type } from "class-transformer";

export class StreamPatchPayload extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "creatorId" })
    creatorId?: any;

    /**
     * Should this stream be recorded? Uses default settings. For more
     *
     * @remarks
     * customization, create and configure an object store.
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "record" })
    record?: boolean;

    /**
     * If currently suspended
     */
    @SpeakeasyMetadata()
    @Expose({ name: "suspended" })
    suspended?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "multistream" })
    @Type(() => Multistream)
    multistream?: Multistream;

    /**
     * Whether the playback policy for a asset or stream is public or signed
     */
    @SpeakeasyMetadata()
    @Expose({ name: "playbackPolicy" })
    @Type(() => PlaybackPolicy)
    playbackPolicy?: PlaybackPolicy;

    @SpeakeasyMetadata({ elemType: FfmpegProfile })
    @Expose({ name: "profiles" })
    @Type(() => FfmpegProfile)
    profiles?: FfmpegProfile[];
}
