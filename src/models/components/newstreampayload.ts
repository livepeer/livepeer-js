/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
    FfmpegProfile,
    FfmpegProfile$inboundSchema,
    FfmpegProfile$Outbound,
    FfmpegProfile$outboundSchema,
} from "./ffmpegprofile.js";
import {
    InputCreatorId,
    InputCreatorId$inboundSchema,
    InputCreatorId$Outbound,
    InputCreatorId$outboundSchema,
} from "./inputcreatorid.js";
import {
    Multistream,
    Multistream$inboundSchema,
    Multistream$Outbound,
    Multistream$outboundSchema,
} from "./multistream.js";
import {
    PlaybackPolicy,
    PlaybackPolicy$inboundSchema,
    PlaybackPolicy$Outbound,
    PlaybackPolicy$outboundSchema,
} from "./playbackpolicy.js";
import { Pull, Pull$inboundSchema, Pull$Outbound, Pull$outboundSchema } from "./pull.js";
import {
    TranscodeProfile,
    TranscodeProfile$inboundSchema,
    TranscodeProfile$Outbound,
    TranscodeProfile$outboundSchema,
} from "./transcodeprofile.js";
import {
    UserTags,
    UserTags$inboundSchema,
    UserTags$Outbound,
    UserTags$outboundSchema,
} from "./usertags.js";
import * as z from "zod";

export type NewStreamPayloadRecordingSpec = {
    profiles?: Array<TranscodeProfile> | null | undefined;
};

export type NewStreamPayload = {
    name: string;
    /**
     * Configuration for a stream that should be actively pulled from an
     *
     * @remarks
     * external source, rather than pushed to Livepeer. If specified, the
     * stream will not have a streamKey.
     */
    pull?: Pull | undefined;
    creatorId?: InputCreatorId | undefined;
    /**
     * Whether the playback policy for an asset or stream is public or signed
     */
    playbackPolicy?: PlaybackPolicy | null | undefined;
    profiles?: Array<FfmpegProfile> | null | undefined;
    /**
     * Should this stream be recorded? Uses default settings. For more
     *
     * @remarks
     * customization, create and configure an object store.
     *
     */
    record?: boolean | undefined;
    recordingSpec?: NewStreamPayloadRecordingSpec | undefined;
    multistream?: Multistream | undefined;
    /**
     * User input tags associated with the stream
     */
    userTags?: { [k: string]: UserTags } | undefined;
};

/** @internal */
export const NewStreamPayloadRecordingSpec$inboundSchema: z.ZodType<
    NewStreamPayloadRecordingSpec,
    z.ZodTypeDef,
    unknown
> = z.object({
    profiles: z.nullable(z.array(TranscodeProfile$inboundSchema)).optional(),
});

/** @internal */
export type NewStreamPayloadRecordingSpec$Outbound = {
    profiles?: Array<TranscodeProfile$Outbound> | null | undefined;
};

/** @internal */
export const NewStreamPayloadRecordingSpec$outboundSchema: z.ZodType<
    NewStreamPayloadRecordingSpec$Outbound,
    z.ZodTypeDef,
    NewStreamPayloadRecordingSpec
> = z.object({
    profiles: z.nullable(z.array(TranscodeProfile$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NewStreamPayloadRecordingSpec$ {
    /** @deprecated use `NewStreamPayloadRecordingSpec$inboundSchema` instead. */
    export const inboundSchema = NewStreamPayloadRecordingSpec$inboundSchema;
    /** @deprecated use `NewStreamPayloadRecordingSpec$outboundSchema` instead. */
    export const outboundSchema = NewStreamPayloadRecordingSpec$outboundSchema;
    /** @deprecated use `NewStreamPayloadRecordingSpec$Outbound` instead. */
    export type Outbound = NewStreamPayloadRecordingSpec$Outbound;
}

/** @internal */
export const NewStreamPayload$inboundSchema: z.ZodType<NewStreamPayload, z.ZodTypeDef, unknown> =
    z.object({
        name: z.string(),
        pull: Pull$inboundSchema.optional(),
        creatorId: InputCreatorId$inboundSchema.optional(),
        playbackPolicy: z.nullable(PlaybackPolicy$inboundSchema).optional(),
        profiles: z.nullable(z.array(FfmpegProfile$inboundSchema)).optional(),
        record: z.boolean().optional(),
        recordingSpec: z.lazy(() => NewStreamPayloadRecordingSpec$inboundSchema).optional(),
        multistream: Multistream$inboundSchema.optional(),
        userTags: z.record(UserTags$inboundSchema).optional(),
    });

/** @internal */
export type NewStreamPayload$Outbound = {
    name: string;
    pull?: Pull$Outbound | undefined;
    creatorId?: InputCreatorId$Outbound | undefined;
    playbackPolicy?: PlaybackPolicy$Outbound | null | undefined;
    profiles?: Array<FfmpegProfile$Outbound> | null | undefined;
    record?: boolean | undefined;
    recordingSpec?: NewStreamPayloadRecordingSpec$Outbound | undefined;
    multistream?: Multistream$Outbound | undefined;
    userTags?: { [k: string]: UserTags$Outbound } | undefined;
};

/** @internal */
export const NewStreamPayload$outboundSchema: z.ZodType<
    NewStreamPayload$Outbound,
    z.ZodTypeDef,
    NewStreamPayload
> = z.object({
    name: z.string(),
    pull: Pull$outboundSchema.optional(),
    creatorId: InputCreatorId$outboundSchema.optional(),
    playbackPolicy: z.nullable(PlaybackPolicy$outboundSchema).optional(),
    profiles: z.nullable(z.array(FfmpegProfile$outboundSchema)).optional(),
    record: z.boolean().optional(),
    recordingSpec: z.lazy(() => NewStreamPayloadRecordingSpec$outboundSchema).optional(),
    multistream: Multistream$outboundSchema.optional(),
    userTags: z.record(UserTags$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NewStreamPayload$ {
    /** @deprecated use `NewStreamPayload$inboundSchema` instead. */
    export const inboundSchema = NewStreamPayload$inboundSchema;
    /** @deprecated use `NewStreamPayload$outboundSchema` instead. */
    export const outboundSchema = NewStreamPayload$outboundSchema;
    /** @deprecated use `NewStreamPayload$Outbound` instead. */
    export type Outbound = NewStreamPayload$Outbound;
}
