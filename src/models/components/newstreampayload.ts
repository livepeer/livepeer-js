/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { FfmpegProfile, FfmpegProfile$ } from "./ffmpegprofile";
import { InputCreatorId, InputCreatorId$ } from "./inputcreatorid";
import { Multistream, Multistream$ } from "./multistream";
import { PlaybackPolicy, PlaybackPolicy$ } from "./playbackpolicy";
import { Pull, Pull$ } from "./pull";
import { RecordingSpec, RecordingSpec$ } from "./recordingspec";
import { UserTags, UserTags$ } from "./usertags";
import * as z from "zod";

export type NewStreamPayload = {
    name: string;
    /**
     * Configuration for a stream that should be actively pulled from an
     *
     * @remarks
     * external source, rather than pushed to Livepeer. If specified, the
     * stream will not have a streamKey.
     */
    pull?: Pull | undefined;
    creatorId?: InputCreatorId | undefined;
    /**
     * Whether the playback policy for an asset or stream is public or signed
     */
    playbackPolicy?: PlaybackPolicy | null | undefined;
    profiles?: Array<FfmpegProfile> | null | undefined;
    /**
     * Should this stream be recorded? Uses default settings. For more
     *
     * @remarks
     * customization, create and configure an object store.
     *
     */
    record?: boolean | undefined;
    /**
     * Configuration for recording the stream. This can only be set if
     *
     * @remarks
     * `record` is true.
     *
     */
    recordingSpec?: RecordingSpec | undefined;
    multistream?: Multistream | undefined;
    /**
     * User input tags associated with the stream
     */
    userTags?: { [k: string]: UserTags } | undefined;
};

/** @internal */
export namespace NewStreamPayload$ {
    export const inboundSchema: z.ZodType<NewStreamPayload, z.ZodTypeDef, unknown> = z.object({
        name: z.string(),
        pull: Pull$.inboundSchema.optional(),
        creatorId: InputCreatorId$.inboundSchema.optional(),
        playbackPolicy: z.nullable(PlaybackPolicy$.inboundSchema).optional(),
        profiles: z.nullable(z.array(FfmpegProfile$.inboundSchema)).optional(),
        record: z.boolean().optional(),
        recordingSpec: RecordingSpec$.inboundSchema.optional(),
        multistream: Multistream$.inboundSchema.optional(),
        userTags: z.record(UserTags$.inboundSchema).optional(),
    });

    export type Outbound = {
        name: string;
        pull?: Pull$.Outbound | undefined;
        creatorId?: InputCreatorId$.Outbound | undefined;
        playbackPolicy?: PlaybackPolicy$.Outbound | null | undefined;
        profiles?: Array<FfmpegProfile$.Outbound> | null | undefined;
        record?: boolean | undefined;
        recordingSpec?: RecordingSpec$.Outbound | undefined;
        multistream?: Multistream$.Outbound | undefined;
        userTags?: { [k: string]: UserTags$.Outbound } | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NewStreamPayload> = z.object({
        name: z.string(),
        pull: Pull$.outboundSchema.optional(),
        creatorId: InputCreatorId$.outboundSchema.optional(),
        playbackPolicy: z.nullable(PlaybackPolicy$.outboundSchema).optional(),
        profiles: z.nullable(z.array(FfmpegProfile$.outboundSchema)).optional(),
        record: z.boolean().optional(),
        recordingSpec: RecordingSpec$.outboundSchema.optional(),
        multistream: Multistream$.outboundSchema.optional(),
        userTags: z.record(UserTags$.outboundSchema).optional(),
    });
}
