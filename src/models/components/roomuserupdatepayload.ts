/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type RoomUserUpdatePayload = {
    /**
     * Whether a user is allowed to publish audio/video tracks (i.e. their microphone and webcam)
     */
    canPublish?: boolean | undefined;
    /**
     * Whether a user is allowed to publish data messages to the room
     */
    canPublishData?: boolean | undefined;
    /**
     * User defined payload to store for the participant
     */
    metadata?: string | undefined;
};

/** @internal */
export namespace RoomUserUpdatePayload$ {
    export type Inbound = {
        canPublish?: boolean | undefined;
        canPublishData?: boolean | undefined;
        metadata?: string | undefined;
    };

    export const inboundSchema: z.ZodType<RoomUserUpdatePayload, z.ZodTypeDef, Inbound> = z
        .object({
            canPublish: z.boolean().default(true),
            canPublishData: z.boolean().default(true),
            metadata: z.string().optional(),
        })
        .transform((v) => {
            return {
                canPublish: v.canPublish,
                canPublishData: v.canPublishData,
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });

    export type Outbound = {
        canPublish: boolean;
        canPublishData: boolean;
        metadata?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, RoomUserUpdatePayload> = z
        .object({
            canPublish: z.boolean().default(true),
            canPublishData: z.boolean().default(true),
            metadata: z.string().optional(),
        })
        .transform((v) => {
            return {
                canPublish: v.canPublish,
                canPublishData: v.canPublishData,
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });
}
