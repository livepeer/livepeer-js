/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type TargetOutput = {
    /**
     * Name of transcoding profile that should be sent. Use
     *
     * @remarks
     * "source" for pushing source stream data
     *
     */
    profile: string;
    /**
     * If true, the stream audio will be muted and only silent
     *
     * @remarks
     * video will be pushed to the target.
     *
     */
    videoOnly?: boolean | undefined;
    /**
     * ID of multistream target object where to push this stream
     */
    id?: string | undefined;
};

/** @internal */
export namespace TargetOutput$ {
    export type Inbound = {
        profile: string;
        videoOnly?: boolean | undefined;
        id?: string | undefined;
    };

    export const inboundSchema: z.ZodType<TargetOutput, z.ZodTypeDef, Inbound> = z
        .object({
            profile: z.string(),
            videoOnly: z.boolean().default(false),
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                profile: v.profile,
                videoOnly: v.videoOnly,
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });

    export type Outbound = {
        profile: string;
        videoOnly: boolean;
        id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TargetOutput> = z
        .object({
            profile: z.string(),
            videoOnly: z.boolean().default(false),
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                profile: v.profile,
                videoOnly: v.videoOnly,
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });
}
