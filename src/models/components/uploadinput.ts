/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AssetInput, AssetInput$ } from "./asset";
import { z } from "zod";

/**
 * Output of the upload task
 */
export type UploadInput = {
    videoFilePath?: string | undefined;
    metadataFilePath?: string | undefined;
    assetSpec?: AssetInput | undefined;
    additionalProperties: Record<string, any>;
};

/** @internal */
export namespace UploadInput$ {
    export type Inbound = {
        [additionalProperties: string]: unknown;

        videoFilePath?: string | undefined;
        metadataFilePath?: string | undefined;
        assetSpec?: AssetInput$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<UploadInput, z.ZodTypeDef, Inbound> = z
        .object({
            videoFilePath: z.string().optional(),
            metadataFilePath: z.string().optional(),
            assetSpec: AssetInput$.inboundSchema.optional(),
        })
        .catchall(z.any())
        .transform((v) => {
            const { videoFilePath, metadataFilePath, assetSpec, ...additionalProperties } = v;

            return {
                ...(v.videoFilePath === undefined ? null : { videoFilePath: v.videoFilePath }),
                ...(v.metadataFilePath === undefined
                    ? null
                    : { metadataFilePath: v.metadataFilePath }),
                ...(v.assetSpec === undefined ? null : { assetSpec: v.assetSpec }),
                additionalProperties,
            };
        });

    export type Outbound = {
        videoFilePath?: string | undefined;
        metadataFilePath?: string | undefined;
        assetSpec?: AssetInput$.Outbound | undefined;
        [additionalProperties: string]: unknown;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadInput> = z
        .object({
            videoFilePath: z.string().optional(),
            metadataFilePath: z.string().optional(),
            assetSpec: AssetInput$.outboundSchema.optional(),
            additionalProperties: z.record(z.any()),
        })
        .transform((v) => {
            return {
                ...v.additionalProperties,
                ...(v.videoFilePath === undefined ? null : { videoFilePath: v.videoFilePath }),
                ...(v.metadataFilePath === undefined
                    ? null
                    : { metadataFilePath: v.metadataFilePath }),
                ...(v.assetSpec === undefined ? null : { assetSpec: v.assetSpec }),
            };
        });
}
