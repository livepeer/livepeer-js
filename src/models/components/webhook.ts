/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum Events {
    StreamStarted = "stream.started",
    StreamDetection = "stream.detection",
    StreamIdle = "stream.idle",
    RecordingReady = "recording.ready",
    RecordingStarted = "recording.started",
    RecordingWaiting = "recording.waiting",
    MultistreamConnected = "multistream.connected",
    MultistreamError = "multistream.error",
    MultistreamDisconnected = "multistream.disconnected",
    PlaybackUserNew = "playback.user.new",
    PlaybackAccessControl = "playback.accessControl",
    AssetCreated = "asset.created",
    AssetUpdated = "asset.updated",
    AssetFailed = "asset.failed",
    AssetReady = "asset.ready",
    AssetDeleted = "asset.deleted",
    TaskSpawned = "task.spawned",
    TaskUpdated = "task.updated",
    TaskCompleted = "task.completed",
    TaskFailed = "task.failed",
}

/**
 * failure timestamp and error message with status code
 */
export type LastFailure = {
    /**
     * Timestamp (in milliseconds) at which the webhook last failed
     */
    timestamp?: number | undefined;
    /**
     * Webhook failure error message
     */
    error?: string | undefined;
    /**
     * Webhook failure response
     */
    response?: string | undefined;
    /**
     * Webhook failure status code
     */
    statusCode?: number | undefined;
};

/**
 * status of webhook
 */
export type Status = {
    /**
     * failure timestamp and error message with status code
     */
    lastFailure?: LastFailure | undefined;
    /**
     * Timestamp (in milliseconds) at which the webhook last was
     *
     * @remarks
     * triggered
     *
     */
    lastTriggeredAt?: number | undefined;
};

export type Webhook = {
    id?: string | undefined;
    name: string;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    kind?: string | undefined;
    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    userId?: string | undefined;
    /**
     * Timestamp (in milliseconds) at which stream object was created
     */
    createdAt?: number | undefined;
    events?: Array<Events> | undefined;
    url: string;
    /**
     * streamId of the stream on which the webhook is applied
     */
    streamId?: string | undefined;
    /**
     * status of webhook
     */
    status?: Status | undefined;
};

export type WebhookInput = {
    name: string;
    events?: Array<Events> | undefined;
    url: string;
    /**
     * shared secret used to sign the webhook payload
     */
    sharedSecret?: string | undefined;
    /**
     * streamId of the stream on which the webhook is applied
     */
    streamId?: string | undefined;
};

/** @internal */
export namespace Events$ {
    export const inboundSchema = z.nativeEnum(Events);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace LastFailure$ {
    export const inboundSchema: z.ZodType<LastFailure, z.ZodTypeDef, unknown> = z
        .object({
            timestamp: z.number().optional(),
            error: z.string().optional(),
            response: z.string().optional(),
            statusCode: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.error === undefined ? null : { error: v.error }),
                ...(v.response === undefined ? null : { response: v.response }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
            };
        });

    export type Outbound = {
        timestamp?: number | undefined;
        error?: string | undefined;
        response?: string | undefined;
        statusCode?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LastFailure> = z
        .object({
            timestamp: z.number().optional(),
            error: z.string().optional(),
            response: z.string().optional(),
            statusCode: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.error === undefined ? null : { error: v.error }),
                ...(v.response === undefined ? null : { response: v.response }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
            };
        });
}

/** @internal */
export namespace Status$ {
    export const inboundSchema: z.ZodType<Status, z.ZodTypeDef, unknown> = z
        .object({
            lastFailure: z.lazy(() => LastFailure$.inboundSchema).optional(),
            lastTriggeredAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.lastFailure === undefined ? null : { lastFailure: v.lastFailure }),
                ...(v.lastTriggeredAt === undefined
                    ? null
                    : { lastTriggeredAt: v.lastTriggeredAt }),
            };
        });

    export type Outbound = {
        lastFailure?: LastFailure$.Outbound | undefined;
        lastTriggeredAt?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Status> = z
        .object({
            lastFailure: z.lazy(() => LastFailure$.outboundSchema).optional(),
            lastTriggeredAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.lastFailure === undefined ? null : { lastFailure: v.lastFailure }),
                ...(v.lastTriggeredAt === undefined
                    ? null
                    : { lastTriggeredAt: v.lastTriggeredAt }),
            };
        });
}

/** @internal */
export namespace Webhook$ {
    export const inboundSchema: z.ZodType<Webhook, z.ZodTypeDef, unknown> = z
        .object({
            id: z.string().optional(),
            name: z.string(),
            kind: z.string().optional(),
            userId: z.string().optional(),
            createdAt: z.number().optional(),
            events: z.array(Events$.inboundSchema).optional(),
            url: z.string(),
            streamId: z.string().optional(),
            status: z.lazy(() => Status$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                name: v.name,
                ...(v.kind === undefined ? null : { kind: v.kind }),
                ...(v.userId === undefined ? null : { userId: v.userId }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.events === undefined ? null : { events: v.events }),
                url: v.url,
                ...(v.streamId === undefined ? null : { streamId: v.streamId }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        name: string;
        kind?: string | undefined;
        userId?: string | undefined;
        createdAt?: number | undefined;
        events?: Array<string> | undefined;
        url: string;
        streamId?: string | undefined;
        status?: Status$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Webhook> = z
        .object({
            id: z.string().optional(),
            name: z.string(),
            kind: z.string().optional(),
            userId: z.string().optional(),
            createdAt: z.number().optional(),
            events: z.array(Events$.outboundSchema).optional(),
            url: z.string(),
            streamId: z.string().optional(),
            status: z.lazy(() => Status$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                name: v.name,
                ...(v.kind === undefined ? null : { kind: v.kind }),
                ...(v.userId === undefined ? null : { userId: v.userId }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.events === undefined ? null : { events: v.events }),
                url: v.url,
                ...(v.streamId === undefined ? null : { streamId: v.streamId }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });
}

/** @internal */
export namespace WebhookInput$ {
    export const inboundSchema: z.ZodType<WebhookInput, z.ZodTypeDef, unknown> = z
        .object({
            name: z.string(),
            events: z.array(Events$.inboundSchema).optional(),
            url: z.string(),
            sharedSecret: z.string().optional(),
            streamId: z.string().optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                ...(v.events === undefined ? null : { events: v.events }),
                url: v.url,
                ...(v.sharedSecret === undefined ? null : { sharedSecret: v.sharedSecret }),
                ...(v.streamId === undefined ? null : { streamId: v.streamId }),
            };
        });

    export type Outbound = {
        name: string;
        events?: Array<string> | undefined;
        url: string;
        sharedSecret?: string | undefined;
        streamId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WebhookInput> = z
        .object({
            name: z.string(),
            events: z.array(Events$.outboundSchema).optional(),
            url: z.string(),
            sharedSecret: z.string().optional(),
            streamId: z.string().optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                ...(v.events === undefined ? null : { events: v.events }),
                url: v.url,
                ...(v.sharedSecret === undefined ? null : { sharedSecret: v.sharedSecret }),
                ...(v.streamId === undefined ? null : { streamId: v.streamId }),
            };
        });
}
