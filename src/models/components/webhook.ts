/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../internal/utils";
import { Expose, Type } from "class-transformer";

export enum Events {
    StreamStarted = "stream.started",
    StreamDetection = "stream.detection",
    StreamIdle = "stream.idle",
    RecordingReady = "recording.ready",
    RecordingStarted = "recording.started",
    RecordingWaiting = "recording.waiting",
    MultistreamConnected = "multistream.connected",
    MultistreamError = "multistream.error",
    MultistreamDisconnected = "multistream.disconnected",
    PlaybackUserNew = "playback.user.new",
    PlaybackAccessControl = "playback.accessControl",
    AssetCreated = "asset.created",
    AssetUpdated = "asset.updated",
    AssetFailed = "asset.failed",
    AssetReady = "asset.ready",
    AssetDeleted = "asset.deleted",
    TaskSpawned = "task.spawned",
    TaskUpdated = "task.updated",
    TaskCompleted = "task.completed",
    TaskFailed = "task.failed",
}

/**
 * failure timestamp and error message with status code
 */
export class LastFailure extends SpeakeasyBase {
    /**
     * Timestamp (in milliseconds) at which the webhook last failed
     */
    @SpeakeasyMetadata()
    @Expose({ name: "timestamp" })
    timestamp?: number;

    /**
     * Webhook failure error message
     */
    @SpeakeasyMetadata()
    @Expose({ name: "error" })
    error?: string;

    /**
     * Webhook failure response
     */
    @SpeakeasyMetadata()
    @Expose({ name: "response" })
    response?: string;

    /**
     * Webhook failure status code
     */
    @SpeakeasyMetadata()
    @Expose({ name: "statusCode" })
    statusCode?: number;
}

/**
 * status of webhook
 */
export class Status extends SpeakeasyBase {
    /**
     * failure timestamp and error message with status code
     */
    @SpeakeasyMetadata()
    @Expose({ name: "lastFailure" })
    @Type(() => LastFailure)
    lastFailure?: LastFailure;

    /**
     * Timestamp (in milliseconds) at which the webhook last was
     *
     * @remarks
     * triggered
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "lastTriggeredAt" })
    lastTriggeredAt?: number;
}

export class Webhook extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name: string;

    /**
     * Timestamp (in milliseconds) at which stream object was created
     */
    @SpeakeasyMetadata()
    @Expose({ name: "createdAt" })
    createdAt?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "events" })
    events?: Events[];

    @SpeakeasyMetadata()
    @Expose({ name: "url" })
    url: string;

    /**
     * streamId of the stream on which the webhook is applied
     */
    @SpeakeasyMetadata()
    @Expose({ name: "streamId" })
    streamId?: string;

    /**
     * status of webhook
     */
    @SpeakeasyMetadata()
    @Expose({ name: "status" })
    @Type(() => Status)
    status?: Status;
}
