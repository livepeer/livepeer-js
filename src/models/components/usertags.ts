/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Three = string | number;

export type UserTags = string | number | Array<string | number>;

/** @internal */
export namespace Three$ {
    export type Inbound = string | number;

    export type Outbound = string | number;
    export const inboundSchema: z.ZodType<Three, z.ZodTypeDef, Inbound> = z.union([
        z.string(),
        z.number(),
    ]);
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Three> = z.union([
        z.string(),
        z.number(),
    ]);
}

/** @internal */
export namespace UserTags$ {
    export type Inbound = string | number | Array<string | number>;

    export type Outbound = string | number | Array<string | number>;
    export const inboundSchema: z.ZodType<UserTags, z.ZodTypeDef, Inbound> = z.union([
        z.string(),
        z.number(),
        z.array(z.union([z.string(), z.number()])),
    ]);
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UserTags> = z.union([
        z.string(),
        z.number(),
        z.array(z.union([z.string(), z.number()])),
    ]);
}
