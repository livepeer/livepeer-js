/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { StorageStatus, StorageStatus$ } from "./storagestatus";
import { z } from "zod";

/**
 * Video Metadata EIP-712 primaryType
 */
export enum PrimaryType {
    VideoAttestation = "VideoAttestation",
}

export enum Name {
    VerifiableVideo = "Verifiable Video",
}

export enum Version {
    One = "1",
}

/**
 * Video Metadata EIP-712 domain
 */
export type Domain = {
    name: Name;
    version: Version;
};

export type Attestations = {
    role: string;
    address: string;
};

/**
 * Video Metadata EIP-712 message content
 */
export type Message = {
    video: string;
    attestations: Array<Attestations>;
    signer: string;
    timestamp: number;
};

export enum SignatureType {
    Eip712 = "eip712",
    Flow = "flow",
}

export type AttestationIpfs = {
    /**
     * CID of the file on IPFS
     */
    cid?: string | undefined;
    /**
     * URL with IPFS scheme for the file
     */
    url?: string | undefined;
    /**
     * URL to access file via HTTP through an IPFS gateway
     */
    gatewayUrl?: string | undefined;
    /**
     * Timestamp (in milliseconds) at which IPFS export task was updated
     *
     * @remarks
     *
     */
    updatedAt?: number | undefined;
};

export type AttestationStorage = {
    ipfs?: AttestationIpfs | undefined;
    status?: StorageStatus | undefined;
};

export type Attestation = {
    id?: string | undefined;
    /**
     * Video Metadata EIP-712 primaryType
     */
    primaryType: PrimaryType;
    /**
     * Video Metadata EIP-712 domain
     */
    domain: Domain;
    /**
     * Video Metadata EIP-712 message content
     */
    message: Message;
    /**
     * Video Metadata EIP-712 message signature
     */
    signature: string;
    /**
     * Timestamp (in milliseconds) at which the object was created
     */
    createdAt?: number | undefined;
    signatureType?: SignatureType | undefined;
    storage?: AttestationStorage | undefined;
};

/** @internal */
export const PrimaryType$ = z.nativeEnum(PrimaryType);

/** @internal */
export const Name$ = z.nativeEnum(Name);

/** @internal */
export const Version$ = z.nativeEnum(Version);

/** @internal */
export namespace Domain$ {
    export type Inbound = {
        name: Name;
        version: Version;
    };

    export const inboundSchema: z.ZodType<Domain, z.ZodTypeDef, Inbound> = z
        .object({
            name: Name$,
            version: Version$,
        })
        .transform((v) => {
            return {
                name: v.name,
                version: v.version,
            };
        });

    export type Outbound = {
        name: Name;
        version: Version;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Domain> = z
        .object({
            name: Name$,
            version: Version$,
        })
        .transform((v) => {
            return {
                name: v.name,
                version: v.version,
            };
        });
}

/** @internal */
export namespace Attestations$ {
    export type Inbound = {
        role: string;
        address: string;
    };

    export const inboundSchema: z.ZodType<Attestations, z.ZodTypeDef, Inbound> = z
        .object({
            role: z.string(),
            address: z.string(),
        })
        .transform((v) => {
            return {
                role: v.role,
                address: v.address,
            };
        });

    export type Outbound = {
        role: string;
        address: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Attestations> = z
        .object({
            role: z.string(),
            address: z.string(),
        })
        .transform((v) => {
            return {
                role: v.role,
                address: v.address,
            };
        });
}

/** @internal */
export namespace Message$ {
    export type Inbound = {
        video: string;
        attestations: Array<Attestations$.Inbound>;
        signer: string;
        timestamp: number;
    };

    export const inboundSchema: z.ZodType<Message, z.ZodTypeDef, Inbound> = z
        .object({
            video: z.string(),
            attestations: z.array(z.lazy(() => Attestations$.inboundSchema)),
            signer: z.string(),
            timestamp: z.number(),
        })
        .transform((v) => {
            return {
                video: v.video,
                attestations: v.attestations,
                signer: v.signer,
                timestamp: v.timestamp,
            };
        });

    export type Outbound = {
        video: string;
        attestations: Array<Attestations$.Outbound>;
        signer: string;
        timestamp: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Message> = z
        .object({
            video: z.string(),
            attestations: z.array(z.lazy(() => Attestations$.outboundSchema)),
            signer: z.string(),
            timestamp: z.number(),
        })
        .transform((v) => {
            return {
                video: v.video,
                attestations: v.attestations,
                signer: v.signer,
                timestamp: v.timestamp,
            };
        });
}

/** @internal */
export const SignatureType$ = z.nativeEnum(SignatureType);

/** @internal */
export namespace AttestationIpfs$ {
    export type Inbound = {
        cid?: string | undefined;
        url?: string | undefined;
        gatewayUrl?: string | undefined;
        updatedAt?: number | undefined;
    };

    export const inboundSchema: z.ZodType<AttestationIpfs, z.ZodTypeDef, Inbound> = z
        .object({
            cid: z.string().optional(),
            url: z.string().optional(),
            gatewayUrl: z.string().optional(),
            updatedAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.cid === undefined ? null : { cid: v.cid }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.gatewayUrl === undefined ? null : { gatewayUrl: v.gatewayUrl }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });

    export type Outbound = {
        cid?: string | undefined;
        url?: string | undefined;
        gatewayUrl?: string | undefined;
        updatedAt?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AttestationIpfs> = z
        .object({
            cid: z.string().optional(),
            url: z.string().optional(),
            gatewayUrl: z.string().optional(),
            updatedAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.cid === undefined ? null : { cid: v.cid }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.gatewayUrl === undefined ? null : { gatewayUrl: v.gatewayUrl }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });
}

/** @internal */
export namespace AttestationStorage$ {
    export type Inbound = {
        ipfs?: AttestationIpfs$.Inbound | undefined;
        status?: StorageStatus$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<AttestationStorage, z.ZodTypeDef, Inbound> = z
        .object({
            ipfs: z.lazy(() => AttestationIpfs$.inboundSchema).optional(),
            status: StorageStatus$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.ipfs === undefined ? null : { ipfs: v.ipfs }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });

    export type Outbound = {
        ipfs?: AttestationIpfs$.Outbound | undefined;
        status?: StorageStatus$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AttestationStorage> = z
        .object({
            ipfs: z.lazy(() => AttestationIpfs$.outboundSchema).optional(),
            status: StorageStatus$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.ipfs === undefined ? null : { ipfs: v.ipfs }),
                ...(v.status === undefined ? null : { status: v.status }),
            };
        });
}

/** @internal */
export namespace Attestation$ {
    export type Inbound = {
        id?: string | undefined;
        primaryType: PrimaryType;
        domain: Domain$.Inbound;
        message: Message$.Inbound;
        signature: string;
        createdAt?: number | undefined;
        signatureType?: SignatureType | undefined;
        storage?: AttestationStorage$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<Attestation, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            primaryType: PrimaryType$,
            domain: z.lazy(() => Domain$.inboundSchema),
            message: z.lazy(() => Message$.inboundSchema),
            signature: z.string(),
            createdAt: z.number().optional(),
            signatureType: SignatureType$.optional(),
            storage: z.lazy(() => AttestationStorage$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                primaryType: v.primaryType,
                domain: v.domain,
                message: v.message,
                signature: v.signature,
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.signatureType === undefined ? null : { signatureType: v.signatureType }),
                ...(v.storage === undefined ? null : { storage: v.storage }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        primaryType: PrimaryType;
        domain: Domain$.Outbound;
        message: Message$.Outbound;
        signature: string;
        createdAt?: number | undefined;
        signatureType?: SignatureType | undefined;
        storage?: AttestationStorage$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Attestation> = z
        .object({
            id: z.string().optional(),
            primaryType: PrimaryType$,
            domain: z.lazy(() => Domain$.outboundSchema),
            message: z.lazy(() => Message$.outboundSchema),
            signature: z.string(),
            createdAt: z.number().optional(),
            signatureType: SignatureType$.optional(),
            storage: z.lazy(() => AttestationStorage$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                primaryType: v.primaryType,
                domain: v.domain,
                message: v.message,
                signature: v.signature,
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.signatureType === undefined ? null : { signatureType: v.signatureType }),
                ...(v.storage === undefined ? null : { storage: v.storage }),
            };
        });
}
