/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import { StorageStatus, StorageStatus$ } from "./storagestatus";
import * as z from "zod";

/**
 * Video Metadata EIP-712 primaryType
 */
export enum PrimaryType {
    VideoAttestation = "VideoAttestation",
}

export enum Name {
    VerifiableVideo = "Verifiable Video",
}

export enum Version {
    One = "1",
}

/**
 * Video Metadata EIP-712 domain
 */
export type Domain = {
    name: Name;
    version: Version;
};

export type Attestations = {
    role: string;
    address: string;
};

/**
 * Video Metadata EIP-712 message content
 */
export type Message = {
    video: string;
    attestations: Array<Attestations>;
    signer: string;
    timestamp: number;
};

export enum SignatureType {
    Eip712 = "eip712",
    Flow = "flow",
}

export type AttestationIpfs = {
    dollarRef?: any | undefined;
    /**
     * Timestamp (in milliseconds) at which IPFS export task was updated
     *
     * @remarks
     *
     */
    updatedAt?: number | undefined;
};

export type AttestationStorage = {
    ipfs?: AttestationIpfs | undefined;
    status?: StorageStatus | undefined;
};

export type Attestation = {
    id?: string | undefined;
    /**
     * Video Metadata EIP-712 primaryType
     */
    primaryType: PrimaryType;
    /**
     * Video Metadata EIP-712 domain
     */
    domain: Domain;
    /**
     * Video Metadata EIP-712 message content
     */
    message: Message;
    /**
     * Video Metadata EIP-712 message signature
     */
    signature: string;
    /**
     * Timestamp (in milliseconds) at which the object was created
     */
    createdAt?: number | undefined;
    signatureType?: SignatureType | undefined;
    storage?: AttestationStorage | undefined;
};

/** @internal */
export namespace PrimaryType$ {
    export const inboundSchema = z.nativeEnum(PrimaryType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Name$ {
    export const inboundSchema = z.nativeEnum(Name);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Version$ {
    export const inboundSchema = z.nativeEnum(Version);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Domain$ {
    export const inboundSchema: z.ZodType<Domain, z.ZodTypeDef, unknown> = z.object({
        name: Name$.inboundSchema,
        version: Version$.inboundSchema,
    });

    export type Outbound = {
        name: string;
        version: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Domain> = z.object({
        name: Name$.outboundSchema,
        version: Version$.outboundSchema,
    });
}

/** @internal */
export namespace Attestations$ {
    export const inboundSchema: z.ZodType<Attestations, z.ZodTypeDef, unknown> = z.object({
        role: z.string(),
        address: z.string(),
    });

    export type Outbound = {
        role: string;
        address: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Attestations> = z.object({
        role: z.string(),
        address: z.string(),
    });
}

/** @internal */
export namespace Message$ {
    export const inboundSchema: z.ZodType<Message, z.ZodTypeDef, unknown> = z.object({
        video: z.string(),
        attestations: z.array(z.lazy(() => Attestations$.inboundSchema)),
        signer: z.string(),
        timestamp: z.number(),
    });

    export type Outbound = {
        video: string;
        attestations: Array<Attestations$.Outbound>;
        signer: string;
        timestamp: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Message> = z.object({
        video: z.string(),
        attestations: z.array(z.lazy(() => Attestations$.outboundSchema)),
        signer: z.string(),
        timestamp: z.number(),
    });
}

/** @internal */
export namespace SignatureType$ {
    export const inboundSchema = z.nativeEnum(SignatureType);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace AttestationIpfs$ {
    export const inboundSchema: z.ZodType<AttestationIpfs, z.ZodTypeDef, unknown> = z
        .object({
            $ref: z.any().optional(),
            updatedAt: z.number().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                $ref: "dollarRef",
            });
        });

    export type Outbound = {
        $ref?: any | undefined;
        updatedAt?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AttestationIpfs> = z
        .object({
            dollarRef: z.any().optional(),
            updatedAt: z.number().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                dollarRef: "$ref",
            });
        });
}

/** @internal */
export namespace AttestationStorage$ {
    export const inboundSchema: z.ZodType<AttestationStorage, z.ZodTypeDef, unknown> = z.object({
        ipfs: z.lazy(() => AttestationIpfs$.inboundSchema).optional(),
        status: StorageStatus$.inboundSchema.optional(),
    });

    export type Outbound = {
        ipfs?: AttestationIpfs$.Outbound | undefined;
        status?: StorageStatus$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AttestationStorage> = z.object({
        ipfs: z.lazy(() => AttestationIpfs$.outboundSchema).optional(),
        status: StorageStatus$.outboundSchema.optional(),
    });
}

/** @internal */
export namespace Attestation$ {
    export const inboundSchema: z.ZodType<Attestation, z.ZodTypeDef, unknown> = z.object({
        id: z.string().optional(),
        primaryType: PrimaryType$.inboundSchema,
        domain: z.lazy(() => Domain$.inboundSchema),
        message: z.lazy(() => Message$.inboundSchema),
        signature: z.string(),
        createdAt: z.number().optional(),
        signatureType: SignatureType$.inboundSchema.optional(),
        storage: z.lazy(() => AttestationStorage$.inboundSchema).optional(),
    });

    export type Outbound = {
        id?: string | undefined;
        primaryType: string;
        domain: Domain$.Outbound;
        message: Message$.Outbound;
        signature: string;
        createdAt?: number | undefined;
        signatureType?: string | undefined;
        storage?: AttestationStorage$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Attestation> = z.object({
        id: z.string().optional(),
        primaryType: PrimaryType$.outboundSchema,
        domain: z.lazy(() => Domain$.outboundSchema),
        message: z.lazy(() => Message$.outboundSchema),
        signature: z.string(),
        createdAt: z.number().optional(),
        signatureType: SignatureType$.outboundSchema.optional(),
        storage: z.lazy(() => AttestationStorage$.outboundSchema).optional(),
    });
}
