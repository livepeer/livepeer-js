/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { InputCreatorId, InputCreatorId$ } from "./inputcreatorid";
import { PlaybackPolicy, PlaybackPolicy$ } from "./playbackpolicy";
import { Spec, Spec$ } from "./spec";
import { z } from "zod";

export type Ipfs1 = {
    spec?: Spec | null | undefined;
};

/**
 * Set to true to make default export to IPFS. To customize the
 *
 * @remarks
 * pinned files, specify an object with a spec field. False or null
 * means to unpin from IPFS, but it's unsupported right now.
 *
 */
export type NewAssetPayloadIpfs = Ipfs1 | boolean;

export type NewAssetPayloadStorage = {
    /**
     * Set to true to make default export to IPFS. To customize the
     *
     * @remarks
     * pinned files, specify an object with a spec field. False or null
     * means to unpin from IPFS, but it's unsupported right now.
     *
     */
    ipfs?: Ipfs1 | boolean | null | undefined;
};

export type NewAssetPayloadEncryption = {
    /**
     * Encryption key used to encrypt the asset. Only writable in the upload asset endpoints and cannot be retrieved back.
     */
    encryptedKey: string;
};

export type NewAssetPayload = {
    /**
     * Name of the asset. This is not necessarily the filename, can be a
     *
     * @remarks
     * custom name or title
     *
     */
    name: string;
    /**
     * Whether to generate MP4s for the asset.
     */
    staticMp4?: boolean | undefined;
    /**
     * Whether the playback policy for a asset or stream is public or signed
     */
    playbackPolicy?: PlaybackPolicy | undefined;
    creatorId?: InputCreatorId | undefined;
    storage?: NewAssetPayloadStorage | undefined;
    /**
     * URL where the asset contents can be retrieved. Only allowed (and
     *
     * @remarks
     * also required) in the upload asset via URL endpoint.
     *
     */
    url?: string | undefined;
    encryption?: NewAssetPayloadEncryption | undefined;
};

/** @internal */
export namespace Ipfs1$ {
    export type Inbound = {
        spec?: Spec$.Inbound | null | undefined;
    };

    export const inboundSchema: z.ZodType<Ipfs1, z.ZodTypeDef, Inbound> = z
        .object({
            spec: z.nullable(Spec$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.spec === undefined ? null : { spec: v.spec }),
            };
        });

    export type Outbound = {
        spec?: Spec$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Ipfs1> = z
        .object({
            spec: z.nullable(Spec$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.spec === undefined ? null : { spec: v.spec }),
            };
        });
}

/** @internal */
export namespace NewAssetPayloadIpfs$ {
    export type Inbound = Ipfs1$.Inbound | boolean;

    export type Outbound = Ipfs1$.Outbound | boolean;

    export const inboundSchema: z.ZodType<NewAssetPayloadIpfs, z.ZodTypeDef, Inbound> = z.union([
        z.lazy(() => Ipfs1$.inboundSchema),
        z.boolean(),
    ]);

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NewAssetPayloadIpfs> = z.union([
        z.lazy(() => Ipfs1$.outboundSchema),
        z.boolean(),
    ]);
}

/** @internal */
export namespace NewAssetPayloadStorage$ {
    export type Inbound = {
        ipfs?: Ipfs1$.Inbound | boolean | null | undefined;
    };

    export const inboundSchema: z.ZodType<NewAssetPayloadStorage, z.ZodTypeDef, Inbound> = z
        .object({
            ipfs: z.nullable(z.union([z.lazy(() => Ipfs1$.inboundSchema), z.boolean()])).optional(),
        })
        .transform((v) => {
            return {
                ...(v.ipfs === undefined ? null : { ipfs: v.ipfs }),
            };
        });

    export type Outbound = {
        ipfs?: Ipfs1$.Outbound | boolean | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NewAssetPayloadStorage> = z
        .object({
            ipfs: z
                .nullable(z.union([z.lazy(() => Ipfs1$.outboundSchema), z.boolean()]))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.ipfs === undefined ? null : { ipfs: v.ipfs }),
            };
        });
}

/** @internal */
export namespace NewAssetPayloadEncryption$ {
    export type Inbound = {
        encryptedKey: string;
    };

    export const inboundSchema: z.ZodType<NewAssetPayloadEncryption, z.ZodTypeDef, Inbound> = z
        .object({
            encryptedKey: z.string(),
        })
        .transform((v) => {
            return {
                encryptedKey: v.encryptedKey,
            };
        });

    export type Outbound = {
        encryptedKey: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NewAssetPayloadEncryption> = z
        .object({
            encryptedKey: z.string(),
        })
        .transform((v) => {
            return {
                encryptedKey: v.encryptedKey,
            };
        });
}

/** @internal */
export namespace NewAssetPayload$ {
    export type Inbound = {
        name: string;
        staticMp4?: boolean | undefined;
        playbackPolicy?: PlaybackPolicy$.Inbound | undefined;
        creatorId?: InputCreatorId$.Inbound | undefined;
        storage?: NewAssetPayloadStorage$.Inbound | undefined;
        url?: string | undefined;
        encryption?: NewAssetPayloadEncryption$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<NewAssetPayload, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string(),
            staticMp4: z.boolean().optional(),
            playbackPolicy: PlaybackPolicy$.inboundSchema.optional(),
            creatorId: InputCreatorId$.inboundSchema.optional(),
            storage: z.lazy(() => NewAssetPayloadStorage$.inboundSchema).optional(),
            url: z.string().optional(),
            encryption: z.lazy(() => NewAssetPayloadEncryption$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                ...(v.staticMp4 === undefined ? null : { staticMp4: v.staticMp4 }),
                ...(v.playbackPolicy === undefined ? null : { playbackPolicy: v.playbackPolicy }),
                ...(v.creatorId === undefined ? null : { creatorId: v.creatorId }),
                ...(v.storage === undefined ? null : { storage: v.storage }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.encryption === undefined ? null : { encryption: v.encryption }),
            };
        });

    export type Outbound = {
        name: string;
        staticMp4?: boolean | undefined;
        playbackPolicy?: PlaybackPolicy$.Outbound | undefined;
        creatorId?: InputCreatorId$.Outbound | undefined;
        storage?: NewAssetPayloadStorage$.Outbound | undefined;
        url?: string | undefined;
        encryption?: NewAssetPayloadEncryption$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, NewAssetPayload> = z
        .object({
            name: z.string(),
            staticMp4: z.boolean().optional(),
            playbackPolicy: PlaybackPolicy$.outboundSchema.optional(),
            creatorId: InputCreatorId$.outboundSchema.optional(),
            storage: z.lazy(() => NewAssetPayloadStorage$.outboundSchema).optional(),
            url: z.string().optional(),
            encryption: z.lazy(() => NewAssetPayloadEncryption$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                ...(v.staticMp4 === undefined ? null : { staticMp4: v.staticMp4 }),
                ...(v.playbackPolicy === undefined ? null : { playbackPolicy: v.playbackPolicy }),
                ...(v.creatorId === undefined ? null : { creatorId: v.creatorId }),
                ...(v.storage === undefined ? null : { storage: v.storage }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.encryption === undefined ? null : { encryption: v.encryption }),
            };
        });
}
