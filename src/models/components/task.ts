/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../internal/utils";
import { Encryption } from "./encryption";
import { EncryptionOutput } from "./encryptionoutput";
import { FfmpegProfile } from "./ffmpegprofile";
import { IpfsExportParams } from "./ipfsexportparams";
import { Upload } from "./upload";
import { UploadOutput } from "./uploadoutput";
import { Expose, Type } from "class-transformer";

/**
 * Type of the task
 */
export enum TaskType {
    Upload = "upload",
    Import = "import",
    Export = "export",
    ExportData = "export-data",
    Transcode = "transcode",
    TranscodeFile = "transcode-file",
    Clip = "clip",
}

/**
 * Parameters for the upload task
 */
export class TaskUploadOutput extends SpeakeasyBase {
    /**
     * URL of the asset to "upload"
     */
    @SpeakeasyMetadata()
    @Expose({ name: "url" })
    url?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "encryption" })
    @Type(() => EncryptionOutput)
    encryption?: EncryptionOutput;

    /**
     * ID of the original recorded session to avoid re-transcoding
     *
     * @remarks
     * of the same content. Only used for import task.
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "recordedSessionId" })
    recordedSessionId?: string;
}

/**
 * File content to store into IPFS
 */
export class Content extends SpeakeasyBase {}

/**
 * Parameters for the export-data task
 */
export class ExportData extends SpeakeasyBase {
    /**
     * File content to store into IPFS
     */
    @SpeakeasyMetadata()
    @Expose({ name: "content" })
    @Type(() => Content)
    content: Content;

    @SpeakeasyMetadata()
    @Expose({ name: "ipfs" })
    @Type(() => IpfsExportParams)
    ipfs?: IpfsExportParams;

    /**
     * Optional type of content
     */
    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type?: string;

    /**
     * Optional ID of the content
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;
}

/**
 * Parameters for the transcode task
 */
export class Transcode extends SpeakeasyBase {
    /**
     * LMPS ffmpeg profile
     */
    @SpeakeasyMetadata()
    @Expose({ name: "profile" })
    @Type(() => FfmpegProfile)
    profile?: FfmpegProfile;
}

/**
 * Input video file to transcode
 */
export class Input extends SpeakeasyBase {
    /**
     * URL of a video to transcode, accepts object-store format
     *
     * @remarks
     * "s3+https"
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "url" })
    url?: string;
}

/**
 * Storage for the output files
 */
export class TaskStorage extends SpeakeasyBase {
    /**
     * URL of the output storage, accepts object-store format
     *
     * @remarks
     * "s3+https"
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "url" })
    url?: string;
}

/**
 * HLS output format
 */
export class Hls extends SpeakeasyBase {
    /**
     * Path for the HLS output
     */
    @SpeakeasyMetadata()
    @Expose({ name: "path" })
    path?: string;
}

/**
 * MP4 output format
 */
export class Mp4 extends SpeakeasyBase {
    /**
     * Path for the MP4 output
     */
    @SpeakeasyMetadata()
    @Expose({ name: "path" })
    path?: string;
}

/**
 * Output formats
 */
export class Outputs extends SpeakeasyBase {
    /**
     * HLS output format
     */
    @SpeakeasyMetadata()
    @Expose({ name: "hls" })
    @Type(() => Hls)
    hls?: Hls;

    /**
     * MP4 output format
     */
    @SpeakeasyMetadata()
    @Expose({ name: "mp4" })
    @Type(() => Mp4)
    mp4?: Mp4;
}

/**
 * Parameters for the transcode-file task
 */
export class TranscodeFile extends SpeakeasyBase {
    /**
     * Input video file to transcode
     */
    @SpeakeasyMetadata()
    @Expose({ name: "input" })
    @Type(() => Input)
    input?: Input;

    /**
     * Storage for the output files
     */
    @SpeakeasyMetadata()
    @Expose({ name: "storage" })
    @Type(() => TaskStorage)
    storage?: TaskStorage;

    /**
     * Output formats
     */
    @SpeakeasyMetadata()
    @Expose({ name: "outputs" })
    @Type(() => Outputs)
    outputs?: Outputs;

    @SpeakeasyMetadata({ elemType: FfmpegProfile })
    @Expose({ name: "profiles" })
    @Type(() => FfmpegProfile)
    profiles?: FfmpegProfile[];

    /**
     * How many seconds the duration of each output segment should
     *
     * @remarks
     * be
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "targetSegmentSizeSecs" })
    targetSegmentSizeSecs?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "creatorId" })
    creatorId?: any;
}

/**
 * Parameters of the task
 */
export class TaskParams extends SpeakeasyBase {
    /**
     * Parameters for the upload task
     */
    @SpeakeasyMetadata()
    @Expose({ name: "upload" })
    @Type(() => TaskUploadOutput)
    upload?: TaskUploadOutput;

    /**
     * Parameters for the upload task
     */
    @SpeakeasyMetadata()
    @Expose({ name: "import" })
    @Type(() => UploadOutput)
    import?: UploadOutput;

    /**
     * Parameters for the export task
     */
    @SpeakeasyMetadata()
    @Expose({ name: "export" })
    export?: any;

    /**
     * Parameters for the export-data task
     */
    @SpeakeasyMetadata()
    @Expose({ name: "exportData" })
    @Type(() => ExportData)
    exportData?: ExportData;

    /**
     * Parameters for the transcode task
     */
    @SpeakeasyMetadata()
    @Expose({ name: "transcode" })
    @Type(() => Transcode)
    transcode?: Transcode;

    /**
     * Parameters for the transcode-file task
     */
    @SpeakeasyMetadata()
    @Expose({ name: "transcode-file" })
    @Type(() => TranscodeFile)
    transcodeFile?: TranscodeFile;
}

/**
 * Strategy to use for clipping the asset. If not specified, the default strategy that Catalyst is configured for will be used. This field only available for admin users, and is only used for E2E testing.
 */
export class ClipStrategy extends SpeakeasyBase {
    /**
     * Start time of the clip in milliseconds
     */
    @SpeakeasyMetadata()
    @Expose({ name: "startTime" })
    startTime?: number;

    /**
     * End time of the clip in milliseconds
     */
    @SpeakeasyMetadata()
    @Expose({ name: "endTime" })
    endTime?: number;

    /**
     * Playback ID of the stream or asset to clip
     */
    @SpeakeasyMetadata()
    @Expose({ name: "playbackId" })
    playbackId?: string;
}

/**
 * Force to use a specific strategy in the Catalyst pipeline. If not specified, the default strategy that Catalyst is configured for will be used. This field only available for admin users, and is only used for E2E testing.
 */
export enum CatalystPipelineStrategy {
    Catalyst = "catalyst",
    CatalystFfmpeg = "catalyst_ffmpeg",
    BackgroundExternal = "background_external",
    BackgroundMist = "background_mist",
    FallbackExternal = "fallback_external",
    External = "external",
}

export class Clip extends SpeakeasyBase {
    /**
     * URL of the asset to "clip"
     */
    @SpeakeasyMetadata()
    @Expose({ name: "url" })
    url?: string;

    /**
     * Strategy to use for clipping the asset. If not specified, the default strategy that Catalyst is configured for will be used. This field only available for admin users, and is only used for E2E testing.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "clipStrategy" })
    @Type(() => ClipStrategy)
    clipStrategy?: ClipStrategy;

    /**
     * Force to use a specific strategy in the Catalyst pipeline. If not specified, the default strategy that Catalyst is configured for will be used. This field only available for admin users, and is only used for E2E testing.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "catalystPipelineStrategy" })
    catalystPipelineStrategy?: CatalystPipelineStrategy;

    /**
     * ID of the session
     */
    @SpeakeasyMetadata()
    @Expose({ name: "sessionId" })
    sessionId?: string;

    /**
     * ID of the input asset or stream
     */
    @SpeakeasyMetadata()
    @Expose({ name: "inputId" })
    inputId?: string;
}

/**
 * Phase of the task
 */
export enum TaskPhase {
    Pending = "pending",
    Waiting = "waiting",
    Running = "running",
    Failed = "failed",
    Completed = "completed",
    Cancelled = "cancelled",
}

/**
 * Status of the task
 */
export class TaskStatus extends SpeakeasyBase {
    /**
     * Phase of the task
     */
    @SpeakeasyMetadata()
    @Expose({ name: "phase" })
    phase: TaskPhase;

    /**
     * Timestamp (in milliseconds) at which task was updated
     */
    @SpeakeasyMetadata()
    @Expose({ name: "updatedAt" })
    updatedAt: number;

    /**
     * Current progress of the task in a 0-1 ratio
     */
    @SpeakeasyMetadata()
    @Expose({ name: "progress" })
    progress?: number;

    /**
     * Error message if the task failed
     */
    @SpeakeasyMetadata()
    @Expose({ name: "errorMessage" })
    errorMessage?: string;

    /**
     * Number of retries done on the task
     */
    @SpeakeasyMetadata()
    @Expose({ name: "retries" })
    retries?: number;
}

export class TaskIpfs extends SpeakeasyBase {
    /**
     * IPFS CID of the exported video file
     */
    @SpeakeasyMetadata()
    @Expose({ name: "videoFileCid" })
    videoFileCid: string;

    /**
     * URL for the file with the IPFS protocol
     */
    @SpeakeasyMetadata()
    @Expose({ name: "videoFileUrl" })
    videoFileUrl?: string;

    /**
     * URL to access file via HTTP through an IPFS gateway
     */
    @SpeakeasyMetadata()
    @Expose({ name: "videoFileGatewayUrl" })
    videoFileGatewayUrl?: string;

    /**
     * IPFS CID of the default metadata exported for the video
     */
    @SpeakeasyMetadata()
    @Expose({ name: "nftMetadataCid" })
    nftMetadataCid?: string;

    /**
     * URL for the metadata file with the IPFS protocol
     */
    @SpeakeasyMetadata()
    @Expose({ name: "nftMetadataUrl" })
    nftMetadataUrl?: string;

    /**
     * URL to access metadata file via HTTP through an IPFS
     *
     * @remarks
     * gateway
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "nftMetadataGatewayUrl" })
    nftMetadataGatewayUrl?: string;
}

/**
 * Output of the export task
 */
export class Export extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "ipfs" })
    @Type(() => TaskIpfs)
    ipfs?: TaskIpfs;
}

export class TaskSchemasIpfs extends SpeakeasyBase {
    /**
     * IPFS CID of the exported data
     */
    @SpeakeasyMetadata()
    @Expose({ name: "cid" })
    cid: string;
}

/**
 * Output of the export data task
 */
export class TaskExportData extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "ipfs" })
    @Type(() => TaskSchemasIpfs)
    ipfs?: TaskSchemasIpfs;
}

export class TaskTranscode extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "asset" })
    asset?: Record<string, any>;
}

/**
 * Output of the task
 */
export class Output extends SpeakeasyBase {
    /**
     * Output of the upload task
     */
    @SpeakeasyMetadata()
    @Expose({ name: "upload" })
    upload?: Record<string, any>;

    /**
     * Output of the upload task
     */
    @SpeakeasyMetadata()
    @Expose({ name: "import" })
    import?: Record<string, any>;

    /**
     * Output of the export task
     */
    @SpeakeasyMetadata()
    @Expose({ name: "export" })
    @Type(() => Export)
    export?: Export;

    /**
     * Output of the export data task
     */
    @SpeakeasyMetadata()
    @Expose({ name: "exportData" })
    @Type(() => TaskExportData)
    exportData?: TaskExportData;

    @SpeakeasyMetadata()
    @Expose({ name: "transcode" })
    @Type(() => TaskTranscode)
    transcode?: TaskTranscode;
}

export class Task extends SpeakeasyBase {
    /**
     * Task ID
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    /**
     * Type of the task
     */
    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type?: TaskType;

    /**
     * Timestamp (in milliseconds) at which task was created
     */
    @SpeakeasyMetadata()
    @Expose({ name: "createdAt" })
    createdAt?: number;

    /**
     * Timestamp (in milliseconds) at which the task was scheduled for
     *
     * @remarks
     * execution (e.g. after file upload finished).
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "scheduledAt" })
    scheduledAt?: number;

    /**
     * ID of the input asset
     */
    @SpeakeasyMetadata()
    @Expose({ name: "inputAssetId" })
    inputAssetId?: string;

    /**
     * ID of the output asset
     */
    @SpeakeasyMetadata()
    @Expose({ name: "outputAssetId" })
    outputAssetId?: string;

    /**
     * Parameters of the task
     */
    @SpeakeasyMetadata()
    @Expose({ name: "params" })
    @Type(() => TaskParams)
    params?: TaskParams;

    @SpeakeasyMetadata()
    @Expose({ name: "clip" })
    @Type(() => Clip)
    clip?: Clip;

    /**
     * Status of the task
     */
    @SpeakeasyMetadata()
    @Expose({ name: "status" })
    @Type(() => TaskStatus)
    status?: TaskStatus;

    /**
     * Output of the task
     */
    @SpeakeasyMetadata()
    @Expose({ name: "output" })
    @Type(() => Output)
    output?: Output;
}

/**
 * Parameters for the upload task
 */
export class TaskUpload extends SpeakeasyBase {
    /**
     * URL of the asset to "upload"
     */
    @SpeakeasyMetadata()
    @Expose({ name: "url" })
    url?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "encryption" })
    @Type(() => Encryption)
    encryption?: Encryption;

    /**
     * ID of the original recorded session to avoid re-transcoding
     *
     * @remarks
     * of the same content. Only used for import task.
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "recordedSessionId" })
    recordedSessionId?: string;
}

/**
 * Parameters of the task
 */
export class Params extends SpeakeasyBase {
    /**
     * Parameters for the upload task
     */
    @SpeakeasyMetadata()
    @Expose({ name: "upload" })
    @Type(() => TaskUpload)
    upload?: TaskUpload;

    /**
     * Parameters for the upload task
     */
    @SpeakeasyMetadata()
    @Expose({ name: "import" })
    @Type(() => Upload)
    import?: Upload;

    /**
     * Parameters for the export task
     */
    @SpeakeasyMetadata()
    @Expose({ name: "export" })
    export?: any;

    /**
     * Parameters for the export-data task
     */
    @SpeakeasyMetadata()
    @Expose({ name: "exportData" })
    @Type(() => ExportData)
    exportData?: ExportData;

    /**
     * Parameters for the transcode task
     */
    @SpeakeasyMetadata()
    @Expose({ name: "transcode" })
    @Type(() => Transcode)
    transcode?: Transcode;

    /**
     * Parameters for the transcode-file task
     */
    @SpeakeasyMetadata()
    @Expose({ name: "transcode-file" })
    @Type(() => TranscodeFile)
    transcodeFile?: TranscodeFile;
}

export class TaskIpfsInput extends SpeakeasyBase {
    /**
     * IPFS CID of the exported video file
     */
    @SpeakeasyMetadata()
    @Expose({ name: "videoFileCid" })
    videoFileCid: string;

    /**
     * IPFS CID of the default metadata exported for the video
     */
    @SpeakeasyMetadata()
    @Expose({ name: "nftMetadataCid" })
    nftMetadataCid?: string;
}

/**
 * Output of the export task
 */
export class TaskExport extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "ipfs" })
    @Type(() => TaskIpfsInput)
    ipfs?: TaskIpfsInput;
}

/**
 * Output of the task
 */
export class TaskOutput extends SpeakeasyBase {
    /**
     * Output of the upload task
     */
    @SpeakeasyMetadata()
    @Expose({ name: "upload" })
    upload?: Record<string, any>;

    /**
     * Output of the upload task
     */
    @SpeakeasyMetadata()
    @Expose({ name: "import" })
    import?: Record<string, any>;

    /**
     * Output of the export task
     */
    @SpeakeasyMetadata()
    @Expose({ name: "export" })
    @Type(() => TaskExport)
    export?: TaskExport;

    /**
     * Output of the export data task
     */
    @SpeakeasyMetadata()
    @Expose({ name: "exportData" })
    @Type(() => TaskExportData)
    exportData?: TaskExportData;

    @SpeakeasyMetadata()
    @Expose({ name: "transcode" })
    @Type(() => TaskTranscode)
    transcode?: TaskTranscode;
}

export class TaskInput extends SpeakeasyBase {
    /**
     * Type of the task
     */
    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type?: TaskType;

    /**
     * ID of the input asset
     */
    @SpeakeasyMetadata()
    @Expose({ name: "inputAssetId" })
    inputAssetId?: string;

    /**
     * ID of the output asset
     */
    @SpeakeasyMetadata()
    @Expose({ name: "outputAssetId" })
    outputAssetId?: string;

    /**
     * Parameters of the task
     */
    @SpeakeasyMetadata()
    @Expose({ name: "params" })
    @Type(() => Params)
    params?: Params;

    @SpeakeasyMetadata()
    @Expose({ name: "clip" })
    @Type(() => Clip)
    clip?: Clip;

    /**
     * Output of the task
     */
    @SpeakeasyMetadata()
    @Expose({ name: "output" })
    @Type(() => TaskOutput)
    output?: TaskOutput;
}
