/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Asset, Asset$, AssetInput, AssetInput$ } from "./asset";
import { Encryption, Encryption$ } from "./encryption";
import { EncryptionOutput, EncryptionOutput$ } from "./encryptionoutput";
import {
    ExportTaskParams,
    ExportTaskParams$,
    ExportTaskParamsOutput,
    ExportTaskParamsOutput$,
} from "./exporttaskparamsoutput";
import { FfmpegProfile, FfmpegProfile$ } from "./ffmpegprofile";
import { InputCreatorId, InputCreatorId$ } from "./inputcreatorid";
import { IpfsExportParams, IpfsExportParams$ } from "./ipfsexportparams";
import { IpfsExportParamsOutput, IpfsExportParamsOutput$ } from "./ipfsexportparamsoutput";
import { Upload, Upload$ } from "./upload";
import { UploadInput, UploadInput$ } from "./uploadinput";
import { UploadOutput, UploadOutput$ } from "./uploadoutput";
import { UploadOutput1, UploadOutput1$ } from "./uploadoutput1";
import { z } from "zod";

/**
 * Type of the task
 */
export enum TaskType {
    Upload = "upload",
    Import = "import",
    Export = "export",
    ExportData = "export-data",
    Transcode = "transcode",
    TranscodeFile = "transcode-file",
    Clip = "clip",
}

/**
 * Parameters for the upload task
 */
export type TaskParamsUploadOutput = {
    /**
     * URL of the asset to "upload"
     */
    url?: string | undefined;
    encryption?: EncryptionOutput | undefined;
    /**
     * ID of the original recorded session to avoid re-transcoding
     *
     * @remarks
     * of the same content. Only used for import task.
     *
     */
    recordedSessionId?: string | undefined;
};

/**
 * File content to store into IPFS
 */
export type Content = {};

/**
 * Parameters for the export-data task
 */
export type TaskExportDataOutput = {
    /**
     * File content to store into IPFS
     */
    content: Content;
    ipfs?: IpfsExportParamsOutput | undefined;
    /**
     * Optional type of content
     */
    type?: string | undefined;
    /**
     * Optional ID of the content
     */
    id?: string | undefined;
};

/**
 * Parameters for the transcode task
 */
export type Transcode = {
    /**
     * LMPS ffmpeg profile
     */
    profile?: FfmpegProfile | undefined;
};

/**
 * Input video file to transcode
 */
export type Input = {
    /**
     * URL of a video to transcode, accepts object-store format
     *
     * @remarks
     * "s3+https"
     *
     */
    url?: string | undefined;
};

/**
 * Storage for the output files
 */
export type TaskStorage = {
    /**
     * URL of the output storage, accepts object-store format
     *
     * @remarks
     * "s3+https"
     *
     */
    url?: string | undefined;
};

/**
 * HLS output format
 */
export type Hls = {
    /**
     * Path for the HLS output
     */
    path?: string | undefined;
};

/**
 * MP4 output format
 */
export type Mp4 = {
    /**
     * Path for the MP4 output
     */
    path?: string | undefined;
};

/**
 * Output formats
 */
export type Outputs = {
    /**
     * HLS output format
     */
    hls?: Hls | undefined;
    /**
     * MP4 output format
     */
    mp4?: Mp4 | undefined;
};

/**
 * Parameters for the transcode-file task
 */
export type TranscodeFile = {
    /**
     * Input video file to transcode
     */
    input?: Input | undefined;
    /**
     * Storage for the output files
     */
    storage?: TaskStorage | undefined;
    /**
     * Output formats
     */
    outputs?: Outputs | undefined;
    profiles?: Array<FfmpegProfile> | undefined;
    /**
     * How many seconds the duration of each output segment should
     *
     * @remarks
     * be
     *
     */
    targetSegmentSizeSecs?: number | undefined;
    creatorId?: InputCreatorId | undefined;
};

/**
 * Parameters of the task
 */
export type TaskParams = {
    /**
     * Parameters for the upload task
     */
    upload?: TaskParamsUploadOutput | undefined;
    /**
     * Parameters for the upload task
     */
    import?: UploadOutput1 | undefined;
    /**
     * Parameters for the export task
     */
    export?: ExportTaskParamsOutput | undefined;
    /**
     * Parameters for the export-data task
     */
    exportData?: TaskExportDataOutput | undefined;
    /**
     * Parameters for the transcode task
     */
    transcode?: Transcode | undefined;
    /**
     * Parameters for the transcode-file task
     */
    transcodeFile?: TranscodeFile | undefined;
};

/**
 * Strategy to use for clipping the asset. If not specified, the default strategy that Catalyst is configured for will be used. This field only available for admin users, and is only used for E2E testing.
 */
export type ClipStrategy = {
    /**
     * Start time of the clip in milliseconds
     */
    startTime?: number | undefined;
    /**
     * End time of the clip in milliseconds
     */
    endTime?: number | undefined;
    /**
     * Playback ID of the stream or asset to clip
     */
    playbackId?: string | undefined;
};

/**
 * Force to use a specific strategy in the Catalyst pipeline. If not specified, the default strategy that Catalyst is configured for will be used. This field only available for admin users, and is only used for E2E testing.
 */
export enum CatalystPipelineStrategy {
    Catalyst = "catalyst",
    CatalystFfmpeg = "catalyst_ffmpeg",
    BackgroundExternal = "background_external",
    BackgroundMist = "background_mist",
    FallbackExternal = "fallback_external",
    External = "external",
}

export type Clip = {
    /**
     * URL of the asset to "clip"
     */
    url?: string | undefined;
    /**
     * Strategy to use for clipping the asset. If not specified, the default strategy that Catalyst is configured for will be used. This field only available for admin users, and is only used for E2E testing.
     */
    clipStrategy?: ClipStrategy | undefined;
    /**
     * Force to use a specific strategy in the Catalyst pipeline. If not specified, the default strategy that Catalyst is configured for will be used. This field only available for admin users, and is only used for E2E testing.
     */
    catalystPipelineStrategy?: CatalystPipelineStrategy | undefined;
    /**
     * ID of the session
     */
    sessionId?: string | undefined;
    /**
     * ID of the input asset or stream
     */
    inputId?: string | undefined;
};

/**
 * Phase of the task
 */
export enum TaskPhase {
    Pending = "pending",
    Waiting = "waiting",
    Running = "running",
    Failed = "failed",
    Completed = "completed",
    Cancelled = "cancelled",
}

/**
 * Status of the task
 */
export type TaskStatus = {
    /**
     * Phase of the task
     */
    phase: TaskPhase;
    /**
     * Timestamp (in milliseconds) at which task was updated
     */
    updatedAt: number;
    /**
     * Current progress of the task in a 0-1 ratio
     */
    progress?: number | undefined;
    /**
     * Error message if the task failed
     */
    errorMessage?: string | undefined;
    /**
     * Number of retries done on the task
     */
    retries?: number | undefined;
};

/**
 * Output of the upload task
 */
export type TaskUploadOutput = {
    assetSpec?: Asset | undefined;
    additionalProperties: Record<string, any>;
};

export type TaskIpfs = {
    /**
     * IPFS CID of the exported video file
     */
    videoFileCid: string;
    /**
     * URL for the file with the IPFS protocol
     */
    videoFileUrl?: string | undefined;
    /**
     * URL to access file via HTTP through an IPFS gateway
     */
    videoFileGatewayUrl?: string | undefined;
    /**
     * IPFS CID of the default metadata exported for the video
     */
    nftMetadataCid?: string | undefined;
    /**
     * URL for the metadata file with the IPFS protocol
     */
    nftMetadataUrl?: string | undefined;
    /**
     * URL to access metadata file via HTTP through an IPFS
     *
     * @remarks
     * gateway
     *
     */
    nftMetadataGatewayUrl?: string | undefined;
};

/**
 * Output of the export task
 */
export type Export = {
    ipfs?: TaskIpfs | undefined;
};

export type TaskOutputIpfs = {
    /**
     * IPFS CID of the exported data
     */
    cid: string;
};

/**
 * Output of the export data task
 */
export type ExportData = {
    ipfs?: TaskOutputIpfs | undefined;
};

export type TaskAsset = {
    videoFilePath?: string | undefined;
    metadataFilePath?: string | undefined;
    assetSpec?: Asset | undefined;
    additionalProperties: Record<string, any>;
};

export type TaskTranscode = {
    asset?: TaskAsset | undefined;
};

/**
 * Output of the task
 */
export type Output = {
    /**
     * Output of the upload task
     */
    upload?: TaskUploadOutput | undefined;
    /**
     * Output of the upload task
     */
    import?: UploadOutput | undefined;
    /**
     * Output of the export task
     */
    export?: Export | undefined;
    /**
     * Output of the export data task
     */
    exportData?: ExportData | undefined;
    transcode?: TaskTranscode | undefined;
};

export type Task = {
    /**
     * Task ID
     */
    id?: string | undefined;
    /**
     * Type of the task
     */
    type?: TaskType | undefined;
    /**
     * Timestamp (in milliseconds) at which task was created
     */
    createdAt?: number | undefined;
    /**
     * Timestamp (in milliseconds) at which the task was scheduled for
     *
     * @remarks
     * execution (e.g. after file upload finished).
     *
     */
    scheduledAt?: number | undefined;
    /**
     * ID of the input asset
     */
    inputAssetId?: string | undefined;
    /**
     * ID of the output asset
     */
    outputAssetId?: string | undefined;
    /**
     * Parameters of the task
     */
    params?: TaskParams | undefined;
    clip?: Clip | undefined;
    /**
     * Status of the task
     */
    status?: TaskStatus | undefined;
    /**
     * Output of the task
     */
    output?: Output | undefined;
};

/**
 * Parameters for the upload task
 */
export type TaskUpload = {
    /**
     * URL of the asset to "upload"
     */
    url?: string | undefined;
    encryption?: Encryption | undefined;
    /**
     * ID of the original recorded session to avoid re-transcoding
     *
     * @remarks
     * of the same content. Only used for import task.
     *
     */
    recordedSessionId?: string | undefined;
};

/**
 * Parameters for the export-data task
 */
export type TaskExportData = {
    /**
     * File content to store into IPFS
     */
    content: Content;
    ipfs?: IpfsExportParams | undefined;
    /**
     * Optional type of content
     */
    type?: string | undefined;
    /**
     * Optional ID of the content
     */
    id?: string | undefined;
};

/**
 * Parameters of the task
 */
export type Params = {
    /**
     * Parameters for the upload task
     */
    upload?: TaskUpload | undefined;
    /**
     * Parameters for the upload task
     */
    import?: Upload | undefined;
    /**
     * Parameters for the export task
     */
    export?: ExportTaskParams | undefined;
    /**
     * Parameters for the export-data task
     */
    exportData?: TaskExportData | undefined;
    /**
     * Parameters for the transcode task
     */
    transcode?: Transcode | undefined;
    /**
     * Parameters for the transcode-file task
     */
    transcodeFile?: TranscodeFile | undefined;
};

/**
 * Output of the upload task
 */
export type TaskUploadInput = {
    videoFilePath?: string | undefined;
    metadataFilePath?: string | undefined;
    assetSpec?: AssetInput | undefined;
    additionalProperties: Record<string, any>;
};

export type TaskIpfsInput = {
    /**
     * IPFS CID of the exported video file
     */
    videoFileCid: string;
    /**
     * IPFS CID of the default metadata exported for the video
     */
    nftMetadataCid?: string | undefined;
};

/**
 * Output of the export task
 */
export type TaskExport = {
    ipfs?: TaskIpfsInput | undefined;
};

export type TaskAssetInput = {
    videoFilePath?: string | undefined;
    metadataFilePath?: string | undefined;
    assetSpec?: AssetInput | undefined;
    additionalProperties: Record<string, any>;
};

export type TaskTranscodeInput = {
    asset?: TaskAssetInput | undefined;
};

/**
 * Output of the task
 */
export type TaskOutput = {
    /**
     * Output of the upload task
     */
    upload?: TaskUploadInput | undefined;
    /**
     * Output of the upload task
     */
    import?: UploadInput | undefined;
    /**
     * Output of the export task
     */
    export?: TaskExport | undefined;
    /**
     * Output of the export data task
     */
    exportData?: ExportData | undefined;
    transcode?: TaskTranscodeInput | undefined;
};

export type TaskInput = {
    /**
     * Type of the task
     */
    type?: TaskType | undefined;
    /**
     * ID of the input asset
     */
    inputAssetId?: string | undefined;
    /**
     * ID of the output asset
     */
    outputAssetId?: string | undefined;
    /**
     * Parameters of the task
     */
    params?: Params | undefined;
    clip?: Clip | undefined;
    /**
     * Output of the task
     */
    output?: TaskOutput | undefined;
};

/** @internal */
export const TaskType$ = z.nativeEnum(TaskType);

/** @internal */
export namespace TaskParamsUploadOutput$ {
    export type Inbound = {
        url?: string | undefined;
        encryption?: EncryptionOutput$.Inbound | undefined;
        recordedSessionId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<TaskParamsUploadOutput, z.ZodTypeDef, Inbound> = z
        .object({
            url: z.string().optional(),
            encryption: EncryptionOutput$.inboundSchema.optional(),
            recordedSessionId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.encryption === undefined ? null : { encryption: v.encryption }),
                ...(v.recordedSessionId === undefined
                    ? null
                    : { recordedSessionId: v.recordedSessionId }),
            };
        });

    export type Outbound = {
        url?: string | undefined;
        encryption?: EncryptionOutput$.Outbound | undefined;
        recordedSessionId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskParamsUploadOutput> = z
        .object({
            url: z.string().optional(),
            encryption: EncryptionOutput$.outboundSchema.optional(),
            recordedSessionId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.encryption === undefined ? null : { encryption: v.encryption }),
                ...(v.recordedSessionId === undefined
                    ? null
                    : { recordedSessionId: v.recordedSessionId }),
            };
        });
}

/** @internal */
export namespace Content$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Content, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Content> = z.object({});
}

/** @internal */
export namespace TaskExportDataOutput$ {
    export type Inbound = {
        content: Content$.Inbound;
        ipfs?: IpfsExportParamsOutput$.Inbound | undefined;
        type?: string | undefined;
        id?: string | undefined;
    };

    export const inboundSchema: z.ZodType<TaskExportDataOutput, z.ZodTypeDef, Inbound> = z
        .object({
            content: z.lazy(() => Content$.inboundSchema),
            ipfs: IpfsExportParamsOutput$.inboundSchema.optional(),
            type: z.string().optional(),
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                content: v.content,
                ...(v.ipfs === undefined ? null : { ipfs: v.ipfs }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });

    export type Outbound = {
        content: Content$.Outbound;
        ipfs?: IpfsExportParamsOutput$.Outbound | undefined;
        type?: string | undefined;
        id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskExportDataOutput> = z
        .object({
            content: z.lazy(() => Content$.outboundSchema),
            ipfs: IpfsExportParamsOutput$.outboundSchema.optional(),
            type: z.string().optional(),
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                content: v.content,
                ...(v.ipfs === undefined ? null : { ipfs: v.ipfs }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });
}

/** @internal */
export namespace Transcode$ {
    export type Inbound = {
        profile?: FfmpegProfile$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<Transcode, z.ZodTypeDef, Inbound> = z
        .object({
            profile: FfmpegProfile$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.profile === undefined ? null : { profile: v.profile }),
            };
        });

    export type Outbound = {
        profile?: FfmpegProfile$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Transcode> = z
        .object({
            profile: FfmpegProfile$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.profile === undefined ? null : { profile: v.profile }),
            };
        });
}

/** @internal */
export namespace Input$ {
    export type Inbound = {
        url?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Input, z.ZodTypeDef, Inbound> = z
        .object({
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });

    export type Outbound = {
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Input> = z
        .object({
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });
}

/** @internal */
export namespace TaskStorage$ {
    export type Inbound = {
        url?: string | undefined;
    };

    export const inboundSchema: z.ZodType<TaskStorage, z.ZodTypeDef, Inbound> = z
        .object({
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });

    export type Outbound = {
        url?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskStorage> = z
        .object({
            url: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.url === undefined ? null : { url: v.url }),
            };
        });
}

/** @internal */
export namespace Hls$ {
    export type Inbound = {
        path?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Hls, z.ZodTypeDef, Inbound> = z
        .object({
            path: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.path === undefined ? null : { path: v.path }),
            };
        });

    export type Outbound = {
        path?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Hls> = z
        .object({
            path: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.path === undefined ? null : { path: v.path }),
            };
        });
}

/** @internal */
export namespace Mp4$ {
    export type Inbound = {
        path?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Mp4, z.ZodTypeDef, Inbound> = z
        .object({
            path: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.path === undefined ? null : { path: v.path }),
            };
        });

    export type Outbound = {
        path?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Mp4> = z
        .object({
            path: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.path === undefined ? null : { path: v.path }),
            };
        });
}

/** @internal */
export namespace Outputs$ {
    export type Inbound = {
        hls?: Hls$.Inbound | undefined;
        mp4?: Mp4$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<Outputs, z.ZodTypeDef, Inbound> = z
        .object({
            hls: z.lazy(() => Hls$.inboundSchema).optional(),
            mp4: z.lazy(() => Mp4$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.hls === undefined ? null : { hls: v.hls }),
                ...(v.mp4 === undefined ? null : { mp4: v.mp4 }),
            };
        });

    export type Outbound = {
        hls?: Hls$.Outbound | undefined;
        mp4?: Mp4$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Outputs> = z
        .object({
            hls: z.lazy(() => Hls$.outboundSchema).optional(),
            mp4: z.lazy(() => Mp4$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.hls === undefined ? null : { hls: v.hls }),
                ...(v.mp4 === undefined ? null : { mp4: v.mp4 }),
            };
        });
}

/** @internal */
export namespace TranscodeFile$ {
    export type Inbound = {
        input?: Input$.Inbound | undefined;
        storage?: TaskStorage$.Inbound | undefined;
        outputs?: Outputs$.Inbound | undefined;
        profiles?: Array<FfmpegProfile$.Inbound> | undefined;
        targetSegmentSizeSecs?: number | undefined;
        creatorId?: InputCreatorId$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<TranscodeFile, z.ZodTypeDef, Inbound> = z
        .object({
            input: z.lazy(() => Input$.inboundSchema).optional(),
            storage: z.lazy(() => TaskStorage$.inboundSchema).optional(),
            outputs: z.lazy(() => Outputs$.inboundSchema).optional(),
            profiles: z.array(FfmpegProfile$.inboundSchema).optional(),
            targetSegmentSizeSecs: z.number().optional(),
            creatorId: InputCreatorId$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.input === undefined ? null : { input: v.input }),
                ...(v.storage === undefined ? null : { storage: v.storage }),
                ...(v.outputs === undefined ? null : { outputs: v.outputs }),
                ...(v.profiles === undefined ? null : { profiles: v.profiles }),
                ...(v.targetSegmentSizeSecs === undefined
                    ? null
                    : { targetSegmentSizeSecs: v.targetSegmentSizeSecs }),
                ...(v.creatorId === undefined ? null : { creatorId: v.creatorId }),
            };
        });

    export type Outbound = {
        input?: Input$.Outbound | undefined;
        storage?: TaskStorage$.Outbound | undefined;
        outputs?: Outputs$.Outbound | undefined;
        profiles?: Array<FfmpegProfile$.Outbound> | undefined;
        targetSegmentSizeSecs?: number | undefined;
        creatorId?: InputCreatorId$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TranscodeFile> = z
        .object({
            input: z.lazy(() => Input$.outboundSchema).optional(),
            storage: z.lazy(() => TaskStorage$.outboundSchema).optional(),
            outputs: z.lazy(() => Outputs$.outboundSchema).optional(),
            profiles: z.array(FfmpegProfile$.outboundSchema).optional(),
            targetSegmentSizeSecs: z.number().optional(),
            creatorId: InputCreatorId$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.input === undefined ? null : { input: v.input }),
                ...(v.storage === undefined ? null : { storage: v.storage }),
                ...(v.outputs === undefined ? null : { outputs: v.outputs }),
                ...(v.profiles === undefined ? null : { profiles: v.profiles }),
                ...(v.targetSegmentSizeSecs === undefined
                    ? null
                    : { targetSegmentSizeSecs: v.targetSegmentSizeSecs }),
                ...(v.creatorId === undefined ? null : { creatorId: v.creatorId }),
            };
        });
}

/** @internal */
export namespace TaskParams$ {
    export type Inbound = {
        upload?: TaskParamsUploadOutput$.Inbound | undefined;
        import?: UploadOutput1$.Inbound | undefined;
        export?: ExportTaskParamsOutput$.Inbound | undefined;
        exportData?: TaskExportDataOutput$.Inbound | undefined;
        transcode?: Transcode$.Inbound | undefined;
        "transcode-file"?: TranscodeFile$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<TaskParams, z.ZodTypeDef, Inbound> = z
        .object({
            upload: z.lazy(() => TaskParamsUploadOutput$.inboundSchema).optional(),
            import: UploadOutput1$.inboundSchema.optional(),
            export: ExportTaskParamsOutput$.inboundSchema.optional(),
            exportData: z.lazy(() => TaskExportDataOutput$.inboundSchema).optional(),
            transcode: z.lazy(() => Transcode$.inboundSchema).optional(),
            "transcode-file": z.lazy(() => TranscodeFile$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.upload === undefined ? null : { upload: v.upload }),
                ...(v.import === undefined ? null : { import: v.import }),
                ...(v.export === undefined ? null : { export: v.export }),
                ...(v.exportData === undefined ? null : { exportData: v.exportData }),
                ...(v.transcode === undefined ? null : { transcode: v.transcode }),
                ...(v["transcode-file"] === undefined
                    ? null
                    : { transcodeFile: v["transcode-file"] }),
            };
        });

    export type Outbound = {
        upload?: TaskParamsUploadOutput$.Outbound | undefined;
        import?: UploadOutput1$.Outbound | undefined;
        export?: ExportTaskParamsOutput$.Outbound | undefined;
        exportData?: TaskExportDataOutput$.Outbound | undefined;
        transcode?: Transcode$.Outbound | undefined;
        "transcode-file"?: TranscodeFile$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskParams> = z
        .object({
            upload: z.lazy(() => TaskParamsUploadOutput$.outboundSchema).optional(),
            import: UploadOutput1$.outboundSchema.optional(),
            export: ExportTaskParamsOutput$.outboundSchema.optional(),
            exportData: z.lazy(() => TaskExportDataOutput$.outboundSchema).optional(),
            transcode: z.lazy(() => Transcode$.outboundSchema).optional(),
            transcodeFile: z.lazy(() => TranscodeFile$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.upload === undefined ? null : { upload: v.upload }),
                ...(v.import === undefined ? null : { import: v.import }),
                ...(v.export === undefined ? null : { export: v.export }),
                ...(v.exportData === undefined ? null : { exportData: v.exportData }),
                ...(v.transcode === undefined ? null : { transcode: v.transcode }),
                ...(v.transcodeFile === undefined ? null : { "transcode-file": v.transcodeFile }),
            };
        });
}

/** @internal */
export namespace ClipStrategy$ {
    export type Inbound = {
        startTime?: number | undefined;
        endTime?: number | undefined;
        playbackId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ClipStrategy, z.ZodTypeDef, Inbound> = z
        .object({
            startTime: z.number().optional(),
            endTime: z.number().optional(),
            playbackId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.startTime === undefined ? null : { startTime: v.startTime }),
                ...(v.endTime === undefined ? null : { endTime: v.endTime }),
                ...(v.playbackId === undefined ? null : { playbackId: v.playbackId }),
            };
        });

    export type Outbound = {
        startTime?: number | undefined;
        endTime?: number | undefined;
        playbackId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ClipStrategy> = z
        .object({
            startTime: z.number().optional(),
            endTime: z.number().optional(),
            playbackId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.startTime === undefined ? null : { startTime: v.startTime }),
                ...(v.endTime === undefined ? null : { endTime: v.endTime }),
                ...(v.playbackId === undefined ? null : { playbackId: v.playbackId }),
            };
        });
}

/** @internal */
export const CatalystPipelineStrategy$ = z.nativeEnum(CatalystPipelineStrategy);

/** @internal */
export namespace Clip$ {
    export type Inbound = {
        url?: string | undefined;
        clipStrategy?: ClipStrategy$.Inbound | undefined;
        catalystPipelineStrategy?: CatalystPipelineStrategy | undefined;
        sessionId?: string | undefined;
        inputId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Clip, z.ZodTypeDef, Inbound> = z
        .object({
            url: z.string().optional(),
            clipStrategy: z.lazy(() => ClipStrategy$.inboundSchema).optional(),
            catalystPipelineStrategy: CatalystPipelineStrategy$.optional(),
            sessionId: z.string().optional(),
            inputId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.clipStrategy === undefined ? null : { clipStrategy: v.clipStrategy }),
                ...(v.catalystPipelineStrategy === undefined
                    ? null
                    : { catalystPipelineStrategy: v.catalystPipelineStrategy }),
                ...(v.sessionId === undefined ? null : { sessionId: v.sessionId }),
                ...(v.inputId === undefined ? null : { inputId: v.inputId }),
            };
        });

    export type Outbound = {
        url?: string | undefined;
        clipStrategy?: ClipStrategy$.Outbound | undefined;
        catalystPipelineStrategy?: CatalystPipelineStrategy | undefined;
        sessionId?: string | undefined;
        inputId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Clip> = z
        .object({
            url: z.string().optional(),
            clipStrategy: z.lazy(() => ClipStrategy$.outboundSchema).optional(),
            catalystPipelineStrategy: CatalystPipelineStrategy$.optional(),
            sessionId: z.string().optional(),
            inputId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.clipStrategy === undefined ? null : { clipStrategy: v.clipStrategy }),
                ...(v.catalystPipelineStrategy === undefined
                    ? null
                    : { catalystPipelineStrategy: v.catalystPipelineStrategy }),
                ...(v.sessionId === undefined ? null : { sessionId: v.sessionId }),
                ...(v.inputId === undefined ? null : { inputId: v.inputId }),
            };
        });
}

/** @internal */
export const TaskPhase$ = z.nativeEnum(TaskPhase);

/** @internal */
export namespace TaskStatus$ {
    export type Inbound = {
        phase: TaskPhase;
        updatedAt: number;
        progress?: number | undefined;
        errorMessage?: string | undefined;
        retries?: number | undefined;
    };

    export const inboundSchema: z.ZodType<TaskStatus, z.ZodTypeDef, Inbound> = z
        .object({
            phase: TaskPhase$,
            updatedAt: z.number(),
            progress: z.number().optional(),
            errorMessage: z.string().optional(),
            retries: z.number().optional(),
        })
        .transform((v) => {
            return {
                phase: v.phase,
                updatedAt: v.updatedAt,
                ...(v.progress === undefined ? null : { progress: v.progress }),
                ...(v.errorMessage === undefined ? null : { errorMessage: v.errorMessage }),
                ...(v.retries === undefined ? null : { retries: v.retries }),
            };
        });

    export type Outbound = {
        phase: TaskPhase;
        updatedAt: number;
        progress?: number | undefined;
        errorMessage?: string | undefined;
        retries?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskStatus> = z
        .object({
            phase: TaskPhase$,
            updatedAt: z.number(),
            progress: z.number().optional(),
            errorMessage: z.string().optional(),
            retries: z.number().optional(),
        })
        .transform((v) => {
            return {
                phase: v.phase,
                updatedAt: v.updatedAt,
                ...(v.progress === undefined ? null : { progress: v.progress }),
                ...(v.errorMessage === undefined ? null : { errorMessage: v.errorMessage }),
                ...(v.retries === undefined ? null : { retries: v.retries }),
            };
        });
}

/** @internal */
export namespace TaskUploadOutput$ {
    export type Inbound = {
        [additionalProperties: string]: unknown;

        assetSpec?: Asset$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<TaskUploadOutput, z.ZodTypeDef, Inbound> = z
        .object({
            assetSpec: Asset$.inboundSchema.optional(),
        })
        .catchall(z.any())
        .transform((v) => {
            const { assetSpec, ...additionalProperties } = v;

            return {
                ...(v.assetSpec === undefined ? null : { assetSpec: v.assetSpec }),
                additionalProperties,
            };
        });

    export type Outbound = {
        assetSpec?: Asset$.Outbound | undefined;
        [additionalProperties: string]: unknown;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskUploadOutput> = z
        .object({
            assetSpec: Asset$.outboundSchema.optional(),
            additionalProperties: z.record(z.any()),
        })
        .transform((v) => {
            return {
                ...v.additionalProperties,
                ...(v.assetSpec === undefined ? null : { assetSpec: v.assetSpec }),
            };
        });
}

/** @internal */
export namespace TaskIpfs$ {
    export type Inbound = {
        videoFileCid: string;
        videoFileUrl?: string | undefined;
        videoFileGatewayUrl?: string | undefined;
        nftMetadataCid?: string | undefined;
        nftMetadataUrl?: string | undefined;
        nftMetadataGatewayUrl?: string | undefined;
    };

    export const inboundSchema: z.ZodType<TaskIpfs, z.ZodTypeDef, Inbound> = z
        .object({
            videoFileCid: z.string(),
            videoFileUrl: z.string().optional(),
            videoFileGatewayUrl: z.string().optional(),
            nftMetadataCid: z.string().optional(),
            nftMetadataUrl: z.string().optional(),
            nftMetadataGatewayUrl: z.string().optional(),
        })
        .transform((v) => {
            return {
                videoFileCid: v.videoFileCid,
                ...(v.videoFileUrl === undefined ? null : { videoFileUrl: v.videoFileUrl }),
                ...(v.videoFileGatewayUrl === undefined
                    ? null
                    : { videoFileGatewayUrl: v.videoFileGatewayUrl }),
                ...(v.nftMetadataCid === undefined ? null : { nftMetadataCid: v.nftMetadataCid }),
                ...(v.nftMetadataUrl === undefined ? null : { nftMetadataUrl: v.nftMetadataUrl }),
                ...(v.nftMetadataGatewayUrl === undefined
                    ? null
                    : { nftMetadataGatewayUrl: v.nftMetadataGatewayUrl }),
            };
        });

    export type Outbound = {
        videoFileCid: string;
        videoFileUrl?: string | undefined;
        videoFileGatewayUrl?: string | undefined;
        nftMetadataCid?: string | undefined;
        nftMetadataUrl?: string | undefined;
        nftMetadataGatewayUrl?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskIpfs> = z
        .object({
            videoFileCid: z.string(),
            videoFileUrl: z.string().optional(),
            videoFileGatewayUrl: z.string().optional(),
            nftMetadataCid: z.string().optional(),
            nftMetadataUrl: z.string().optional(),
            nftMetadataGatewayUrl: z.string().optional(),
        })
        .transform((v) => {
            return {
                videoFileCid: v.videoFileCid,
                ...(v.videoFileUrl === undefined ? null : { videoFileUrl: v.videoFileUrl }),
                ...(v.videoFileGatewayUrl === undefined
                    ? null
                    : { videoFileGatewayUrl: v.videoFileGatewayUrl }),
                ...(v.nftMetadataCid === undefined ? null : { nftMetadataCid: v.nftMetadataCid }),
                ...(v.nftMetadataUrl === undefined ? null : { nftMetadataUrl: v.nftMetadataUrl }),
                ...(v.nftMetadataGatewayUrl === undefined
                    ? null
                    : { nftMetadataGatewayUrl: v.nftMetadataGatewayUrl }),
            };
        });
}

/** @internal */
export namespace Export$ {
    export type Inbound = {
        ipfs?: TaskIpfs$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<Export, z.ZodTypeDef, Inbound> = z
        .object({
            ipfs: z.lazy(() => TaskIpfs$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.ipfs === undefined ? null : { ipfs: v.ipfs }),
            };
        });

    export type Outbound = {
        ipfs?: TaskIpfs$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Export> = z
        .object({
            ipfs: z.lazy(() => TaskIpfs$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.ipfs === undefined ? null : { ipfs: v.ipfs }),
            };
        });
}

/** @internal */
export namespace TaskOutputIpfs$ {
    export type Inbound = {
        cid: string;
    };

    export const inboundSchema: z.ZodType<TaskOutputIpfs, z.ZodTypeDef, Inbound> = z
        .object({
            cid: z.string(),
        })
        .transform((v) => {
            return {
                cid: v.cid,
            };
        });

    export type Outbound = {
        cid: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskOutputIpfs> = z
        .object({
            cid: z.string(),
        })
        .transform((v) => {
            return {
                cid: v.cid,
            };
        });
}

/** @internal */
export namespace ExportData$ {
    export type Inbound = {
        ipfs?: TaskOutputIpfs$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<ExportData, z.ZodTypeDef, Inbound> = z
        .object({
            ipfs: z.lazy(() => TaskOutputIpfs$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.ipfs === undefined ? null : { ipfs: v.ipfs }),
            };
        });

    export type Outbound = {
        ipfs?: TaskOutputIpfs$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ExportData> = z
        .object({
            ipfs: z.lazy(() => TaskOutputIpfs$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.ipfs === undefined ? null : { ipfs: v.ipfs }),
            };
        });
}

/** @internal */
export namespace TaskAsset$ {
    export type Inbound = {
        [additionalProperties: string]: unknown;

        videoFilePath?: string | undefined;
        metadataFilePath?: string | undefined;
        assetSpec?: Asset$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<TaskAsset, z.ZodTypeDef, Inbound> = z
        .object({
            videoFilePath: z.string().optional(),
            metadataFilePath: z.string().optional(),
            assetSpec: Asset$.inboundSchema.optional(),
        })
        .catchall(z.any())
        .transform((v) => {
            const { videoFilePath, metadataFilePath, assetSpec, ...additionalProperties } = v;

            return {
                ...(v.videoFilePath === undefined ? null : { videoFilePath: v.videoFilePath }),
                ...(v.metadataFilePath === undefined
                    ? null
                    : { metadataFilePath: v.metadataFilePath }),
                ...(v.assetSpec === undefined ? null : { assetSpec: v.assetSpec }),
                additionalProperties,
            };
        });

    export type Outbound = {
        videoFilePath?: string | undefined;
        metadataFilePath?: string | undefined;
        assetSpec?: Asset$.Outbound | undefined;
        [additionalProperties: string]: unknown;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskAsset> = z
        .object({
            videoFilePath: z.string().optional(),
            metadataFilePath: z.string().optional(),
            assetSpec: Asset$.outboundSchema.optional(),
            additionalProperties: z.record(z.any()),
        })
        .transform((v) => {
            return {
                ...v.additionalProperties,
                ...(v.videoFilePath === undefined ? null : { videoFilePath: v.videoFilePath }),
                ...(v.metadataFilePath === undefined
                    ? null
                    : { metadataFilePath: v.metadataFilePath }),
                ...(v.assetSpec === undefined ? null : { assetSpec: v.assetSpec }),
            };
        });
}

/** @internal */
export namespace TaskTranscode$ {
    export type Inbound = {
        asset?: TaskAsset$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<TaskTranscode, z.ZodTypeDef, Inbound> = z
        .object({
            asset: z.lazy(() => TaskAsset$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.asset === undefined ? null : { asset: v.asset }),
            };
        });

    export type Outbound = {
        asset?: TaskAsset$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskTranscode> = z
        .object({
            asset: z.lazy(() => TaskAsset$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.asset === undefined ? null : { asset: v.asset }),
            };
        });
}

/** @internal */
export namespace Output$ {
    export type Inbound = {
        upload?: TaskUploadOutput$.Inbound | undefined;
        import?: UploadOutput$.Inbound | undefined;
        export?: Export$.Inbound | undefined;
        exportData?: ExportData$.Inbound | undefined;
        transcode?: TaskTranscode$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<Output, z.ZodTypeDef, Inbound> = z
        .object({
            upload: z.lazy(() => TaskUploadOutput$.inboundSchema).optional(),
            import: UploadOutput$.inboundSchema.optional(),
            export: z.lazy(() => Export$.inboundSchema).optional(),
            exportData: z.lazy(() => ExportData$.inboundSchema).optional(),
            transcode: z.lazy(() => TaskTranscode$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.upload === undefined ? null : { upload: v.upload }),
                ...(v.import === undefined ? null : { import: v.import }),
                ...(v.export === undefined ? null : { export: v.export }),
                ...(v.exportData === undefined ? null : { exportData: v.exportData }),
                ...(v.transcode === undefined ? null : { transcode: v.transcode }),
            };
        });

    export type Outbound = {
        upload?: TaskUploadOutput$.Outbound | undefined;
        import?: UploadOutput$.Outbound | undefined;
        export?: Export$.Outbound | undefined;
        exportData?: ExportData$.Outbound | undefined;
        transcode?: TaskTranscode$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Output> = z
        .object({
            upload: z.lazy(() => TaskUploadOutput$.outboundSchema).optional(),
            import: UploadOutput$.outboundSchema.optional(),
            export: z.lazy(() => Export$.outboundSchema).optional(),
            exportData: z.lazy(() => ExportData$.outboundSchema).optional(),
            transcode: z.lazy(() => TaskTranscode$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.upload === undefined ? null : { upload: v.upload }),
                ...(v.import === undefined ? null : { import: v.import }),
                ...(v.export === undefined ? null : { export: v.export }),
                ...(v.exportData === undefined ? null : { exportData: v.exportData }),
                ...(v.transcode === undefined ? null : { transcode: v.transcode }),
            };
        });
}

/** @internal */
export namespace Task$ {
    export type Inbound = {
        id?: string | undefined;
        type?: TaskType | undefined;
        createdAt?: number | undefined;
        scheduledAt?: number | undefined;
        inputAssetId?: string | undefined;
        outputAssetId?: string | undefined;
        params?: TaskParams$.Inbound | undefined;
        clip?: Clip$.Inbound | undefined;
        status?: TaskStatus$.Inbound | undefined;
        output?: Output$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<Task, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            type: TaskType$.optional(),
            createdAt: z.number().optional(),
            scheduledAt: z.number().optional(),
            inputAssetId: z.string().optional(),
            outputAssetId: z.string().optional(),
            params: z.lazy(() => TaskParams$.inboundSchema).optional(),
            clip: z.lazy(() => Clip$.inboundSchema).optional(),
            status: z.lazy(() => TaskStatus$.inboundSchema).optional(),
            output: z.lazy(() => Output$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.scheduledAt === undefined ? null : { scheduledAt: v.scheduledAt }),
                ...(v.inputAssetId === undefined ? null : { inputAssetId: v.inputAssetId }),
                ...(v.outputAssetId === undefined ? null : { outputAssetId: v.outputAssetId }),
                ...(v.params === undefined ? null : { params: v.params }),
                ...(v.clip === undefined ? null : { clip: v.clip }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.output === undefined ? null : { output: v.output }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        type?: TaskType | undefined;
        createdAt?: number | undefined;
        scheduledAt?: number | undefined;
        inputAssetId?: string | undefined;
        outputAssetId?: string | undefined;
        params?: TaskParams$.Outbound | undefined;
        clip?: Clip$.Outbound | undefined;
        status?: TaskStatus$.Outbound | undefined;
        output?: Output$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Task> = z
        .object({
            id: z.string().optional(),
            type: TaskType$.optional(),
            createdAt: z.number().optional(),
            scheduledAt: z.number().optional(),
            inputAssetId: z.string().optional(),
            outputAssetId: z.string().optional(),
            params: z.lazy(() => TaskParams$.outboundSchema).optional(),
            clip: z.lazy(() => Clip$.outboundSchema).optional(),
            status: z.lazy(() => TaskStatus$.outboundSchema).optional(),
            output: z.lazy(() => Output$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.scheduledAt === undefined ? null : { scheduledAt: v.scheduledAt }),
                ...(v.inputAssetId === undefined ? null : { inputAssetId: v.inputAssetId }),
                ...(v.outputAssetId === undefined ? null : { outputAssetId: v.outputAssetId }),
                ...(v.params === undefined ? null : { params: v.params }),
                ...(v.clip === undefined ? null : { clip: v.clip }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.output === undefined ? null : { output: v.output }),
            };
        });
}

/** @internal */
export namespace TaskUpload$ {
    export type Inbound = {
        url?: string | undefined;
        encryption?: Encryption$.Inbound | undefined;
        recordedSessionId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<TaskUpload, z.ZodTypeDef, Inbound> = z
        .object({
            url: z.string().optional(),
            encryption: Encryption$.inboundSchema.optional(),
            recordedSessionId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.encryption === undefined ? null : { encryption: v.encryption }),
                ...(v.recordedSessionId === undefined
                    ? null
                    : { recordedSessionId: v.recordedSessionId }),
            };
        });

    export type Outbound = {
        url?: string | undefined;
        encryption?: Encryption$.Outbound | undefined;
        recordedSessionId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskUpload> = z
        .object({
            url: z.string().optional(),
            encryption: Encryption$.outboundSchema.optional(),
            recordedSessionId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.encryption === undefined ? null : { encryption: v.encryption }),
                ...(v.recordedSessionId === undefined
                    ? null
                    : { recordedSessionId: v.recordedSessionId }),
            };
        });
}

/** @internal */
export namespace TaskExportData$ {
    export type Inbound = {
        content: Content$.Inbound;
        ipfs?: IpfsExportParams$.Inbound | undefined;
        type?: string | undefined;
        id?: string | undefined;
    };

    export const inboundSchema: z.ZodType<TaskExportData, z.ZodTypeDef, Inbound> = z
        .object({
            content: z.lazy(() => Content$.inboundSchema),
            ipfs: IpfsExportParams$.inboundSchema.optional(),
            type: z.string().optional(),
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                content: v.content,
                ...(v.ipfs === undefined ? null : { ipfs: v.ipfs }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });

    export type Outbound = {
        content: Content$.Outbound;
        ipfs?: IpfsExportParams$.Outbound | undefined;
        type?: string | undefined;
        id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskExportData> = z
        .object({
            content: z.lazy(() => Content$.outboundSchema),
            ipfs: IpfsExportParams$.outboundSchema.optional(),
            type: z.string().optional(),
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                content: v.content,
                ...(v.ipfs === undefined ? null : { ipfs: v.ipfs }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });
}

/** @internal */
export namespace Params$ {
    export type Inbound = {
        upload?: TaskUpload$.Inbound | undefined;
        import?: Upload$.Inbound | undefined;
        export?: ExportTaskParams$.Inbound | undefined;
        exportData?: TaskExportData$.Inbound | undefined;
        transcode?: Transcode$.Inbound | undefined;
        "transcode-file"?: TranscodeFile$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<Params, z.ZodTypeDef, Inbound> = z
        .object({
            upload: z.lazy(() => TaskUpload$.inboundSchema).optional(),
            import: Upload$.inboundSchema.optional(),
            export: ExportTaskParams$.inboundSchema.optional(),
            exportData: z.lazy(() => TaskExportData$.inboundSchema).optional(),
            transcode: z.lazy(() => Transcode$.inboundSchema).optional(),
            "transcode-file": z.lazy(() => TranscodeFile$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.upload === undefined ? null : { upload: v.upload }),
                ...(v.import === undefined ? null : { import: v.import }),
                ...(v.export === undefined ? null : { export: v.export }),
                ...(v.exportData === undefined ? null : { exportData: v.exportData }),
                ...(v.transcode === undefined ? null : { transcode: v.transcode }),
                ...(v["transcode-file"] === undefined
                    ? null
                    : { transcodeFile: v["transcode-file"] }),
            };
        });

    export type Outbound = {
        upload?: TaskUpload$.Outbound | undefined;
        import?: Upload$.Outbound | undefined;
        export?: ExportTaskParams$.Outbound | undefined;
        exportData?: TaskExportData$.Outbound | undefined;
        transcode?: Transcode$.Outbound | undefined;
        "transcode-file"?: TranscodeFile$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Params> = z
        .object({
            upload: z.lazy(() => TaskUpload$.outboundSchema).optional(),
            import: Upload$.outboundSchema.optional(),
            export: ExportTaskParams$.outboundSchema.optional(),
            exportData: z.lazy(() => TaskExportData$.outboundSchema).optional(),
            transcode: z.lazy(() => Transcode$.outboundSchema).optional(),
            transcodeFile: z.lazy(() => TranscodeFile$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.upload === undefined ? null : { upload: v.upload }),
                ...(v.import === undefined ? null : { import: v.import }),
                ...(v.export === undefined ? null : { export: v.export }),
                ...(v.exportData === undefined ? null : { exportData: v.exportData }),
                ...(v.transcode === undefined ? null : { transcode: v.transcode }),
                ...(v.transcodeFile === undefined ? null : { "transcode-file": v.transcodeFile }),
            };
        });
}

/** @internal */
export namespace TaskUploadInput$ {
    export type Inbound = {
        [additionalProperties: string]: unknown;

        videoFilePath?: string | undefined;
        metadataFilePath?: string | undefined;
        assetSpec?: AssetInput$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<TaskUploadInput, z.ZodTypeDef, Inbound> = z
        .object({
            videoFilePath: z.string().optional(),
            metadataFilePath: z.string().optional(),
            assetSpec: AssetInput$.inboundSchema.optional(),
        })
        .catchall(z.any())
        .transform((v) => {
            const { videoFilePath, metadataFilePath, assetSpec, ...additionalProperties } = v;

            return {
                ...(v.videoFilePath === undefined ? null : { videoFilePath: v.videoFilePath }),
                ...(v.metadataFilePath === undefined
                    ? null
                    : { metadataFilePath: v.metadataFilePath }),
                ...(v.assetSpec === undefined ? null : { assetSpec: v.assetSpec }),
                additionalProperties,
            };
        });

    export type Outbound = {
        videoFilePath?: string | undefined;
        metadataFilePath?: string | undefined;
        assetSpec?: AssetInput$.Outbound | undefined;
        [additionalProperties: string]: unknown;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskUploadInput> = z
        .object({
            videoFilePath: z.string().optional(),
            metadataFilePath: z.string().optional(),
            assetSpec: AssetInput$.outboundSchema.optional(),
            additionalProperties: z.record(z.any()),
        })
        .transform((v) => {
            return {
                ...v.additionalProperties,
                ...(v.videoFilePath === undefined ? null : { videoFilePath: v.videoFilePath }),
                ...(v.metadataFilePath === undefined
                    ? null
                    : { metadataFilePath: v.metadataFilePath }),
                ...(v.assetSpec === undefined ? null : { assetSpec: v.assetSpec }),
            };
        });
}

/** @internal */
export namespace TaskIpfsInput$ {
    export type Inbound = {
        videoFileCid: string;
        nftMetadataCid?: string | undefined;
    };

    export const inboundSchema: z.ZodType<TaskIpfsInput, z.ZodTypeDef, Inbound> = z
        .object({
            videoFileCid: z.string(),
            nftMetadataCid: z.string().optional(),
        })
        .transform((v) => {
            return {
                videoFileCid: v.videoFileCid,
                ...(v.nftMetadataCid === undefined ? null : { nftMetadataCid: v.nftMetadataCid }),
            };
        });

    export type Outbound = {
        videoFileCid: string;
        nftMetadataCid?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskIpfsInput> = z
        .object({
            videoFileCid: z.string(),
            nftMetadataCid: z.string().optional(),
        })
        .transform((v) => {
            return {
                videoFileCid: v.videoFileCid,
                ...(v.nftMetadataCid === undefined ? null : { nftMetadataCid: v.nftMetadataCid }),
            };
        });
}

/** @internal */
export namespace TaskExport$ {
    export type Inbound = {
        ipfs?: TaskIpfsInput$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<TaskExport, z.ZodTypeDef, Inbound> = z
        .object({
            ipfs: z.lazy(() => TaskIpfsInput$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.ipfs === undefined ? null : { ipfs: v.ipfs }),
            };
        });

    export type Outbound = {
        ipfs?: TaskIpfsInput$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskExport> = z
        .object({
            ipfs: z.lazy(() => TaskIpfsInput$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.ipfs === undefined ? null : { ipfs: v.ipfs }),
            };
        });
}

/** @internal */
export namespace TaskAssetInput$ {
    export type Inbound = {
        [additionalProperties: string]: unknown;

        videoFilePath?: string | undefined;
        metadataFilePath?: string | undefined;
        assetSpec?: AssetInput$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<TaskAssetInput, z.ZodTypeDef, Inbound> = z
        .object({
            videoFilePath: z.string().optional(),
            metadataFilePath: z.string().optional(),
            assetSpec: AssetInput$.inboundSchema.optional(),
        })
        .catchall(z.any())
        .transform((v) => {
            const { videoFilePath, metadataFilePath, assetSpec, ...additionalProperties } = v;

            return {
                ...(v.videoFilePath === undefined ? null : { videoFilePath: v.videoFilePath }),
                ...(v.metadataFilePath === undefined
                    ? null
                    : { metadataFilePath: v.metadataFilePath }),
                ...(v.assetSpec === undefined ? null : { assetSpec: v.assetSpec }),
                additionalProperties,
            };
        });

    export type Outbound = {
        videoFilePath?: string | undefined;
        metadataFilePath?: string | undefined;
        assetSpec?: AssetInput$.Outbound | undefined;
        [additionalProperties: string]: unknown;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskAssetInput> = z
        .object({
            videoFilePath: z.string().optional(),
            metadataFilePath: z.string().optional(),
            assetSpec: AssetInput$.outboundSchema.optional(),
            additionalProperties: z.record(z.any()),
        })
        .transform((v) => {
            return {
                ...v.additionalProperties,
                ...(v.videoFilePath === undefined ? null : { videoFilePath: v.videoFilePath }),
                ...(v.metadataFilePath === undefined
                    ? null
                    : { metadataFilePath: v.metadataFilePath }),
                ...(v.assetSpec === undefined ? null : { assetSpec: v.assetSpec }),
            };
        });
}

/** @internal */
export namespace TaskTranscodeInput$ {
    export type Inbound = {
        asset?: TaskAssetInput$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<TaskTranscodeInput, z.ZodTypeDef, Inbound> = z
        .object({
            asset: z.lazy(() => TaskAssetInput$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.asset === undefined ? null : { asset: v.asset }),
            };
        });

    export type Outbound = {
        asset?: TaskAssetInput$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskTranscodeInput> = z
        .object({
            asset: z.lazy(() => TaskAssetInput$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.asset === undefined ? null : { asset: v.asset }),
            };
        });
}

/** @internal */
export namespace TaskOutput$ {
    export type Inbound = {
        upload?: TaskUploadInput$.Inbound | undefined;
        import?: UploadInput$.Inbound | undefined;
        export?: TaskExport$.Inbound | undefined;
        exportData?: ExportData$.Inbound | undefined;
        transcode?: TaskTranscodeInput$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<TaskOutput, z.ZodTypeDef, Inbound> = z
        .object({
            upload: z.lazy(() => TaskUploadInput$.inboundSchema).optional(),
            import: UploadInput$.inboundSchema.optional(),
            export: z.lazy(() => TaskExport$.inboundSchema).optional(),
            exportData: z.lazy(() => ExportData$.inboundSchema).optional(),
            transcode: z.lazy(() => TaskTranscodeInput$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.upload === undefined ? null : { upload: v.upload }),
                ...(v.import === undefined ? null : { import: v.import }),
                ...(v.export === undefined ? null : { export: v.export }),
                ...(v.exportData === undefined ? null : { exportData: v.exportData }),
                ...(v.transcode === undefined ? null : { transcode: v.transcode }),
            };
        });

    export type Outbound = {
        upload?: TaskUploadInput$.Outbound | undefined;
        import?: UploadInput$.Outbound | undefined;
        export?: TaskExport$.Outbound | undefined;
        exportData?: ExportData$.Outbound | undefined;
        transcode?: TaskTranscodeInput$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskOutput> = z
        .object({
            upload: z.lazy(() => TaskUploadInput$.outboundSchema).optional(),
            import: UploadInput$.outboundSchema.optional(),
            export: z.lazy(() => TaskExport$.outboundSchema).optional(),
            exportData: z.lazy(() => ExportData$.outboundSchema).optional(),
            transcode: z.lazy(() => TaskTranscodeInput$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.upload === undefined ? null : { upload: v.upload }),
                ...(v.import === undefined ? null : { import: v.import }),
                ...(v.export === undefined ? null : { export: v.export }),
                ...(v.exportData === undefined ? null : { exportData: v.exportData }),
                ...(v.transcode === undefined ? null : { transcode: v.transcode }),
            };
        });
}

/** @internal */
export namespace TaskInput$ {
    export type Inbound = {
        type?: TaskType | undefined;
        inputAssetId?: string | undefined;
        outputAssetId?: string | undefined;
        params?: Params$.Inbound | undefined;
        clip?: Clip$.Inbound | undefined;
        output?: TaskOutput$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<TaskInput, z.ZodTypeDef, Inbound> = z
        .object({
            type: TaskType$.optional(),
            inputAssetId: z.string().optional(),
            outputAssetId: z.string().optional(),
            params: z.lazy(() => Params$.inboundSchema).optional(),
            clip: z.lazy(() => Clip$.inboundSchema).optional(),
            output: z.lazy(() => TaskOutput$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.inputAssetId === undefined ? null : { inputAssetId: v.inputAssetId }),
                ...(v.outputAssetId === undefined ? null : { outputAssetId: v.outputAssetId }),
                ...(v.params === undefined ? null : { params: v.params }),
                ...(v.clip === undefined ? null : { clip: v.clip }),
                ...(v.output === undefined ? null : { output: v.output }),
            };
        });

    export type Outbound = {
        type?: TaskType | undefined;
        inputAssetId?: string | undefined;
        outputAssetId?: string | undefined;
        params?: Params$.Outbound | undefined;
        clip?: Clip$.Outbound | undefined;
        output?: TaskOutput$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TaskInput> = z
        .object({
            type: TaskType$.optional(),
            inputAssetId: z.string().optional(),
            outputAssetId: z.string().optional(),
            params: z.lazy(() => Params$.outboundSchema).optional(),
            clip: z.lazy(() => Clip$.outboundSchema).optional(),
            output: z.lazy(() => TaskOutput$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.inputAssetId === undefined ? null : { inputAssetId: v.inputAssetId }),
                ...(v.outputAssetId === undefined ? null : { outputAssetId: v.outputAssetId }),
                ...(v.params === undefined ? null : { params: v.params }),
                ...(v.clip === undefined ? null : { clip: v.clip }),
                ...(v.output === undefined ? null : { output: v.output }),
            };
        });
}
