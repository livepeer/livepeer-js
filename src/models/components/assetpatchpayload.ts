/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { InputCreatorId, InputCreatorId$ } from "./inputcreatorid";
import { PlaybackPolicy, PlaybackPolicy$ } from "./playbackpolicy";
import { Storage, Storage$ } from "./storage";
import { z } from "zod";

export type AssetPatchPayload = {
    /**
     * Name of the asset. This is not necessarily the filename, can be a
     *
     * @remarks
     * custom name or title
     *
     */
    name?: string | undefined;
    creatorId?: InputCreatorId | undefined;
    /**
     * Whether the playback policy for a asset or stream is public or signed
     */
    playbackPolicy?: PlaybackPolicy | undefined;
    storage?: Storage | undefined;
};

/** @internal */
export namespace AssetPatchPayload$ {
    export type Inbound = {
        name?: string | undefined;
        creatorId?: InputCreatorId$.Inbound | undefined;
        playbackPolicy?: PlaybackPolicy$.Inbound | undefined;
        storage?: Storage$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<AssetPatchPayload, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string().optional(),
            creatorId: InputCreatorId$.inboundSchema.optional(),
            playbackPolicy: PlaybackPolicy$.inboundSchema.optional(),
            storage: Storage$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.creatorId === undefined ? null : { creatorId: v.creatorId }),
                ...(v.playbackPolicy === undefined ? null : { playbackPolicy: v.playbackPolicy }),
                ...(v.storage === undefined ? null : { storage: v.storage }),
            };
        });

    export type Outbound = {
        name?: string | undefined;
        creatorId?: InputCreatorId$.Outbound | undefined;
        playbackPolicy?: PlaybackPolicy$.Outbound | undefined;
        storage?: Storage$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AssetPatchPayload> = z
        .object({
            name: z.string().optional(),
            creatorId: InputCreatorId$.outboundSchema.optional(),
            playbackPolicy: PlaybackPolicy$.outboundSchema.optional(),
            storage: Storage$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.creatorId === undefined ? null : { creatorId: v.creatorId }),
                ...(v.playbackPolicy === undefined ? null : { playbackPolicy: v.playbackPolicy }),
                ...(v.storage === undefined ? null : { storage: v.storage }),
            };
        });
}
