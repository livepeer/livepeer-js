/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { InputCreatorId, InputCreatorId$ } from "./inputcreatorid";
import { PlaybackPolicy, PlaybackPolicy$ } from "./playbackpolicy";
import { Storage, Storage$ } from "./storage";
import * as z from "zod";

export type AssetPatchPayload = {
    /**
     * The name of the asset. This is not necessarily the filename - it can be a custom name or title.
     *
     * @remarks
     *
     */
    name?: string | undefined;
    creatorId?: InputCreatorId | undefined;
    /**
     * Whether the playback policy for an asset or stream is public or signed
     */
    playbackPolicy?: PlaybackPolicy | null | undefined;
    storage?: Storage | undefined;
};

/** @internal */
export namespace AssetPatchPayload$ {
    export const inboundSchema: z.ZodType<AssetPatchPayload, z.ZodTypeDef, unknown> = z.object({
        name: z.string().optional(),
        creatorId: InputCreatorId$.inboundSchema.optional(),
        playbackPolicy: z.nullable(PlaybackPolicy$.inboundSchema).optional(),
        storage: Storage$.inboundSchema.optional(),
    });

    export type Outbound = {
        name?: string | undefined;
        creatorId?: InputCreatorId$.Outbound | undefined;
        playbackPolicy?: PlaybackPolicy$.Outbound | null | undefined;
        storage?: Storage$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AssetPatchPayload> = z.object({
        name: z.string().optional(),
        creatorId: InputCreatorId$.outboundSchema.optional(),
        playbackPolicy: z.nullable(PlaybackPolicy$.outboundSchema).optional(),
        storage: Storage$.outboundSchema.optional(),
    });
}
