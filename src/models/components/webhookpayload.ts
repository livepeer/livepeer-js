/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Events, Events$ } from "./events";
import * as z from "zod";

export type WebhookPayload = {
    name?: string | undefined;
    url?: string | undefined;
    events?: Array<Events> | undefined;
    /**
     * shared secret used to sign the webhook payload
     */
    sharedSecret?: string | undefined;
    /**
     * streamId of the stream on which the webhook is applied
     */
    streamId?: string | undefined;
};

/** @internal */
export namespace WebhookPayload$ {
    export type Inbound = {
        name?: string | undefined;
        url?: string | undefined;
        events?: Array<Events> | undefined;
        sharedSecret?: string | undefined;
        streamId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<WebhookPayload, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string().optional(),
            url: z.string().optional(),
            events: z.array(Events$).optional(),
            sharedSecret: z.string().optional(),
            streamId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.events === undefined ? null : { events: v.events }),
                ...(v.sharedSecret === undefined ? null : { sharedSecret: v.sharedSecret }),
                ...(v.streamId === undefined ? null : { streamId: v.streamId }),
            };
        });

    export type Outbound = {
        name?: string | undefined;
        url?: string | undefined;
        events?: Array<Events> | undefined;
        sharedSecret?: string | undefined;
        streamId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, WebhookPayload> = z
        .object({
            name: z.string().optional(),
            url: z.string().optional(),
            events: z.array(Events$).optional(),
            sharedSecret: z.string().optional(),
            streamId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.events === undefined ? null : { events: v.events }),
                ...(v.sharedSecret === undefined ? null : { sharedSecret: v.sharedSecret }),
                ...(v.streamId === undefined ? null : { streamId: v.streamId }),
            };
        });
}
