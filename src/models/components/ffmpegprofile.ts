/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum Profile {
    H264Baseline = "H264Baseline",
    H264Main = "H264Main",
    H264High = "H264High",
    H264ConstrainedHigh = "H264ConstrainedHigh",
}

export enum Encoder {
    H264 = "H.264",
}

/**
 * Transcode profile
 */
export type FfmpegProfile = {
    width: number;
    name: string;
    height: number;
    bitrate: number;
    fps: number;
    fpsDen?: number | undefined;
    /**
     * Restricts the size of the output video using the constant quality feature. Increasing this value will result in a lower quality video. Note that this parameter might not work if the transcoder lacks support for it.
     *
     * @remarks
     *
     */
    quality?: number | undefined;
    gop?: string | undefined;
    profile?: Profile | undefined;
    encoder?: Encoder | undefined;
};

/** @internal */
export const Profile$: z.ZodNativeEnum<typeof Profile> = z.nativeEnum(Profile);

/** @internal */
export const Encoder$: z.ZodNativeEnum<typeof Encoder> = z.nativeEnum(Encoder);

/** @internal */
export namespace FfmpegProfile$ {
    export const inboundSchema: z.ZodType<FfmpegProfile, z.ZodTypeDef, unknown> = z
        .object({
            width: z.number().int(),
            name: z.string(),
            height: z.number().int(),
            bitrate: z.number().int(),
            fps: z.number().int(),
            fpsDen: z.number().int().optional(),
            quality: z.number().int().optional(),
            gop: z.string().optional(),
            profile: Profile$.optional(),
            encoder: Encoder$.optional(),
        })
        .transform((v) => {
            return {
                width: v.width,
                name: v.name,
                height: v.height,
                bitrate: v.bitrate,
                fps: v.fps,
                ...(v.fpsDen === undefined ? null : { fpsDen: v.fpsDen }),
                ...(v.quality === undefined ? null : { quality: v.quality }),
                ...(v.gop === undefined ? null : { gop: v.gop }),
                ...(v.profile === undefined ? null : { profile: v.profile }),
                ...(v.encoder === undefined ? null : { encoder: v.encoder }),
            };
        });

    export type Outbound = {
        width: number;
        name: string;
        height: number;
        bitrate: number;
        fps: number;
        fpsDen?: number | undefined;
        quality?: number | undefined;
        gop?: string | undefined;
        profile?: Profile | undefined;
        encoder?: Encoder | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FfmpegProfile> = z
        .object({
            width: z.number().int(),
            name: z.string(),
            height: z.number().int(),
            bitrate: z.number().int(),
            fps: z.number().int(),
            fpsDen: z.number().int().optional(),
            quality: z.number().int().optional(),
            gop: z.string().optional(),
            profile: Profile$.optional(),
            encoder: Encoder$.optional(),
        })
        .transform((v) => {
            return {
                width: v.width,
                name: v.name,
                height: v.height,
                bitrate: v.bitrate,
                fps: v.fps,
                ...(v.fpsDen === undefined ? null : { fpsDen: v.fpsDen }),
                ...(v.quality === undefined ? null : { quality: v.quality }),
                ...(v.gop === undefined ? null : { gop: v.gop }),
                ...(v.profile === undefined ? null : { profile: v.profile }),
                ...(v.encoder === undefined ? null : { encoder: v.encoder }),
            };
        });
}
