/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Inline multistream target object. Will automatically
 *
 * @remarks
 * create the target resource to be used by the created stream.
 *
 */
export type MultistreamSpec = {
    name?: string | undefined;
    /**
     * Livepeer-compatible multistream target URL (RTMP(S) or SRT)
     */
    url: string;
};

export type Targets = {
    /**
     * Name of the transcoding profile that should be sent. Use
     *
     * @remarks
     * "source" for pushing the source stream data
     *
     */
    profile: string;
    /**
     * If true, the stream audio will be muted, and only silent
     *
     * @remarks
     * video will be pushed to the target.
     *
     */
    videoOnly?: boolean | undefined;
    /**
     * ID of the multistream target object where to push this stream
     */
    id?: string | undefined;
    /**
     * Inline multistream target object. Will automatically
     *
     * @remarks
     * create the target resource to be used by the created stream.
     *
     */
    spec?: MultistreamSpec | undefined;
};

export type Multistream = {
    /**
     * References to targets where this stream will be simultaneously
     *
     * @remarks
     * streamed to
     *
     */
    targets?: Array<Targets> | undefined;
};

/** @internal */
export namespace MultistreamSpec$ {
    export type Inbound = {
        name?: string | undefined;
        url: string;
    };

    export const inboundSchema: z.ZodType<MultistreamSpec, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string().optional(),
            url: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                url: v.url,
            };
        });

    export type Outbound = {
        name?: string | undefined;
        url: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MultistreamSpec> = z
        .object({
            name: z.string().optional(),
            url: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                url: v.url,
            };
        });
}

/** @internal */
export namespace Targets$ {
    export type Inbound = {
        profile: string;
        videoOnly?: boolean | undefined;
        id?: string | undefined;
        spec?: MultistreamSpec$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<Targets, z.ZodTypeDef, Inbound> = z
        .object({
            profile: z.string(),
            videoOnly: z.boolean().default(false),
            id: z.string().optional(),
            spec: z.lazy(() => MultistreamSpec$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                profile: v.profile,
                videoOnly: v.videoOnly,
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.spec === undefined ? null : { spec: v.spec }),
            };
        });

    export type Outbound = {
        profile: string;
        videoOnly: boolean;
        id?: string | undefined;
        spec?: MultistreamSpec$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Targets> = z
        .object({
            profile: z.string(),
            videoOnly: z.boolean().default(false),
            id: z.string().optional(),
            spec: z.lazy(() => MultistreamSpec$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                profile: v.profile,
                videoOnly: v.videoOnly,
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.spec === undefined ? null : { spec: v.spec }),
            };
        });
}

/** @internal */
export namespace Multistream$ {
    export type Inbound = {
        targets?: Array<Targets$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<Multistream, z.ZodTypeDef, Inbound> = z
        .object({
            targets: z.array(z.lazy(() => Targets$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.targets === undefined ? null : { targets: v.targets }),
            };
        });

    export type Outbound = {
        targets?: Array<Targets$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Multistream> = z
        .object({
            targets: z.array(z.lazy(() => Targets$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.targets === undefined ? null : { targets: v.targets }),
            };
        });
}
