/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Phase of the asset storage
 */
export enum Phase {
    Waiting = "waiting",
    Processing = "processing",
    Ready = "ready",
    Failed = "failed",
    Reverted = "reverted",
}

export type Tasks = {
    /**
     * ID of any currently running task that is exporting this
     *
     * @remarks
     * asset to IPFS.
     *
     */
    pending?: string | undefined;
    /**
     * ID of the last task to run successfully, that created
     *
     * @remarks
     * the currently saved data.
     *
     */
    last?: string | undefined;
    /**
     * ID of the last task to fail execution.
     */
    failed?: string | undefined;
};

export type StorageStatus = {
    /**
     * Phase of the asset storage
     */
    phase: Phase;
    /**
     * Current progress of the task updating the storage.
     */
    progress?: number | undefined;
    /**
     * Error message if the last storage changed failed.
     */
    errorMessage?: string | undefined;
    tasks: Tasks;
};

/** @internal */
export namespace Phase$ {
    export const inboundSchema = z.nativeEnum(Phase);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Tasks$ {
    export const inboundSchema: z.ZodType<Tasks, z.ZodTypeDef, unknown> = z.object({
        pending: z.string().optional(),
        last: z.string().optional(),
        failed: z.string().optional(),
    });

    export type Outbound = {
        pending?: string | undefined;
        last?: string | undefined;
        failed?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Tasks> = z.object({
        pending: z.string().optional(),
        last: z.string().optional(),
        failed: z.string().optional(),
    });
}

/** @internal */
export namespace StorageStatus$ {
    export const inboundSchema: z.ZodType<StorageStatus, z.ZodTypeDef, unknown> = z.object({
        phase: Phase$.inboundSchema,
        progress: z.number().optional(),
        errorMessage: z.string().optional(),
        tasks: z.lazy(() => Tasks$.inboundSchema),
    });

    export type Outbound = {
        phase: string;
        progress?: number | undefined;
        errorMessage?: string | undefined;
        tasks: Tasks$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, StorageStatus> = z.object({
        phase: Phase$.outboundSchema,
        progress: z.number().optional(),
        errorMessage: z.string().optional(),
        tasks: z.lazy(() => Tasks$.outboundSchema),
    });
}
