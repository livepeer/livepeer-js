/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Asset, Asset$ } from "./asset";
import { z } from "zod";

/**
 * Output of the upload task
 */
export type UploadOutput = {
    assetSpec?: Asset | undefined;
    additionalProperties: Record<string, any>;
};

/** @internal */
export namespace UploadOutput$ {
    export type Inbound = {
        [additionalProperties: string]: unknown;

        assetSpec?: Asset$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<UploadOutput, z.ZodTypeDef, Inbound> = z
        .object({
            assetSpec: Asset$.inboundSchema.optional(),
        })
        .catchall(z.any())
        .transform((v) => {
            const { assetSpec, ...additionalProperties } = v;

            return {
                ...(v.assetSpec === undefined ? null : { assetSpec: v.assetSpec }),
                additionalProperties,
            };
        });

    export type Outbound = {
        assetSpec?: Asset$.Outbound | undefined;
        [additionalProperties: string]: unknown;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UploadOutput> = z
        .object({
            assetSpec: Asset$.outboundSchema.optional(),
            additionalProperties: z.record(z.any()),
        })
        .transform((v) => {
            return {
                ...v.additionalProperties,
                ...(v.assetSpec === undefined ? null : { assetSpec: v.assetSpec }),
            };
        });
}
