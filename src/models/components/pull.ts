/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * If true, the stream will be pulled from a mobile source.
 */
export enum IsMobile {
    Zero = 0,
    One = 1,
    Two = 2,
}

/**
 * Approximate location of the pull source. The location is used to
 *
 * @remarks
 * determine the closest Livepeer region to pull the stream from.
 */
export type Location = {
    /**
     * Latitude of the pull source in degrees. North is positive,
     *
     * @remarks
     * south is negative.
     */
    lat: number;
    /**
     * Longitude of the pull source in degrees. East is positive,
     *
     * @remarks
     * west is negative.
     */
    lon: number;
};

/**
 * Configuration for a stream that should be actively pulled from an
 *
 * @remarks
 * external source, rather than pushed to Livepeer. If specified, the
 * stream will not have a streamKey.
 */
export type Pull = {
    /**
     * URL from which to pull from.
     */
    source: string;
    /**
     * Headers to be sent with the request to the pull source.
     */
    headers?: Record<string, string> | undefined;
    /**
     * If true, the stream will be pulled from a mobile source.
     */
    isMobile?: IsMobile | undefined;
    /**
     * Approximate location of the pull source. The location is used to
     *
     * @remarks
     * determine the closest Livepeer region to pull the stream from.
     */
    location?: Location | undefined;
};

/** @internal */
export namespace IsMobile$ {
    export const inboundSchema = z.nativeEnum(IsMobile);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace Location$ {
    export const inboundSchema: z.ZodType<Location, z.ZodTypeDef, unknown> = z
        .object({
            lat: z.number(),
            lon: z.number(),
        })
        .transform((v) => {
            return {
                lat: v.lat,
                lon: v.lon,
            };
        });

    export type Outbound = {
        lat: number;
        lon: number;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Location> = z
        .object({
            lat: z.number(),
            lon: z.number(),
        })
        .transform((v) => {
            return {
                lat: v.lat,
                lon: v.lon,
            };
        });
}

/** @internal */
export namespace Pull$ {
    export const inboundSchema: z.ZodType<Pull, z.ZodTypeDef, unknown> = z
        .object({
            source: z.string(),
            headers: z.record(z.string()).optional(),
            isMobile: IsMobile$.inboundSchema.default(IsMobile.Zero),
            location: z.lazy(() => Location$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                source: v.source,
                ...(v.headers === undefined ? null : { headers: v.headers }),
                isMobile: v.isMobile,
                ...(v.location === undefined ? null : { location: v.location }),
            };
        });

    export type Outbound = {
        source: string;
        headers?: Record<string, string> | undefined;
        isMobile: number;
        location?: Location$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Pull> = z
        .object({
            source: z.string(),
            headers: z.record(z.string()).optional(),
            isMobile: IsMobile$.outboundSchema.default(IsMobile.Zero),
            location: z.lazy(() => Location$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                source: v.source,
                ...(v.headers === undefined ? null : { headers: v.headers }),
                isMobile: v.isMobile,
                ...(v.location === undefined ? null : { location: v.location }),
            };
        });
}
