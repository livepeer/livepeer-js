/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type MultistreamTargetPatchPayload = {
    name?: string | undefined;
    /**
     * Livepeer-compatible multistream target URL (RTMP(S) or SRT)
     */
    url: string;
    /**
     * If true then this multistream target will not be used for pushing
     *
     * @remarks
     * even if it is configured in a stream object.
     *
     */
    disabled?: boolean | undefined;
};

/** @internal */
export namespace MultistreamTargetPatchPayload$ {
    export type Inbound = {
        name?: string | undefined;
        url: string;
        disabled?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<MultistreamTargetPatchPayload, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string().optional(),
            url: z.string(),
            disabled: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                url: v.url,
                ...(v.disabled === undefined ? null : { disabled: v.disabled }),
            };
        });

    export type Outbound = {
        name?: string | undefined;
        url: string;
        disabled?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MultistreamTargetPatchPayload> =
        z
            .object({
                name: z.string().optional(),
                url: z.string(),
                disabled: z.boolean().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.name === undefined ? null : { name: v.name }),
                    url: v.url,
                    ...(v.disabled === undefined ? null : { disabled: v.disabled }),
                };
            });
}
