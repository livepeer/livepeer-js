/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type MultistreamTargetPatchPayload = {
  name?: string | undefined;
  /**
   * Livepeer-compatible multistream target URL (RTMP(S) or SRT)
   */
  url: string;
  /**
   * If true then this multistream target will not be used for pushing
   *
   * @remarks
   * even if it is configured in a stream object.
   */
  disabled?: boolean | undefined;
};

/** @internal */
export const MultistreamTargetPatchPayload$inboundSchema: z.ZodType<
  MultistreamTargetPatchPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  url: z.string(),
  disabled: z.boolean().optional(),
});

/** @internal */
export type MultistreamTargetPatchPayload$Outbound = {
  name?: string | undefined;
  url: string;
  disabled?: boolean | undefined;
};

/** @internal */
export const MultistreamTargetPatchPayload$outboundSchema: z.ZodType<
  MultistreamTargetPatchPayload$Outbound,
  z.ZodTypeDef,
  MultistreamTargetPatchPayload
> = z.object({
  name: z.string().optional(),
  url: z.string(),
  disabled: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MultistreamTargetPatchPayload$ {
  /** @deprecated use `MultistreamTargetPatchPayload$inboundSchema` instead. */
  export const inboundSchema = MultistreamTargetPatchPayload$inboundSchema;
  /** @deprecated use `MultistreamTargetPatchPayload$outboundSchema` instead. */
  export const outboundSchema = MultistreamTargetPatchPayload$outboundSchema;
  /** @deprecated use `MultistreamTargetPatchPayload$Outbound` instead. */
  export type Outbound = MultistreamTargetPatchPayload$Outbound;
}

export function multistreamTargetPatchPayloadToJSON(
  multistreamTargetPatchPayload: MultistreamTargetPatchPayload,
): string {
  return JSON.stringify(
    MultistreamTargetPatchPayload$outboundSchema.parse(
      multistreamTargetPatchPayload,
    ),
  );
}

export function multistreamTargetPatchPayloadFromJSON(
  jsonString: string,
): SafeParseResult<MultistreamTargetPatchPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MultistreamTargetPatchPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MultistreamTargetPatchPayload' from JSON`,
  );
}
