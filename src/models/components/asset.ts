/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../internal/utils";
import { IpfsFileInfo } from "./ipfsfileinfo";
import { PlaybackPolicy } from "./playbackpolicy";
import { StorageStatus } from "./storagestatus";
import { Expose, Type } from "class-transformer";

/**
 * Type of the asset.
 */
export enum AssetType {
    Video = "video",
    Audio = "audio",
}

/**
 * Name of the NFT metadata template to export. 'player'
 *
 * @remarks
 * will embed the Livepeer Player on the NFT while 'file'
 * will reference only the immutable MP4 files.
 *
 */
export enum AssetNftMetadataTemplate {
    File = "file",
    Player = "player",
}

/**
 * Additional data to add to the NFT metadata exported to
 *
 * @remarks
 * IPFS. Will be deep merged with the default metadata
 * exported.
 *
 */
export class AssetNftMetadata extends SpeakeasyBase {}

export class AssetSpec extends SpeakeasyBase {
    /**
     * Name of the NFT metadata template to export. 'player'
     *
     * @remarks
     * will embed the Livepeer Player on the NFT while 'file'
     * will reference only the immutable MP4 files.
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "nftMetadataTemplate" })
    nftMetadataTemplate?: AssetNftMetadataTemplate;

    /**
     * Additional data to add to the NFT metadata exported to
     *
     * @remarks
     * IPFS. Will be deep merged with the default metadata
     * exported.
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "nftMetadata" })
    @Type(() => AssetNftMetadata)
    nftMetadata?: AssetNftMetadata;
}

export class Ipfs extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "spec" })
    @Type(() => AssetSpec)
    spec?: AssetSpec;

    /**
     * CID of the file on IPFS
     */
    @SpeakeasyMetadata()
    @Expose({ name: "cid" })
    cid?: string;

    /**
     * URL with IPFS scheme for the file
     */
    @SpeakeasyMetadata()
    @Expose({ name: "url" })
    url?: string;

    /**
     * URL to access file via HTTP through an IPFS gateway
     */
    @SpeakeasyMetadata()
    @Expose({ name: "gatewayUrl" })
    gatewayUrl?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "nftMetadata" })
    @Type(() => IpfsFileInfo)
    nftMetadata?: IpfsFileInfo;

    /**
     * Timestamp (in milliseconds) at which IPFS export task was
     *
     * @remarks
     * updated
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "updatedAt" })
    updatedAt?: number;
}

export class AssetStorage extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "ipfs" })
    @Type(() => Ipfs)
    ipfs?: Ipfs;

    @SpeakeasyMetadata()
    @Expose({ name: "status" })
    @Type(() => StorageStatus)
    status?: StorageStatus;
}

/**
 * Phase of the asset
 */
export enum AssetPhase {
    Uploading = "uploading",
    Waiting = "waiting",
    Processing = "processing",
    Ready = "ready",
    Failed = "failed",
}

/**
 * Status of the asset
 */
export class AssetStatus extends SpeakeasyBase {
    /**
     * Phase of the asset
     */
    @SpeakeasyMetadata()
    @Expose({ name: "phase" })
    phase: AssetPhase;

    /**
     * Timestamp (in milliseconds) at which the asset was last updated
     */
    @SpeakeasyMetadata()
    @Expose({ name: "updatedAt" })
    updatedAt: number;

    /**
     * Current progress of the task creating this asset.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "progress" })
    progress?: number;

    /**
     * Error message if the asset creation failed.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "errorMessage" })
    errorMessage?: string;
}

export class Hash extends SpeakeasyBase {
    /**
     * Hash of the asset
     */
    @SpeakeasyMetadata()
    @Expose({ name: "hash" })
    hash?: string;

    /**
     * Hash algorithm used to compute the hash
     */
    @SpeakeasyMetadata()
    @Expose({ name: "algorithm" })
    algorithm?: string;
}

/**
 * type of track
 */
export enum AssetSchemasType {
    Video = "video",
    Audio = "audio",
}

export class Tracks extends SpeakeasyBase {
    /**
     * type of track
     */
    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type: AssetSchemasType;

    /**
     * Codec of the track
     */
    @SpeakeasyMetadata()
    @Expose({ name: "codec" })
    codec: string;

    /**
     * Start time of the track in seconds
     */
    @SpeakeasyMetadata()
    @Expose({ name: "startTime" })
    startTime?: number;

    /**
     * Duration of the track in seconds
     */
    @SpeakeasyMetadata()
    @Expose({ name: "duration" })
    duration?: number;

    /**
     * Bitrate of the track in bits per second
     */
    @SpeakeasyMetadata()
    @Expose({ name: "bitrate" })
    bitrate?: number;

    /**
     * Width of the track - only for video tracks
     */
    @SpeakeasyMetadata()
    @Expose({ name: "width" })
    width?: number;

    /**
     * Height of the track - only for video tracks
     */
    @SpeakeasyMetadata()
    @Expose({ name: "height" })
    height?: number;

    /**
     * Pixel format of the track - only for video tracks
     */
    @SpeakeasyMetadata()
    @Expose({ name: "pixelFormat" })
    pixelFormat?: string;

    /**
     * Frame rate of the track - only for video tracks
     */
    @SpeakeasyMetadata()
    @Expose({ name: "fps" })
    fps?: number;

    /**
     * Amount of audio channels in the track
     */
    @SpeakeasyMetadata()
    @Expose({ name: "channels" })
    channels?: number;

    /**
     * Sample rate of the track in samples per second - only for
     *
     * @remarks
     * audio tracks
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "sampleRate" })
    sampleRate?: number;

    /**
     * Bit depth of the track - only for audio tracks
     */
    @SpeakeasyMetadata()
    @Expose({ name: "bitDepth" })
    bitDepth?: number;
}

/**
 * Video metadata
 */
export class VideoSpec extends SpeakeasyBase {
    /**
     * Format of the asset
     */
    @SpeakeasyMetadata()
    @Expose({ name: "format" })
    format?: string;

    /**
     * Duration of the asset in seconds (float)
     */
    @SpeakeasyMetadata()
    @Expose({ name: "duration" })
    duration?: number;

    /**
     * Bitrate of the video in bits per second
     */
    @SpeakeasyMetadata()
    @Expose({ name: "bitrate" })
    bitrate?: number;

    /**
     * List of tracks associated with the asset when the format
     *
     * @remarks
     * contemplates them (e.g. mp4)
     *
     */
    @SpeakeasyMetadata({ elemType: Tracks })
    @Expose({ name: "tracks" })
    @Type(() => Tracks)
    tracks?: Tracks[];
}

export class Asset extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id: string;

    /**
     * Type of the asset.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type?: AssetType;

    /**
     * Used to form playback URL and storage folder
     */
    @SpeakeasyMetadata()
    @Expose({ name: "playbackId" })
    playbackId?: string;

    /**
     * URL for HLS playback
     */
    @SpeakeasyMetadata()
    @Expose({ name: "playbackUrl" })
    playbackUrl?: string;

    /**
     * URL to manually download the asset if desired
     */
    @SpeakeasyMetadata()
    @Expose({ name: "downloadUrl" })
    downloadUrl?: string;

    /**
     * Whether the playback policy for a asset or stream is public or signed
     */
    @SpeakeasyMetadata()
    @Expose({ name: "playbackPolicy" })
    @Type(() => PlaybackPolicy)
    playbackPolicy?: PlaybackPolicy;

    @SpeakeasyMetadata()
    @Expose({ name: "source" })
    source: any;

    @SpeakeasyMetadata()
    @Expose({ name: "creatorId" })
    creatorId?: any;

    @SpeakeasyMetadata()
    @Expose({ name: "storage" })
    @Type(() => AssetStorage)
    storage?: AssetStorage;

    /**
     * Status of the asset
     */
    @SpeakeasyMetadata()
    @Expose({ name: "status" })
    @Type(() => AssetStatus)
    status?: AssetStatus;

    /**
     * Name of the asset. This is not necessarily the filename, can be a
     *
     * @remarks
     * custom name or title
     *
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name: string;

    /**
     * Timestamp (in milliseconds) at which asset was created
     */
    @SpeakeasyMetadata()
    @Expose({ name: "createdAt" })
    createdAt?: number;

    /**
     * Size of the asset in bytes
     */
    @SpeakeasyMetadata()
    @Expose({ name: "size" })
    size?: number;

    /**
     * Hash of the asset
     */
    @SpeakeasyMetadata({ elemType: Hash })
    @Expose({ name: "hash" })
    @Type(() => Hash)
    hash?: Hash[];

    /**
     * Video metadata
     */
    @SpeakeasyMetadata()
    @Expose({ name: "videoSpec" })
    @Type(() => VideoSpec)
    videoSpec?: VideoSpec;
}
