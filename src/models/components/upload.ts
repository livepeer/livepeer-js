/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Encryption, Encryption$ } from "./encryption";
import { z } from "zod";

/**
 * Parameters for the upload task
 */
export type Upload = {
    /**
     * URL of the asset to "upload"
     */
    url?: string | undefined;
    encryption?: Encryption | undefined;
    /**
     * ID of the original recorded session to avoid re-transcoding
     *
     * @remarks
     * of the same content. Only used for import task.
     *
     */
    recordedSessionId?: string | undefined;
};

/** @internal */
export namespace Upload$ {
    export type Inbound = {
        url?: string | undefined;
        encryption?: Encryption$.Inbound | undefined;
        recordedSessionId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Upload, z.ZodTypeDef, Inbound> = z
        .object({
            url: z.string().optional(),
            encryption: Encryption$.inboundSchema.optional(),
            recordedSessionId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.encryption === undefined ? null : { encryption: v.encryption }),
                ...(v.recordedSessionId === undefined
                    ? null
                    : { recordedSessionId: v.recordedSessionId }),
            };
        });

    export type Outbound = {
        url?: string | undefined;
        encryption?: Encryption$.Outbound | undefined;
        recordedSessionId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Upload> = z
        .object({
            url: z.string().optional(),
            encryption: Encryption$.outboundSchema.optional(),
            recordedSessionId: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.encryption === undefined ? null : { encryption: v.encryption }),
                ...(v.recordedSessionId === undefined
                    ? null
                    : { recordedSessionId: v.recordedSessionId }),
            };
        });
}
