/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum CreatorIdType {
    Unverified = "unverified",
}

export type CreatorId1 = {
    type: CreatorIdType;
    /**
     * Developer-managed ID of the user who created the resource.
     */
    value: string;
};

export type CreatorId = CreatorId1;

/** @internal */
export const CreatorIdType$: z.ZodNativeEnum<typeof CreatorIdType> = z.nativeEnum(CreatorIdType);

/** @internal */
export namespace CreatorId1$ {
    export const inboundSchema: z.ZodType<CreatorId1, z.ZodTypeDef, unknown> = z
        .object({
            type: CreatorIdType$,
            value: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                value: v.value,
            };
        });

    export type Outbound = {
        type: CreatorIdType;
        value: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreatorId1> = z
        .object({
            type: CreatorIdType$,
            value: z.string(),
        })
        .transform((v) => {
            return {
                type: v.type,
                value: v.value,
            };
        });
}

/** @internal */
export namespace CreatorId$ {
    export const inboundSchema: z.ZodType<CreatorId, z.ZodTypeDef, unknown> = z.lazy(
        () => CreatorId1$.inboundSchema
    );

    export type Outbound = CreatorId1$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreatorId> = z.lazy(
        () => CreatorId1$.outboundSchema
    );
}
