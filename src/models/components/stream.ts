/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { CreatorId, CreatorId$ } from "./creatorid";
import { FfmpegProfile, FfmpegProfile$ } from "./ffmpegprofile";
import { PlaybackPolicy, PlaybackPolicy$ } from "./playbackpolicy";
import { z } from "zod";

export type StreamTargets = {
    /**
     * Name of the transcoding profile that should be sent. Use
     *
     * @remarks
     * "source" for pushing the source stream data
     *
     */
    profile: string;
    /**
     * If true, the stream audio will be muted, and only silent
     *
     * @remarks
     * video will be pushed to the target.
     *
     */
    videoOnly?: boolean | undefined;
    /**
     * ID of the multistream target object where to push this stream
     */
    id?: string | undefined;
};

export type StreamMultistream = {
    /**
     * References to targets where this stream will be simultaneously
     *
     * @remarks
     * streamed to
     *
     */
    targets?: Array<StreamTargets> | undefined;
};

export type Stream = {
    id?: string | undefined;
    name: string;
    creatorId?: CreatorId | undefined;
    lastSeen?: number | undefined;
    sourceSegments?: number | undefined;
    transcodedSegments?: number | undefined;
    /**
     * Duration of all the source segments, sec
     */
    sourceSegmentsDuration?: number | undefined;
    /**
     * Duration of all the transcoded segments, sec
     */
    transcodedSegmentsDuration?: number | undefined;
    sourceBytes?: number | undefined;
    transcodedBytes?: number | undefined;
    /**
     * Rate at which sourceBytes increases (bytes/second)
     */
    ingestRate?: number | undefined;
    /**
     * Rate at which transcodedBytes increases (bytes/second)
     */
    outgoingRate?: number | undefined;
    /**
     * If currently active
     */
    isActive?: boolean | undefined;
    /**
     * Indicates whether the stream is healthy or not.
     */
    isHealthy?: boolean | undefined;
    /**
     * A string array of human-readable errors describing issues affecting
     *
     * @remarks
     * the stream, if any.
     *
     */
    issues?: Array<string> | undefined;
    /**
     * Name of the token used to create this object
     */
    createdByTokenName?: string | undefined;
    /**
     * Timestamp (in milliseconds) at which the stream object was created
     */
    createdAt?: number | undefined;
    /**
     * Points to the parent stream object
     */
    parentId?: string | undefined;
    /**
     * Used to form the RTMP ingest URL
     */
    streamKey?: string | undefined;
    /**
     * Used to form playback URL
     */
    playbackId?: string | undefined;
    /**
     * Whether the playback policy for a asset or stream is public or signed
     */
    playbackPolicy?: PlaybackPolicy | undefined;
    profiles?: Array<FfmpegProfile> | undefined;
    /**
     * Should this stream be recorded? Uses default settings. For more
     *
     * @remarks
     * customization, create and configure an object store.
     *
     */
    record?: boolean | undefined;
    multistream?: StreamMultistream | undefined;
    /**
     * If currently suspended
     */
    suspended?: boolean | undefined;
};

/** @internal */
export namespace StreamTargets$ {
    export type Inbound = {
        profile: string;
        videoOnly?: boolean | undefined;
        id?: string | undefined;
    };

    export const inboundSchema: z.ZodType<StreamTargets, z.ZodTypeDef, Inbound> = z
        .object({
            profile: z.string(),
            videoOnly: z.boolean().default(false),
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                profile: v.profile,
                videoOnly: v.videoOnly,
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });

    export type Outbound = {
        profile: string;
        videoOnly: boolean;
        id?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, StreamTargets> = z
        .object({
            profile: z.string(),
            videoOnly: z.boolean().default(false),
            id: z.string().optional(),
        })
        .transform((v) => {
            return {
                profile: v.profile,
                videoOnly: v.videoOnly,
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });
}

/** @internal */
export namespace StreamMultistream$ {
    export type Inbound = {
        targets?: Array<StreamTargets$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<StreamMultistream, z.ZodTypeDef, Inbound> = z
        .object({
            targets: z.array(z.lazy(() => StreamTargets$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.targets === undefined ? null : { targets: v.targets }),
            };
        });

    export type Outbound = {
        targets?: Array<StreamTargets$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, StreamMultistream> = z
        .object({
            targets: z.array(z.lazy(() => StreamTargets$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.targets === undefined ? null : { targets: v.targets }),
            };
        });
}

/** @internal */
export namespace Stream$ {
    export type Inbound = {
        id?: string | undefined;
        name: string;
        creatorId?: CreatorId$.Inbound | undefined;
        lastSeen?: number | undefined;
        sourceSegments?: number | undefined;
        transcodedSegments?: number | undefined;
        sourceSegmentsDuration?: number | undefined;
        transcodedSegmentsDuration?: number | undefined;
        sourceBytes?: number | undefined;
        transcodedBytes?: number | undefined;
        ingestRate?: number | undefined;
        outgoingRate?: number | undefined;
        isActive?: boolean | undefined;
        isHealthy?: boolean | undefined;
        issues?: Array<string> | undefined;
        createdByTokenName?: string | undefined;
        createdAt?: number | undefined;
        parentId?: string | undefined;
        streamKey?: string | undefined;
        playbackId?: string | undefined;
        playbackPolicy?: PlaybackPolicy$.Inbound | undefined;
        profiles?: Array<FfmpegProfile$.Inbound> | undefined;
        record?: boolean | undefined;
        multistream?: StreamMultistream$.Inbound | undefined;
        suspended?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<Stream, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            name: z.string(),
            creatorId: CreatorId$.inboundSchema.optional(),
            lastSeen: z.number().optional(),
            sourceSegments: z.number().optional(),
            transcodedSegments: z.number().optional(),
            sourceSegmentsDuration: z.number().optional(),
            transcodedSegmentsDuration: z.number().optional(),
            sourceBytes: z.number().optional(),
            transcodedBytes: z.number().optional(),
            ingestRate: z.number().optional(),
            outgoingRate: z.number().optional(),
            isActive: z.boolean().optional(),
            isHealthy: z.boolean().optional(),
            issues: z.array(z.string()).optional(),
            createdByTokenName: z.string().optional(),
            createdAt: z.number().optional(),
            parentId: z.string().optional(),
            streamKey: z.string().optional(),
            playbackId: z.string().optional(),
            playbackPolicy: PlaybackPolicy$.inboundSchema.optional(),
            profiles: z.array(FfmpegProfile$.inboundSchema).optional(),
            record: z.boolean().optional(),
            multistream: z.lazy(() => StreamMultistream$.inboundSchema).optional(),
            suspended: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                name: v.name,
                ...(v.creatorId === undefined ? null : { creatorId: v.creatorId }),
                ...(v.lastSeen === undefined ? null : { lastSeen: v.lastSeen }),
                ...(v.sourceSegments === undefined ? null : { sourceSegments: v.sourceSegments }),
                ...(v.transcodedSegments === undefined
                    ? null
                    : { transcodedSegments: v.transcodedSegments }),
                ...(v.sourceSegmentsDuration === undefined
                    ? null
                    : { sourceSegmentsDuration: v.sourceSegmentsDuration }),
                ...(v.transcodedSegmentsDuration === undefined
                    ? null
                    : { transcodedSegmentsDuration: v.transcodedSegmentsDuration }),
                ...(v.sourceBytes === undefined ? null : { sourceBytes: v.sourceBytes }),
                ...(v.transcodedBytes === undefined
                    ? null
                    : { transcodedBytes: v.transcodedBytes }),
                ...(v.ingestRate === undefined ? null : { ingestRate: v.ingestRate }),
                ...(v.outgoingRate === undefined ? null : { outgoingRate: v.outgoingRate }),
                ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                ...(v.isHealthy === undefined ? null : { isHealthy: v.isHealthy }),
                ...(v.issues === undefined ? null : { issues: v.issues }),
                ...(v.createdByTokenName === undefined
                    ? null
                    : { createdByTokenName: v.createdByTokenName }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.parentId === undefined ? null : { parentId: v.parentId }),
                ...(v.streamKey === undefined ? null : { streamKey: v.streamKey }),
                ...(v.playbackId === undefined ? null : { playbackId: v.playbackId }),
                ...(v.playbackPolicy === undefined ? null : { playbackPolicy: v.playbackPolicy }),
                ...(v.profiles === undefined ? null : { profiles: v.profiles }),
                ...(v.record === undefined ? null : { record: v.record }),
                ...(v.multistream === undefined ? null : { multistream: v.multistream }),
                ...(v.suspended === undefined ? null : { suspended: v.suspended }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        name: string;
        creatorId?: CreatorId$.Outbound | undefined;
        lastSeen?: number | undefined;
        sourceSegments?: number | undefined;
        transcodedSegments?: number | undefined;
        sourceSegmentsDuration?: number | undefined;
        transcodedSegmentsDuration?: number | undefined;
        sourceBytes?: number | undefined;
        transcodedBytes?: number | undefined;
        ingestRate?: number | undefined;
        outgoingRate?: number | undefined;
        isActive?: boolean | undefined;
        isHealthy?: boolean | undefined;
        issues?: Array<string> | undefined;
        createdByTokenName?: string | undefined;
        createdAt?: number | undefined;
        parentId?: string | undefined;
        streamKey?: string | undefined;
        playbackId?: string | undefined;
        playbackPolicy?: PlaybackPolicy$.Outbound | undefined;
        profiles?: Array<FfmpegProfile$.Outbound> | undefined;
        record?: boolean | undefined;
        multistream?: StreamMultistream$.Outbound | undefined;
        suspended?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Stream> = z
        .object({
            id: z.string().optional(),
            name: z.string(),
            creatorId: CreatorId$.outboundSchema.optional(),
            lastSeen: z.number().optional(),
            sourceSegments: z.number().optional(),
            transcodedSegments: z.number().optional(),
            sourceSegmentsDuration: z.number().optional(),
            transcodedSegmentsDuration: z.number().optional(),
            sourceBytes: z.number().optional(),
            transcodedBytes: z.number().optional(),
            ingestRate: z.number().optional(),
            outgoingRate: z.number().optional(),
            isActive: z.boolean().optional(),
            isHealthy: z.boolean().optional(),
            issues: z.array(z.string()).optional(),
            createdByTokenName: z.string().optional(),
            createdAt: z.number().optional(),
            parentId: z.string().optional(),
            streamKey: z.string().optional(),
            playbackId: z.string().optional(),
            playbackPolicy: PlaybackPolicy$.outboundSchema.optional(),
            profiles: z.array(FfmpegProfile$.outboundSchema).optional(),
            record: z.boolean().optional(),
            multistream: z.lazy(() => StreamMultistream$.outboundSchema).optional(),
            suspended: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                name: v.name,
                ...(v.creatorId === undefined ? null : { creatorId: v.creatorId }),
                ...(v.lastSeen === undefined ? null : { lastSeen: v.lastSeen }),
                ...(v.sourceSegments === undefined ? null : { sourceSegments: v.sourceSegments }),
                ...(v.transcodedSegments === undefined
                    ? null
                    : { transcodedSegments: v.transcodedSegments }),
                ...(v.sourceSegmentsDuration === undefined
                    ? null
                    : { sourceSegmentsDuration: v.sourceSegmentsDuration }),
                ...(v.transcodedSegmentsDuration === undefined
                    ? null
                    : { transcodedSegmentsDuration: v.transcodedSegmentsDuration }),
                ...(v.sourceBytes === undefined ? null : { sourceBytes: v.sourceBytes }),
                ...(v.transcodedBytes === undefined
                    ? null
                    : { transcodedBytes: v.transcodedBytes }),
                ...(v.ingestRate === undefined ? null : { ingestRate: v.ingestRate }),
                ...(v.outgoingRate === undefined ? null : { outgoingRate: v.outgoingRate }),
                ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                ...(v.isHealthy === undefined ? null : { isHealthy: v.isHealthy }),
                ...(v.issues === undefined ? null : { issues: v.issues }),
                ...(v.createdByTokenName === undefined
                    ? null
                    : { createdByTokenName: v.createdByTokenName }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.parentId === undefined ? null : { parentId: v.parentId }),
                ...(v.streamKey === undefined ? null : { streamKey: v.streamKey }),
                ...(v.playbackId === undefined ? null : { playbackId: v.playbackId }),
                ...(v.playbackPolicy === undefined ? null : { playbackPolicy: v.playbackPolicy }),
                ...(v.profiles === undefined ? null : { profiles: v.profiles }),
                ...(v.record === undefined ? null : { record: v.record }),
                ...(v.multistream === undefined ? null : { multistream: v.multistream }),
                ...(v.suspended === undefined ? null : { suspended: v.suspended }),
            };
        });
}
