/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../internal/utils";
import { TranscodeProfile } from "./transcodeprofile";
import { Expose, Type } from "class-transformer";

/**
 * HLS output format
 */
export class Hls extends SpeakeasyBase {
    /**
     * Path for the HLS output
     */
    @SpeakeasyMetadata()
    @Expose({ name: "path" })
    path: string;
}

/**
 * MP4 output format
 */
export class Mp4 extends SpeakeasyBase {
    /**
     * Path for the MP4 output
     */
    @SpeakeasyMetadata()
    @Expose({ name: "path" })
    path: string;
}

/**
 * FMP4 output format
 */
export class Fmp4 extends SpeakeasyBase {
    /**
     * Path for the FMP4 output
     */
    @SpeakeasyMetadata()
    @Expose({ name: "path" })
    path: string;
}

/**
 * Output formats
 */
export class Outputs extends SpeakeasyBase {
    /**
     * HLS output format
     */
    @SpeakeasyMetadata()
    @Expose({ name: "hls" })
    @Type(() => Hls)
    hls?: Hls;

    /**
     * MP4 output format
     */
    @SpeakeasyMetadata()
    @Expose({ name: "mp4" })
    @Type(() => Mp4)
    mp4?: Mp4;

    /**
     * FMP4 output format
     */
    @SpeakeasyMetadata()
    @Expose({ name: "fmp4" })
    @Type(() => Fmp4)
    fmp4?: Fmp4;
}

export class TranscodePayload extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "input" })
    input: any;

    @SpeakeasyMetadata()
    @Expose({ name: "storage" })
    storage: any;

    /**
     * Output formats
     */
    @SpeakeasyMetadata()
    @Expose({ name: "outputs" })
    @Type(() => Outputs)
    outputs: Outputs;

    @SpeakeasyMetadata({ elemType: TranscodeProfile })
    @Expose({ name: "profiles" })
    @Type(() => TranscodeProfile)
    profiles?: TranscodeProfile[];

    /**
     * How many seconds the duration of each output segment should be
     */
    @SpeakeasyMetadata()
    @Expose({ name: "targetSegmentSizeSecs" })
    targetSegmentSizeSecs?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "creatorId" })
    creatorId?: any;

    /**
     * Decides if the output video should include C2PA signature
     */
    @SpeakeasyMetadata()
    @Expose({ name: "c2pa" })
    c2pa?: boolean;
}
