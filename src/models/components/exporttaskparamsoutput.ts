/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { IpfsExportParams, IpfsExportParams$ } from "./ipfsexportparams";
import { IpfsExportParamsOutput, IpfsExportParamsOutput$ } from "./ipfsexportparamsoutput";
import { z } from "zod";

export type ExportTaskParams2Output = {
    ipfs: IpfsExportParamsOutput;
};

/**
 * custom URL parameters for the export task
 */
export type Custom = {
    /**
     * URL where to export the asset
     */
    url: string;
    /**
     * Method to use on the export request
     */
    method?: string | undefined;
    /**
     * Headers to add to the export request
     */
    headers?: Record<string, string> | undefined;
};

export type ExportTaskParams1 = {
    /**
     * custom URL parameters for the export task
     */
    custom: Custom;
};

/**
 * Parameters for the export task
 */
export type ExportTaskParamsOutput = ExportTaskParams1 | ExportTaskParams2Output;

export type ExportTaskParams2 = {
    ipfs: IpfsExportParams;
};

/**
 * Parameters for the export task
 */
export type ExportTaskParams = ExportTaskParams1 | ExportTaskParams2;

/** @internal */
export namespace ExportTaskParams2Output$ {
    export type Inbound = {
        ipfs: IpfsExportParamsOutput$.Inbound;
    };

    export const inboundSchema: z.ZodType<ExportTaskParams2Output, z.ZodTypeDef, Inbound> = z
        .object({
            ipfs: IpfsExportParamsOutput$.inboundSchema,
        })
        .transform((v) => {
            return {
                ipfs: v.ipfs,
            };
        });

    export type Outbound = {
        ipfs: IpfsExportParamsOutput$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ExportTaskParams2Output> = z
        .object({
            ipfs: IpfsExportParamsOutput$.outboundSchema,
        })
        .transform((v) => {
            return {
                ipfs: v.ipfs,
            };
        });
}

/** @internal */
export namespace Custom$ {
    export type Inbound = {
        url: string;
        method?: string | undefined;
        headers?: Record<string, string> | undefined;
    };

    export const inboundSchema: z.ZodType<Custom, z.ZodTypeDef, Inbound> = z
        .object({
            url: z.string(),
            method: z.string().default("PUT"),
            headers: z.record(z.string()).optional(),
        })
        .transform((v) => {
            return {
                url: v.url,
                method: v.method,
                ...(v.headers === undefined ? null : { headers: v.headers }),
            };
        });

    export type Outbound = {
        url: string;
        method: string;
        headers?: Record<string, string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Custom> = z
        .object({
            url: z.string(),
            method: z.string().default("PUT"),
            headers: z.record(z.string()).optional(),
        })
        .transform((v) => {
            return {
                url: v.url,
                method: v.method,
                ...(v.headers === undefined ? null : { headers: v.headers }),
            };
        });
}

/** @internal */
export namespace ExportTaskParams1$ {
    export type Inbound = {
        custom: Custom$.Inbound;
    };

    export const inboundSchema: z.ZodType<ExportTaskParams1, z.ZodTypeDef, Inbound> = z
        .object({
            custom: z.lazy(() => Custom$.inboundSchema),
        })
        .transform((v) => {
            return {
                custom: v.custom,
            };
        });

    export type Outbound = {
        custom: Custom$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ExportTaskParams1> = z
        .object({
            custom: z.lazy(() => Custom$.outboundSchema),
        })
        .transform((v) => {
            return {
                custom: v.custom,
            };
        });
}

/** @internal */
export namespace ExportTaskParamsOutput$ {
    export type Inbound = ExportTaskParams1$.Inbound | ExportTaskParams2Output$.Inbound;

    export type Outbound = ExportTaskParams1$.Outbound | ExportTaskParams2Output$.Outbound;

    export const inboundSchema: z.ZodType<ExportTaskParamsOutput, z.ZodTypeDef, Inbound> = z.union([
        z.lazy(() => ExportTaskParams1$.inboundSchema),
        z.lazy(() => ExportTaskParams2Output$.inboundSchema),
    ]);

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ExportTaskParamsOutput> =
        z.union([
            z.lazy(() => ExportTaskParams1$.outboundSchema),
            z.lazy(() => ExportTaskParams2Output$.outboundSchema),
        ]);
}

/** @internal */
export namespace ExportTaskParams2$ {
    export type Inbound = {
        ipfs: IpfsExportParams$.Inbound;
    };

    export const inboundSchema: z.ZodType<ExportTaskParams2, z.ZodTypeDef, Inbound> = z
        .object({
            ipfs: IpfsExportParams$.inboundSchema,
        })
        .transform((v) => {
            return {
                ipfs: v.ipfs,
            };
        });

    export type Outbound = {
        ipfs: IpfsExportParams$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ExportTaskParams2> = z
        .object({
            ipfs: IpfsExportParams$.outboundSchema,
        })
        .transform((v) => {
            return {
                ipfs: v.ipfs,
            };
        });
}

/** @internal */
export namespace ExportTaskParams$ {
    export type Inbound = ExportTaskParams1$.Inbound | ExportTaskParams2$.Inbound;

    export type Outbound = ExportTaskParams1$.Outbound | ExportTaskParams2$.Outbound;

    export const inboundSchema: z.ZodType<ExportTaskParams, z.ZodTypeDef, Inbound> = z.union([
        z.lazy(() => ExportTaskParams1$.inboundSchema),
        z.lazy(() => ExportTaskParams2$.inboundSchema),
    ]);

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ExportTaskParams> = z.union([
        z.lazy(() => ExportTaskParams1$.outboundSchema),
        z.lazy(() => ExportTaskParams2$.outboundSchema),
    ]);
}
