/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type IpfsExportParams2 = {
    /**
     * Will be added to the pinata_api_key header.
     */
    apiKey: string;
};

export type IpfsExportParams1 = {};

/**
 * Custom credentials for the Piñata service. Must have either
 *
 * @remarks
 * a JWT or an API key and an API secret.
 *
 */
export type Pinata = IpfsExportParams1 | IpfsExportParams2;

export type IpfsExportParams = {
    dollarRef?: any | undefined;
    /**
     * Custom credentials for the Piñata service. Must have either
     *
     * @remarks
     * a JWT or an API key and an API secret.
     *
     */
    pinata?: IpfsExportParams1 | IpfsExportParams2 | undefined;
};

/** @internal */
export namespace IpfsExportParams2$ {
    export const inboundSchema: z.ZodType<IpfsExportParams2, z.ZodTypeDef, unknown> = z
        .object({
            apiKey: z.string(),
        })
        .transform((v) => {
            return {
                apiKey: v.apiKey,
            };
        });

    export type Outbound = {
        apiKey: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, IpfsExportParams2> = z
        .object({
            apiKey: z.string(),
        })
        .transform((v) => {
            return {
                apiKey: v.apiKey,
            };
        });
}

/** @internal */
export namespace IpfsExportParams1$ {
    export const inboundSchema: z.ZodType<IpfsExportParams1, z.ZodTypeDef, unknown> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, IpfsExportParams1> = z.object(
        {}
    );
}

/** @internal */
export namespace Pinata$ {
    export const inboundSchema: z.ZodType<Pinata, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => IpfsExportParams1$.inboundSchema),
        z.lazy(() => IpfsExportParams2$.inboundSchema),
    ]);

    export type Outbound = IpfsExportParams1$.Outbound | IpfsExportParams2$.Outbound;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Pinata> = z.union([
        z.lazy(() => IpfsExportParams1$.outboundSchema),
        z.lazy(() => IpfsExportParams2$.outboundSchema),
    ]);
}

/** @internal */
export namespace IpfsExportParams$ {
    export const inboundSchema: z.ZodType<IpfsExportParams, z.ZodTypeDef, unknown> = z
        .object({
            $ref: z.any().optional(),
            pinata: z
                .union([
                    z.lazy(() => IpfsExportParams1$.inboundSchema),
                    z.lazy(() => IpfsExportParams2$.inboundSchema),
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.$ref === undefined ? null : { dollarRef: v.$ref }),
                ...(v.pinata === undefined ? null : { pinata: v.pinata }),
            };
        });

    export type Outbound = {
        $ref?: any | undefined;
        pinata?: IpfsExportParams1$.Outbound | IpfsExportParams2$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, IpfsExportParams> = z
        .object({
            dollarRef: z.any().optional(),
            pinata: z
                .union([
                    z.lazy(() => IpfsExportParams1$.outboundSchema),
                    z.lazy(() => IpfsExportParams2$.outboundSchema),
                ])
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.dollarRef === undefined ? null : { $ref: v.dollarRef }),
                ...(v.pinata === undefined ? null : { pinata: v.pinata }),
            };
        });
}
