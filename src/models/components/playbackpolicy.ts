/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum Type {
    Public = "public",
    Jwt = "jwt",
    Webhook = "webhook",
}

/**
 * Whether the playback policy for a asset or stream is public or signed
 */
export type PlaybackPolicy = {
    type: Type;
    /**
     * ID of the webhook to use for playback policy
     */
    webhookId?: string | undefined;
    /**
     * User-defined webhook context
     */
    webhookContext?: Record<string, any> | undefined;
    /**
     * Interval (in seconds) at which the playback policy should be
     *
     * @remarks
     * refreshed (default 600 seconds)
     *
     */
    refreshInterval?: number | undefined;
};

/** @internal */
export const Type$: z.ZodNativeEnum<typeof Type> = z.nativeEnum(Type);

/** @internal */
export namespace PlaybackPolicy$ {
    export const inboundSchema: z.ZodType<PlaybackPolicy, z.ZodTypeDef, unknown> = z
        .object({
            type: Type$,
            webhookId: z.string().optional(),
            webhookContext: z.record(z.any()).optional(),
            refreshInterval: z.number().optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ...(v.webhookId === undefined ? null : { webhookId: v.webhookId }),
                ...(v.webhookContext === undefined ? null : { webhookContext: v.webhookContext }),
                ...(v.refreshInterval === undefined
                    ? null
                    : { refreshInterval: v.refreshInterval }),
            };
        });

    export type Outbound = {
        type: Type;
        webhookId?: string | undefined;
        webhookContext?: Record<string, any> | undefined;
        refreshInterval?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PlaybackPolicy> = z
        .object({
            type: Type$,
            webhookId: z.string().optional(),
            webhookContext: z.record(z.any()).optional(),
            refreshInterval: z.number().optional(),
        })
        .transform((v) => {
            return {
                type: v.type,
                ...(v.webhookId === undefined ? null : { webhookId: v.webhookId }),
                ...(v.webhookContext === undefined ? null : { webhookContext: v.webhookContext }),
                ...(v.refreshInterval === undefined
                    ? null
                    : { refreshInterval: v.refreshInterval }),
            };
        });
}
