/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export enum Type {
    Public = "public",
    Jwt = "jwt",
    Webhook = "webhook",
}

/**
 * Whether the playback policy for an asset or stream is public or signed
 */
export type PlaybackPolicy = {
    type: Type;
    /**
     * ID of the webhook to use for playback policy
     */
    webhookId?: string | undefined;
    /**
     * User-defined webhook context
     */
    webhookContext?: { [k: string]: any } | undefined;
    /**
     * Interval (in seconds) at which the playback policy should be
     *
     * @remarks
     * refreshed (default 600 seconds)
     *
     */
    refreshInterval?: number | undefined;
    /**
     * List of allowed origins for CORS playback (<scheme>://<hostname>:<port>, <scheme>://<hostname>)
     */
    allowedOrigins?: Array<string> | undefined;
};

/** @internal */
export namespace Type$ {
    export const inboundSchema = z.nativeEnum(Type);
    export const outboundSchema = inboundSchema;
}

/** @internal */
export namespace PlaybackPolicy$ {
    export const inboundSchema: z.ZodType<PlaybackPolicy, z.ZodTypeDef, unknown> = z.object({
        type: Type$.inboundSchema,
        webhookId: z.string().optional(),
        webhookContext: z.record(z.any()).optional(),
        refreshInterval: z.number().optional(),
        allowedOrigins: z.array(z.string()).optional(),
    });

    export type Outbound = {
        type: string;
        webhookId?: string | undefined;
        webhookContext?: { [k: string]: any } | undefined;
        refreshInterval?: number | undefined;
        allowedOrigins?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PlaybackPolicy> = z.object({
        type: Type$.outboundSchema,
        webhookId: z.string().optional(),
        webhookContext: z.record(z.any()).optional(),
        refreshInterval: z.number().optional(),
        allowedOrigins: z.array(z.string()).optional(),
    });
}
