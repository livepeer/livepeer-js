/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type StudioApiError = {
  errors?: Array<string> | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse?: Response | undefined;
};

/** @internal */
export const StudioApiError$inboundSchema: z.ZodType<
  StudioApiError,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.string()).optional(),
  RawResponse: z.instanceof(Response).optional(),
}).transform((v) => {
  return remap$(v, {
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type StudioApiError$Outbound = {
  errors?: Array<string> | undefined;
  RawResponse?: never | undefined;
};

/** @internal */
export const StudioApiError$outboundSchema: z.ZodType<
  StudioApiError$Outbound,
  z.ZodTypeDef,
  StudioApiError
> = z.object({
  errors: z.array(z.string()).optional(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }).optional(),
}).transform((v) => {
  return remap$(v, {
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StudioApiError$ {
  /** @deprecated use `StudioApiError$inboundSchema` instead. */
  export const inboundSchema = StudioApiError$inboundSchema;
  /** @deprecated use `StudioApiError$outboundSchema` instead. */
  export const outboundSchema = StudioApiError$outboundSchema;
  /** @deprecated use `StudioApiError$Outbound` instead. */
  export type Outbound = StudioApiError$Outbound;
}

export function studioApiErrorToJSON(studioApiError: StudioApiError): string {
  return JSON.stringify(StudioApiError$outboundSchema.parse(studioApiError));
}

export function studioApiErrorFromJSON(
  jsonString: string,
): SafeParseResult<StudioApiError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StudioApiError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StudioApiError' from JSON`,
  );
}
