/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type SigningKeyResponsePayload = {
    id?: string | undefined;
    /**
     * Name of the signing key
     */
    name?: string | undefined;
    /**
     * Timestamp (in milliseconds) at which the signing-key was created
     */
    createdAt?: number | undefined;
    /**
     * Timestamp (in milliseconds) at which the signing-key was last used
     */
    lastSeen?: number | undefined;
    publicKey: string;
    /**
     * Disable the signing key to allow rotation safely
     */
    disabled?: boolean | undefined;
    privateKey: string;
};

/** @internal */
export namespace SigningKeyResponsePayload$ {
    export type Inbound = {
        id?: string | undefined;
        name?: string | undefined;
        createdAt?: number | undefined;
        lastSeen?: number | undefined;
        publicKey: string;
        disabled?: boolean | undefined;
        privateKey: string;
    };

    export const inboundSchema: z.ZodType<SigningKeyResponsePayload, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            name: z.string().optional(),
            createdAt: z.number().optional(),
            lastSeen: z.number().optional(),
            publicKey: z.string(),
            disabled: z.boolean().optional(),
            privateKey: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.lastSeen === undefined ? null : { lastSeen: v.lastSeen }),
                publicKey: v.publicKey,
                ...(v.disabled === undefined ? null : { disabled: v.disabled }),
                privateKey: v.privateKey,
            };
        });

    export type Outbound = {
        id?: string | undefined;
        name?: string | undefined;
        createdAt?: number | undefined;
        lastSeen?: number | undefined;
        publicKey: string;
        disabled?: boolean | undefined;
        privateKey: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SigningKeyResponsePayload> = z
        .object({
            id: z.string().optional(),
            name: z.string().optional(),
            createdAt: z.number().optional(),
            lastSeen: z.number().optional(),
            publicKey: z.string(),
            disabled: z.boolean().optional(),
            privateKey: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.lastSeen === undefined ? null : { lastSeen: v.lastSeen }),
                publicKey: v.publicKey,
                ...(v.disabled === undefined ? null : { disabled: v.disabled }),
                privateKey: v.privateKey,
            };
        });
}
