/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Spec, Spec$ } from "./spec";
import * as z from "zod";

export type Storage1 = {
    spec?: Spec | null | undefined;
};

/**
 * Set to true to make default export to IPFS. To customize the
 *
 * @remarks
 * pinned files, specify an object with a spec field. False or null
 * means to unpin from IPFS, but it's unsupported right now.
 *
 */
export type Ipfs = Storage1 | boolean;

export type Storage = {
    /**
     * Set to true to make default export to IPFS. To customize the
     *
     * @remarks
     * pinned files, specify an object with a spec field. False or null
     * means to unpin from IPFS, but it's unsupported right now.
     *
     */
    ipfs?: Storage1 | boolean | null | undefined;
};

/** @internal */
export namespace Storage1$ {
    export const inboundSchema: z.ZodType<Storage1, z.ZodTypeDef, unknown> = z
        .object({
            spec: z.nullable(Spec$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.spec === undefined ? null : { spec: v.spec }),
            };
        });

    export type Outbound = {
        spec?: Spec$.Outbound | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Storage1> = z
        .object({
            spec: z.nullable(Spec$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.spec === undefined ? null : { spec: v.spec }),
            };
        });
}

/** @internal */
export namespace Ipfs$ {
    export const inboundSchema: z.ZodType<Ipfs, z.ZodTypeDef, unknown> = z.union([
        z.lazy(() => Storage1$.inboundSchema),
        z.boolean(),
    ]);

    export type Outbound = Storage1$.Outbound | boolean;
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Ipfs> = z.union([
        z.lazy(() => Storage1$.outboundSchema),
        z.boolean(),
    ]);
}

/** @internal */
export namespace Storage$ {
    export const inboundSchema: z.ZodType<Storage, z.ZodTypeDef, unknown> = z
        .object({
            ipfs: z
                .nullable(z.union([z.lazy(() => Storage1$.inboundSchema), z.boolean()]))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.ipfs === undefined ? null : { ipfs: v.ipfs }),
            };
        });

    export type Outbound = {
        ipfs?: Storage1$.Outbound | boolean | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Storage> = z
        .object({
            ipfs: z
                .nullable(z.union([z.lazy(() => Storage1$.outboundSchema), z.boolean()]))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.ipfs === undefined ? null : { ipfs: v.ipfs }),
            };
        });
}
