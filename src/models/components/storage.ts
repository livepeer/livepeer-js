/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { Spec, Spec$inboundSchema, Spec$Outbound, Spec$outboundSchema } from "./spec.js";
import * as z from "zod";

export type Storage1 = {
    spec?: Spec | null | undefined;
};

/**
 * Set to true to make default export to IPFS. To customize the
 *
 * @remarks
 * pinned files, specify an object with a spec field. False or null
 * means to unpin from IPFS, but it's unsupported right now.
 *
 */
export type Ipfs = Storage1 | boolean;

export type Storage = {
    /**
     * Set to true to make default export to IPFS. To customize the
     *
     * @remarks
     * pinned files, specify an object with a spec field. False or null
     * means to unpin from IPFS, but it's unsupported right now.
     *
     */
    ipfs?: Storage1 | boolean | null | undefined;
};

/** @internal */
export const Storage1$inboundSchema: z.ZodType<Storage1, z.ZodTypeDef, unknown> = z.object({
    spec: z.nullable(Spec$inboundSchema).optional(),
});

/** @internal */
export type Storage1$Outbound = {
    spec?: Spec$Outbound | null | undefined;
};

/** @internal */
export const Storage1$outboundSchema: z.ZodType<Storage1$Outbound, z.ZodTypeDef, Storage1> =
    z.object({
        spec: z.nullable(Spec$outboundSchema).optional(),
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Storage1$ {
    /** @deprecated use `Storage1$inboundSchema` instead. */
    export const inboundSchema = Storage1$inboundSchema;
    /** @deprecated use `Storage1$outboundSchema` instead. */
    export const outboundSchema = Storage1$outboundSchema;
    /** @deprecated use `Storage1$Outbound` instead. */
    export type Outbound = Storage1$Outbound;
}

/** @internal */
export const Ipfs$inboundSchema: z.ZodType<Ipfs, z.ZodTypeDef, unknown> = z.union([
    z.lazy(() => Storage1$inboundSchema),
    z.boolean(),
]);

/** @internal */
export type Ipfs$Outbound = Storage1$Outbound | boolean;

/** @internal */
export const Ipfs$outboundSchema: z.ZodType<Ipfs$Outbound, z.ZodTypeDef, Ipfs> = z.union([
    z.lazy(() => Storage1$outboundSchema),
    z.boolean(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Ipfs$ {
    /** @deprecated use `Ipfs$inboundSchema` instead. */
    export const inboundSchema = Ipfs$inboundSchema;
    /** @deprecated use `Ipfs$outboundSchema` instead. */
    export const outboundSchema = Ipfs$outboundSchema;
    /** @deprecated use `Ipfs$Outbound` instead. */
    export type Outbound = Ipfs$Outbound;
}

/** @internal */
export const Storage$inboundSchema: z.ZodType<Storage, z.ZodTypeDef, unknown> = z.object({
    ipfs: z.nullable(z.union([z.lazy(() => Storage1$inboundSchema), z.boolean()])).optional(),
});

/** @internal */
export type Storage$Outbound = {
    ipfs?: Storage1$Outbound | boolean | null | undefined;
};

/** @internal */
export const Storage$outboundSchema: z.ZodType<Storage$Outbound, z.ZodTypeDef, Storage> = z.object({
    ipfs: z.nullable(z.union([z.lazy(() => Storage1$outboundSchema), z.boolean()])).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Storage$ {
    /** @deprecated use `Storage$inboundSchema` instead. */
    export const inboundSchema = Storage$inboundSchema;
    /** @deprecated use `Storage$outboundSchema` instead. */
    export const outboundSchema = Storage$outboundSchema;
    /** @deprecated use `Storage$Outbound` instead. */
    export type Outbound = Storage$Outbound;
}
