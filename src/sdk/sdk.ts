/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks";
import { SDKOptions, serverURLFromOptions } from "../lib/config";
import { HTTPClient } from "../lib/http";
import { ClientSDK } from "../lib/sdks";
import { AccessControl } from "./accesscontrol";
import { Asset } from "./asset";
import { Metrics } from "./metrics";
import { MultistreamTarget } from "./multistreamtarget";
import { Playback } from "./playback";
import { Session } from "./session";
import { Stream } from "./stream";
import { Task } from "./task";
import { Transcode } from "./transcode";
import { Webhook } from "./webhook";

export class Livepeer extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _stream?: Stream;
    get stream() {
        return (this._stream ??= new Stream(this.options$));
    }

    private _multistreamTarget?: MultistreamTarget;
    get multistreamTarget() {
        return (this._multistreamTarget ??= new MultistreamTarget(this.options$));
    }

    private _webhook?: Webhook;
    get webhook() {
        return (this._webhook ??= new Webhook(this.options$));
    }

    private _asset?: Asset;
    get asset() {
        return (this._asset ??= new Asset(this.options$));
    }

    private _metrics?: Metrics;
    get metrics() {
        return (this._metrics ??= new Metrics(this.options$));
    }

    private _session?: Session;
    get session() {
        return (this._session ??= new Session(this.options$));
    }

    private _accessControl?: AccessControl;
    get accessControl() {
        return (this._accessControl ??= new AccessControl(this.options$));
    }

    private _task?: Task;
    get task() {
        return (this._task ??= new Task(this.options$));
    }

    private _transcode?: Transcode;
    get transcode() {
        return (this._transcode ??= new Transcode(this.options$));
    }

    private _playback?: Playback;
    get playback() {
        return (this._playback ??= new Playback(this.options$));
    }
}
