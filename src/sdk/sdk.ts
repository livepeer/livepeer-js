/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as components from "../models/components";
import { AccessControl } from "./accesscontrol";
import { Asset } from "./asset";
import { Metrics } from "./metrics";
import { MultistreamTarget } from "./multistreamtarget";
import { Playback } from "./playback";
import { Session } from "./session";
import { Stream } from "./stream";
import { Task } from "./task";
import { Transcode } from "./transcode";
import { Webhook } from "./webhook";
import axios from "axios";
import { AxiosInstance } from "axios";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = ["https://livepeer.studio/api"] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
    apiKey?: string;

    /**
     * Allows overriding the default axios client used by the SDK
     */
    defaultClient?: AxiosInstance;

    /**
     * Allows overriding the default server used by the SDK
     */
    serverIdx?: number;

    /**
     * Allows overriding the default server URL used by the SDK
     */
    serverURL?: string;
    /**
     * Allows overriding the default retry config used by the SDK
     */
    retryConfig?: utils.RetryConfig;
};

export class SDKConfiguration {
    defaultClient: AxiosInstance;
    security?: components.Security | (() => Promise<components.Security>);
    serverURL: string;
    serverDefaults: any;
    language = "typescript";
    openapiDocVersion = "1.0.0";
    sdkVersion = "3.0.0";
    genVersion = "2.188.1";
    userAgent = "speakeasy-sdk/typescript 3.0.0 2.188.1 1.0.0 livepeer";
    retryConfig?: utils.RetryConfig;
    public constructor(init?: Partial<SDKConfiguration>) {
        Object.assign(this, init);
    }
}

/**
 * Livepeer API Reference: Welcome to the Livepeer API reference docs. Here you will find all the
 *
 * @remarks
 * endpoints exposed on the standard Livepeer API, learn how to use them and
 * what they return.
 *
 */
export class Livepeer {
    public stream: Stream;
    public multistreamTarget: MultistreamTarget;
    public webhook: Webhook;
    public asset: Asset;
    public metrics: Metrics;
    public session: Session;
    public accessControl: AccessControl;
    public task: Task;
    public transcode: Transcode;
    public playback: Playback;

    private sdkConfiguration: SDKConfiguration;

    constructor(props?: SDKProps) {
        let serverURL = props?.serverURL;
        const serverIdx = props?.serverIdx ?? 0;

        if (!serverURL) {
            serverURL = ServerList[serverIdx];
        }

        const defaultClient = props?.defaultClient ?? axios.create();
        this.sdkConfiguration = new SDKConfiguration({
            defaultClient: defaultClient,
            security: new components.Security({ apiKey: props?.apiKey }),

            serverURL: serverURL,
            retryConfig: props?.retryConfig,
        });

        this.stream = new Stream(this.sdkConfiguration);
        this.multistreamTarget = new MultistreamTarget(this.sdkConfiguration);
        this.webhook = new Webhook(this.sdkConfiguration);
        this.asset = new Asset(this.sdkConfiguration);
        this.metrics = new Metrics(this.sdkConfiguration);
        this.session = new Session(this.sdkConfiguration);
        this.accessControl = new AccessControl(this.sdkConfiguration);
        this.task = new Task(this.sdkConfiguration);
        this.transcode = new Transcode(this.sdkConfiguration);
        this.playback = new Playback(this.sdkConfiguration);
    }
}
