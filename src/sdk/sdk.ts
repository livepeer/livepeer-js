/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ClientSDK } from "../lib/sdks.js";
import { AccessControl } from "./accesscontrol.js";
import { Asset } from "./asset.js";
import { Metrics } from "./metrics.js";
import { Multistream } from "./multistream.js";
import { Playback } from "./playback.js";
import { Room } from "./room.js";
import { Session } from "./session.js";
import { Stream } from "./stream.js";
import { Task } from "./task.js";
import { Transcode } from "./transcode.js";
import { Webhook } from "./webhook.js";

export class Livepeer extends ClientSDK {
    private _stream?: Stream;
    get stream(): Stream {
        return (this._stream ??= new Stream(this.options$));
    }

    private _multistream?: Multistream;
    get multistream(): Multistream {
        return (this._multistream ??= new Multistream(this.options$));
    }

    private _webhook?: Webhook;
    get webhook(): Webhook {
        return (this._webhook ??= new Webhook(this.options$));
    }

    private _asset?: Asset;
    get asset(): Asset {
        return (this._asset ??= new Asset(this.options$));
    }

    private _session?: Session;
    get session(): Session {
        return (this._session ??= new Session(this.options$));
    }

    private _room?: Room;
    get room(): Room {
        return (this._room ??= new Room(this.options$));
    }

    private _metrics?: Metrics;
    get metrics(): Metrics {
        return (this._metrics ??= new Metrics(this.options$));
    }

    private _accessControl?: AccessControl;
    get accessControl(): AccessControl {
        return (this._accessControl ??= new AccessControl(this.options$));
    }

    private _task?: Task;
    get task(): Task {
        return (this._task ??= new Task(this.options$));
    }

    private _transcode?: Transcode;
    get transcode(): Transcode {
        return (this._transcode ??= new Transcode(this.options$));
    }

    private _playback?: Playback;
    get playback(): Playback {
        return (this._playback ??= new Playback(this.options$));
    }
}
