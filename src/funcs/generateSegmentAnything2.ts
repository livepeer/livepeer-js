/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { LivepeerCore } from "../core.js";
import { readableStreamToArrayBuffer } from "../lib/files.js";
import * as m$ from "../lib/matchers.js";
import * as schemas$ from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import * as components from "../models/components/index.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/errors/httpclienterrors.js";
import * as errors from "../models/errors/index.js";
import { SDKError } from "../models/errors/sdkerror.js";
import { SDKValidationError } from "../models/errors/sdkvalidationerror.js";
import * as operations from "../models/operations/index.js";
import { isBlobLike } from "../types/blobs.js";
import { Result } from "../types/fp.js";
import { isReadableStream } from "../types/streams.js";

/**
 * Segment Anything 2
 *
 * @remarks
 * Segment objects in an image.
 */
export async function generateSegmentAnything2(
  client$: LivepeerCore,
  request: components.BodyGenSegmentAnything2,
  options?: RequestOptions,
): Promise<
  Result<
    operations.GenSegmentAnything2Response,
    | errors.GenSegmentAnything2ResponseBody
    | errors.GenSegmentAnything2GenerateResponseBody
    | errors.GenSegmentAnything2GenerateResponseResponseBody
    | errors.GenSegmentAnything2GenerateResponse500ResponseBody
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >
> {
  const input$ = request;

  const parsed$ = schemas$.safeParse(
    input$,
    (value$) => components.BodyGenSegmentAnything2$outboundSchema.parse(value$),
    "Input validation failed",
  );
  if (!parsed$.ok) {
    return parsed$;
  }
  const payload$ = parsed$.value;
  const body$ = new FormData();

  if (isBlobLike(payload$.image)) {
    body$.append("image", payload$.image);
  } else if (isReadableStream(payload$.image.content)) {
    const buffer = await readableStreamToArrayBuffer(payload$.image.content);
    const blob = new Blob([buffer], { type: "application/octet-stream" });
    body$.append("image", blob);
  } else {
    body$.append(
      "image",
      new Blob([payload$.image.content], { type: "application/octet-stream" }),
      payload$.image.fileName,
    );
  }
  if (payload$.box !== undefined) {
    body$.append("box", payload$.box);
  }
  if (payload$.mask_input !== undefined) {
    body$.append("mask_input", payload$.mask_input);
  }
  if (payload$.model_id !== undefined) {
    body$.append("model_id", payload$.model_id);
  }
  if (payload$.multimask_output !== undefined) {
    body$.append("multimask_output", String(payload$.multimask_output));
  }
  if (payload$.normalize_coords !== undefined) {
    body$.append("normalize_coords", String(payload$.normalize_coords));
  }
  if (payload$.point_coords !== undefined) {
    body$.append("point_coords", payload$.point_coords);
  }
  if (payload$.point_labels !== undefined) {
    body$.append("point_labels", payload$.point_labels);
  }
  if (payload$.return_logits !== undefined) {
    body$.append("return_logits", String(payload$.return_logits));
  }

  const path$ = pathToFunc("/api/beta/generate/segment-anything-2")();

  const headers$ = new Headers({
    Accept: "application/json",
  });

  const apiKey$ = await extractSecurity(client$.options$.apiKey);
  const security$ = apiKey$ == null ? {} : { apiKey: apiKey$ };
  const context = {
    operationID: "genSegmentAnything2",
    oAuth2Scopes: [],
    securitySource: client$.options$.apiKey,
  };
  const securitySettings$ = resolveGlobalSecurity(security$);

  const requestRes = client$.createRequest$(context, {
    security: securitySettings$,
    method: "POST",
    path: path$,
    headers: headers$,
    body: body$,
    timeoutMs: options?.timeoutMs || client$.options$.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return requestRes;
  }
  const request$ = requestRes.value;

  const doResult = await client$.do$(request$, {
    context,
    errorCodes: ["400", "401", "422", "4XX", "500", "5XX"],
    retryConfig: options?.retries
      || client$.options$.retryConfig,
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  });
  if (!doResult.ok) {
    return doResult;
  }
  const response = doResult.value;

  const responseFields$ = {
    ContentType: response.headers.get("content-type")
      ?? "application/octet-stream",
    StatusCode: response.status,
    RawResponse: response,
    Headers: {},
  };

  const [result$] = await m$.match<
    operations.GenSegmentAnything2Response,
    | errors.GenSegmentAnything2ResponseBody
    | errors.GenSegmentAnything2GenerateResponseBody
    | errors.GenSegmentAnything2GenerateResponseResponseBody
    | errors.GenSegmentAnything2GenerateResponse500ResponseBody
    | SDKError
    | SDKValidationError
    | UnexpectedClientError
    | InvalidRequestError
    | RequestAbortedError
    | RequestTimeoutError
    | ConnectionError
  >(
    m$.json(200, operations.GenSegmentAnything2Response$inboundSchema, {
      key: "MasksResponse",
    }),
    m$.jsonErr(400, errors.GenSegmentAnything2ResponseBody$inboundSchema),
    m$.jsonErr(
      401,
      errors.GenSegmentAnything2GenerateResponseBody$inboundSchema,
    ),
    m$.jsonErr(
      422,
      errors.GenSegmentAnything2GenerateResponseResponseBody$inboundSchema,
    ),
    m$.jsonErr(
      500,
      errors.GenSegmentAnything2GenerateResponse500ResponseBody$inboundSchema,
    ),
    m$.fail(["4XX", "5XX"]),
    m$.json("default", operations.GenSegmentAnything2Response$inboundSchema, {
      key: "studio-api-error",
    }),
  )(response, { extraFields: responseFields$ });
  if (!result$.ok) {
    return result$;
  }

  return result$;
}
